// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/workflowengine/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// WorkflowExecutor is an autogenerated mock type for the WorkflowExecutor type
type WorkflowExecutor struct {
	mock.Mock
}

// Abort provides a mock function with given fields: ctx, data
func (_m *WorkflowExecutor) Abort(ctx context.Context, data interfaces.AbortData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.AbortData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: ctx, data
func (_m *WorkflowExecutor) Execute(ctx context.Context, data interfaces.ExecutionData) (interfaces.ExecutionResponse, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interfaces.ExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ExecutionData) (interfaces.ExecutionResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ExecutionData) interfaces.ExecutionResponse); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(interfaces.ExecutionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.ExecutionData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *WorkflowExecutor) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewWorkflowExecutor creates a new instance of WorkflowExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowExecutor {
	mock := &WorkflowExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
