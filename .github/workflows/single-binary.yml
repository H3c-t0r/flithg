name: Build & Push Flyte Single Binary Images

on:
  pull_request:
    paths:
      - .github/workflows/single-binary.yml
      - charts/flyte-binary/**
      - charts/flyte-sandbox/**
      - cmd/**
      - docker/sandbox-bundled/**
      - Dockerfile
      - go.*
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  test-bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          working-directory: docker/sandbox-bundled/bootstrap
      - name: Check formatting
        working-directory: docker/sandbox-bundled/bootstrap
        run: |
          make check-fmt
      - name: Test
        working-directory: docker/sandbox-bundled/bootstrap
        run: |
          make test

  trigger-single-binary-build:
    runs-on: ubuntu-latest
    needs: [test-bootstrap]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            /root/.cache/go-build
            /root/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-
      - name: Set versions
        id: set_version
        run: |
          # TODO: Find a better way to determine the flyteconsole version
          echo "FLYTECONSOLE_VERSION=$(yq eval '.flyteconsole.image.tag' charts/flyte-core/values.yaml)" >> $GITHUB_ENV
          echo "FLYTE_VERSION=${{ github.sha }}" >> $GITHUB_ENV
      - name: Prepare Image Names
        id: image-names
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/flyte-binary
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
            type=sha,format=long
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
      - name: Setup destination directories for image tarballs
        run: |
          mkdir -p docker/sandbox-bundled/images/tar/{arm64,amd64}
      - name: Export ARM64 Image
        uses: docker/build-push-action@v3
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        with:
          context: .
          platforms: linux/arm64
          tags: flyte-binary:sandbox
          build-args: |
            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}
            FLYTE_VERSION=${{ env.FLYTE_VERSION }}
          file: Dockerfile
          outputs: type=docker,dest=docker/sandbox-bundled/images/tar/arm64/flyte-binary.tar
      - name: Export AMD64 Image
        uses: docker/build-push-action@v3
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        with:
          context: .
          platforms: linux/amd64
          tags: flyte-binary:sandbox
          build-args: |
            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}
            FLYTE_VERSION=${{ env.FLYTE_VERSION }}
          file: Dockerfile
          outputs: type=docker,dest=docker/sandbox-bundled/images/tar/amd64/flyte-binary.tar
      - name: Build and push Image
        uses: docker/build-push-action@v3
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        with:
          context: .
          platforms: linux/arm64, linux/amd64
          tags: ${{ steps.image-names.outputs.tags }}
          build-args: |
            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}
            FLYTE_VERSION=${{ env.FLYTE_VERSION }}
          file: Dockerfile
          push: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event_name == 'workflow_dispatch' }}
      - name: Upload Artifact GitHub Action
        uses: actions/upload-artifact@v2
        with:
          name: single-binary-image
          path: docker/sandbox-bundled/images/tar

  trigger-sandbox-bundled-build:
    runs-on: ubuntu-latest
    needs: [trigger-single-binary-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - uses: actions/download-artifact@v3
        with:
          name: single-binary-image
          path: docker/sandbox-bundled/images/tar
      - name: Set version
        id: set_version
        run: |
          echo "FLYTE_SANDBOX_VERSION=${{ github.sha }}" >> $GITHUB_ENV
      - name: Prepare Image Names
        id: image-names
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/flyte-sandbox-bundled
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
            type=sha,format=long,
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:master
          buildkitd-flags: "--allow-insecure-entitlement security.insecure"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
      - name: Build and push Image
        uses: docker/build-push-action@v3
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        with:
          context: docker/sandbox-bundled
          allow: "security.insecure"
          platforms: linux/arm64, linux/amd64
          tags: ${{ steps.image-names.outputs.tags }}
          build-args: "FLYTE_SANDBOX_VERSION=${{ env.FLYTE_SANDBOX_VERSION }}"
          push: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event_name == 'workflow_dispatch' }}
