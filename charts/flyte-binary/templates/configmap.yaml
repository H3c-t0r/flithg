{{- if not .Values.configuration.externalConfigMap }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "flyte-binary.configuration.configMapName" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "flyte-binary.labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "flyte-binary.renderTemplate" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    {{- if .Values.configuration.labels }}
    {{- include "flyte-binary.renderTemplate" (dict "value" .Values.configuration.labels "context" $) | nindent 4 }}
    {{- end }}
  annotations:
    {{- if .Values.commonAnnotations }}
    {{- include "flyte-binary.renderTemplate" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
    {{- if .Values.configuration.annotations }}
    {{- include "flyte-binary.renderTemplate" (dict "value" .Values.configuration.annotations "context" $) | nindent 4 }}
    {{- end }}
data:
  000-core.yaml: |
    admin:
      endpoint: localhost:8089
      insecure: true
    catalog-cache:
      endpoint: localhost:8081
      insecure: true
      type: datacatalog
    cluster_resources:
      standaloneDeployment: false
      templatePath: /etc/flyte/cluster-resource-templates
    logger:
      show-source: true
      level: {{ default 1 .Values.configuration.logging.level }}
    propeller:
      create-flyteworkflow-crd: true
    webhook:
      certDir: /var/run/flyte/certs
      localCert: true
      secretName: {{ include "flyte-binary.webhook.secretName" . }}
      serviceName: {{ include "flyte-binary.webhook.serviceName" . }}
      servicePort: 443
  001-plugins.yaml: |
    tasks:
      task-plugins:
        enabled-plugins:
          - container
          - sidecar
          - K8S-ARRAY
        default-for-task-types:
          - container: container
          - container_array: K8S-ARRAY
    plugins:
      logs: {{- include "flyte-binary.configuration.logging.plugins" . | nindent 8 }}
      k8s-array:
        logs:
          config: {{- include "flyte-binary.configuration.logging.plugins" . | nindent 12 }}
  002-database.yaml: |
    {{- with .Values.configuration.database }}
    database:
      postgres:
        username: {{ .username }}
        {{- if .password }}
        passwordPath: {{ include "flyte-binary.configuration.database.passwordSecretMountPath" $ }}
        {{- else }}
        passwordPath: {{ .passwordPath }}
        {{- end }}
        host: {{ .host }}
        port: {{ .port }}
        dbname: {{ .dbname }}
        options: {{ .options | quote }}
    {{- end }}
  003-storage.yaml: |
    propeller:
      rawoutput-prefix: {{ include "flyte-binary.configuration.storage.userDataPrefix" . }}
    {{- with .Values.configuration.storage }}
    storage:
    {{- if eq "s3" .provider }}
      {{- with .providerConfig.s3 }}
      type: s3
      connection:
        region: {{ required "Region required for S3 storage provider" .region }}
        disable-ssl: {{ .disableSSL }}
        {{- if .endpoint }}
        endpoint: {{ include "flyte-binary.renderTemplate" ( dict "value" .endpoint "context" $ ) }}
        {{- end }}
        {{- if eq "iam" .authType }}
        auth-type: "iam"
        {{- else if eq "accesskey" .authType }}
        auth-type: "accesskey"
        access-key: {{ required "Access key required for S3 storage provider" .accessKey }}
        secret-key: {{ required "Secret key required for S3 storage provider" .secretKey }}
        {{- else }}
        {{- printf "Invalid value for S3 storage provider authentication type. Expected one of (iam, accesskey), but got: %s" .authType | fail }}
        {{- end }}
      {{- end }}
    {{- else if eq "gcs" .provider }}
      type: stow
        stow:
          kind: google
          config:
            json: ""
            project_id: {{ required "GCP project required for GCS storage provider" .providerConfig.gcs.project }}
            scopes: https://www.googleapis.com/auth/devstorage.read_write
    {{- else }}
    {{- printf "Invalid value for storage provider. Expected one of (s3, gcs), but got: %s" .provider | fail }}
    {{- end }}
      container: {{ required "Metadata container required" .metadataContainer }}
    {{- end }}
  {{- if .Values.configuration.inline }}
  010-inline-config.yaml: |
    {{- include "flyte-binary.renderTemplate" ( dict "value" .Values.configuration.inline "context" $ ) | nindent 4 }}
  {{- else if .Values.configuration.sourcePath }}
  {{- (tpl (.Files.Glob .Values.configuration.sourcePath).AsConfig . ) | nindent 2 }}
  {{- end }}
{{- end }}
