// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/event/cloudevents.proto

package event

import (
	fmt "fmt"
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This is the cloud event parallel to the raw WorkflowExecutionEvent message. It's filled in with additional
// information that downstream consumers may find useful.
type CloudEventWorkflowExecution struct {
	RawEvent        *WorkflowExecutionEvent `protobuf:"bytes,1,opt,name=raw_event,json=rawEvent,proto3" json:"raw_event,omitempty"`
	OutputData      *core.LiteralMap        `protobuf:"bytes,2,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	OutputInterface *core.TypedInterface    `protobuf:"bytes,3,opt,name=output_interface,json=outputInterface,proto3" json:"output_interface,omitempty"`
	InputData       *core.LiteralMap        `protobuf:"bytes,4,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// The following are ExecutionMetadata fields
	// We can't have the ExecutionMetadata object directly because of import cycle
	ArtifactIds         []*core.ArtifactID                `protobuf:"bytes,6,rep,name=artifact_ids,json=artifactIds,proto3" json:"artifact_ids,omitempty"`
	ParentNodeExecution *core.NodeExecutionIdentifier     `protobuf:"bytes,7,opt,name=parent_node_execution,json=parentNodeExecution,proto3" json:"parent_node_execution,omitempty"`
	ReferenceExecution  *core.WorkflowExecutionIdentifier `protobuf:"bytes,8,opt,name=reference_execution,json=referenceExecution,proto3" json:"reference_execution,omitempty"`
	// The ID of the LP that generated the execution that generated the Artifact.
	// Here for provenance information.
	// Launch plan IDs are easier to get than workflow IDs so we'll use these for now.
	LaunchPlanId         *core.Identifier `protobuf:"bytes,9,opt,name=launch_plan_id,json=launchPlanId,proto3" json:"launch_plan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CloudEventWorkflowExecution) Reset()         { *m = CloudEventWorkflowExecution{} }
func (m *CloudEventWorkflowExecution) String() string { return proto.CompactTextString(m) }
func (*CloudEventWorkflowExecution) ProtoMessage()    {}
func (*CloudEventWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8af3ecc827e5d5e, []int{0}
}

func (m *CloudEventWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudEventWorkflowExecution.Unmarshal(m, b)
}
func (m *CloudEventWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudEventWorkflowExecution.Marshal(b, m, deterministic)
}
func (m *CloudEventWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudEventWorkflowExecution.Merge(m, src)
}
func (m *CloudEventWorkflowExecution) XXX_Size() int {
	return xxx_messageInfo_CloudEventWorkflowExecution.Size(m)
}
func (m *CloudEventWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudEventWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_CloudEventWorkflowExecution proto.InternalMessageInfo

func (m *CloudEventWorkflowExecution) GetRawEvent() *WorkflowExecutionEvent {
	if m != nil {
		return m.RawEvent
	}
	return nil
}

func (m *CloudEventWorkflowExecution) GetOutputData() *core.LiteralMap {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *CloudEventWorkflowExecution) GetOutputInterface() *core.TypedInterface {
	if m != nil {
		return m.OutputInterface
	}
	return nil
}

func (m *CloudEventWorkflowExecution) GetInputData() *core.LiteralMap {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *CloudEventWorkflowExecution) GetArtifactIds() []*core.ArtifactID {
	if m != nil {
		return m.ArtifactIds
	}
	return nil
}

func (m *CloudEventWorkflowExecution) GetParentNodeExecution() *core.NodeExecutionIdentifier {
	if m != nil {
		return m.ParentNodeExecution
	}
	return nil
}

func (m *CloudEventWorkflowExecution) GetReferenceExecution() *core.WorkflowExecutionIdentifier {
	if m != nil {
		return m.ReferenceExecution
	}
	return nil
}

func (m *CloudEventWorkflowExecution) GetLaunchPlanId() *core.Identifier {
	if m != nil {
		return m.LaunchPlanId
	}
	return nil
}

type CloudEventNodeExecution struct {
	RawEvent *NodeExecutionEvent `protobuf:"bytes,1,opt,name=raw_event,json=rawEvent,proto3" json:"raw_event,omitempty"`
	// ID of the task. In combination with the retryAttempt this will indicate
	// the task execution uniquely for a given parent node execution.
	// need to copy
	TaskId *core.Identifier `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// retry attempt number for this task, ie., 2 for the second attempt
	// need to copy
	RetryAttempt uint32 `protobuf:"varint,3,opt,name=retry_attempt,json=retryAttempt,proto3" json:"retry_attempt,omitempty"`
	// Hydrated output
	OutputData *core.LiteralMap `protobuf:"bytes,4,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	// The typed interface for the task that produced the event.
	OutputInterface *core.TypedInterface `protobuf:"bytes,5,opt,name=output_interface,json=outputInterface,proto3" json:"output_interface,omitempty"`
	InputData       *core.LiteralMap     `protobuf:"bytes,6,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// The ID of the LP that generated the execution that generated the Artifact.
	// Here for provenance information.
	// Launch plan IDs are easier to get than workflow IDs so we'll use these for now.
	LaunchPlanId         *core.Identifier `protobuf:"bytes,9,opt,name=launch_plan_id,json=launchPlanId,proto3" json:"launch_plan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CloudEventNodeExecution) Reset()         { *m = CloudEventNodeExecution{} }
func (m *CloudEventNodeExecution) String() string { return proto.CompactTextString(m) }
func (*CloudEventNodeExecution) ProtoMessage()    {}
func (*CloudEventNodeExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8af3ecc827e5d5e, []int{1}
}

func (m *CloudEventNodeExecution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudEventNodeExecution.Unmarshal(m, b)
}
func (m *CloudEventNodeExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudEventNodeExecution.Marshal(b, m, deterministic)
}
func (m *CloudEventNodeExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudEventNodeExecution.Merge(m, src)
}
func (m *CloudEventNodeExecution) XXX_Size() int {
	return xxx_messageInfo_CloudEventNodeExecution.Size(m)
}
func (m *CloudEventNodeExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudEventNodeExecution.DiscardUnknown(m)
}

var xxx_messageInfo_CloudEventNodeExecution proto.InternalMessageInfo

func (m *CloudEventNodeExecution) GetRawEvent() *NodeExecutionEvent {
	if m != nil {
		return m.RawEvent
	}
	return nil
}

func (m *CloudEventNodeExecution) GetTaskId() *core.Identifier {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *CloudEventNodeExecution) GetRetryAttempt() uint32 {
	if m != nil {
		return m.RetryAttempt
	}
	return 0
}

func (m *CloudEventNodeExecution) GetOutputData() *core.LiteralMap {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *CloudEventNodeExecution) GetOutputInterface() *core.TypedInterface {
	if m != nil {
		return m.OutputInterface
	}
	return nil
}

func (m *CloudEventNodeExecution) GetInputData() *core.LiteralMap {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *CloudEventNodeExecution) GetLaunchPlanId() *core.Identifier {
	if m != nil {
		return m.LaunchPlanId
	}
	return nil
}

type CloudEventTaskExecution struct {
	RawEvent             *TaskExecutionEvent `protobuf:"bytes,1,opt,name=raw_event,json=rawEvent,proto3" json:"raw_event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CloudEventTaskExecution) Reset()         { *m = CloudEventTaskExecution{} }
func (m *CloudEventTaskExecution) String() string { return proto.CompactTextString(m) }
func (*CloudEventTaskExecution) ProtoMessage()    {}
func (*CloudEventTaskExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8af3ecc827e5d5e, []int{2}
}

func (m *CloudEventTaskExecution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudEventTaskExecution.Unmarshal(m, b)
}
func (m *CloudEventTaskExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudEventTaskExecution.Marshal(b, m, deterministic)
}
func (m *CloudEventTaskExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudEventTaskExecution.Merge(m, src)
}
func (m *CloudEventTaskExecution) XXX_Size() int {
	return xxx_messageInfo_CloudEventTaskExecution.Size(m)
}
func (m *CloudEventTaskExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudEventTaskExecution.DiscardUnknown(m)
}

var xxx_messageInfo_CloudEventTaskExecution proto.InternalMessageInfo

func (m *CloudEventTaskExecution) GetRawEvent() *TaskExecutionEvent {
	if m != nil {
		return m.RawEvent
	}
	return nil
}

// This event is to be sent by Admin after it creates an execution.
type CloudEventExecutionStart struct {
	// The execution created.
	ExecutionId *core.WorkflowExecutionIdentifier `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// The launch plan used.
	LaunchPlanId *core.Identifier `protobuf:"bytes,2,opt,name=launch_plan_id,json=launchPlanId,proto3" json:"launch_plan_id,omitempty"`
	WorkflowId   *core.Identifier `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Artifact IDs found
	ArtifactIds []*core.ArtifactID `protobuf:"bytes,4,rep,name=artifact_ids,json=artifactIds,proto3" json:"artifact_ids,omitempty"`
	// Artifact keys found.
	ArtifactKeys         []string `protobuf:"bytes,5,rep,name=artifact_keys,json=artifactKeys,proto3" json:"artifact_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudEventExecutionStart) Reset()         { *m = CloudEventExecutionStart{} }
func (m *CloudEventExecutionStart) String() string { return proto.CompactTextString(m) }
func (*CloudEventExecutionStart) ProtoMessage()    {}
func (*CloudEventExecutionStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8af3ecc827e5d5e, []int{3}
}

func (m *CloudEventExecutionStart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudEventExecutionStart.Unmarshal(m, b)
}
func (m *CloudEventExecutionStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudEventExecutionStart.Marshal(b, m, deterministic)
}
func (m *CloudEventExecutionStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudEventExecutionStart.Merge(m, src)
}
func (m *CloudEventExecutionStart) XXX_Size() int {
	return xxx_messageInfo_CloudEventExecutionStart.Size(m)
}
func (m *CloudEventExecutionStart) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudEventExecutionStart.DiscardUnknown(m)
}

var xxx_messageInfo_CloudEventExecutionStart proto.InternalMessageInfo

func (m *CloudEventExecutionStart) GetExecutionId() *core.WorkflowExecutionIdentifier {
	if m != nil {
		return m.ExecutionId
	}
	return nil
}

func (m *CloudEventExecutionStart) GetLaunchPlanId() *core.Identifier {
	if m != nil {
		return m.LaunchPlanId
	}
	return nil
}

func (m *CloudEventExecutionStart) GetWorkflowId() *core.Identifier {
	if m != nil {
		return m.WorkflowId
	}
	return nil
}

func (m *CloudEventExecutionStart) GetArtifactIds() []*core.ArtifactID {
	if m != nil {
		return m.ArtifactIds
	}
	return nil
}

func (m *CloudEventExecutionStart) GetArtifactKeys() []string {
	if m != nil {
		return m.ArtifactKeys
	}
	return nil
}

func init() {
	proto.RegisterType((*CloudEventWorkflowExecution)(nil), "flyteidl.event.CloudEventWorkflowExecution")
	proto.RegisterType((*CloudEventNodeExecution)(nil), "flyteidl.event.CloudEventNodeExecution")
	proto.RegisterType((*CloudEventTaskExecution)(nil), "flyteidl.event.CloudEventTaskExecution")
	proto.RegisterType((*CloudEventExecutionStart)(nil), "flyteidl.event.CloudEventExecutionStart")
}

func init() { proto.RegisterFile("flyteidl/event/cloudevents.proto", fileDescriptor_f8af3ecc827e5d5e) }

var fileDescriptor_f8af3ecc827e5d5e = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0x69, 0x92, 0xa6, 0x8d, 0x92, 0x76, 0xc3, 0x65, 0xcc, 0xcb, 0xd6, 0x2d, 0xa4, 0x30,
	0xca, 0x60, 0x31, 0x74, 0x37, 0x63, 0x7f, 0x28, 0x5d, 0x5b, 0x98, 0xd9, 0x3a, 0x86, 0x57, 0x18,
	0x74, 0x17, 0x46, 0xb1, 0x8e, 0x53, 0x11, 0x47, 0x32, 0xf2, 0xf1, 0xb2, 0xbc, 0xd7, 0x5e, 0x62,
	0xaf, 0xb0, 0xa7, 0x19, 0x96, 0x63, 0x25, 0x76, 0x0a, 0x25, 0x74, 0x37, 0x45, 0x95, 0xbe, 0xef,
	0x97, 0xa3, 0x73, 0x3e, 0x2c, 0xd2, 0x0b, 0xa3, 0x19, 0x02, 0x67, 0x91, 0x03, 0x3f, 0x41, 0xa0,
	0x13, 0x44, 0x32, 0x65, 0x7a, 0x99, 0x0c, 0x62, 0x25, 0x51, 0x5a, 0xbb, 0x85, 0x62, 0xa0, 0xb7,
	0xbb, 0xdd, 0x8a, 0x43, 0xff, 0xcd, 0xb5, 0xdd, 0x27, 0xe6, 0x2c, 0x90, 0x0a, 0x9c, 0x88, 0x23,
	0x28, 0x1a, 0xcd, 0x49, 0xdd, 0xfd, 0xf2, 0x29, 0x17, 0x08, 0x2a, 0xa4, 0x01, 0xcc, 0x8f, 0x9f,
	0x95, 0x8f, 0xa9, 0x42, 0x1e, 0xd2, 0x00, 0x7d, 0xce, 0xe6, 0x82, 0xa7, 0x15, 0x3f, 0x03, 0x81,
	0x3c, 0xe4, 0xa0, 0x0a, 0xc0, 0x48, 0xca, 0x51, 0x04, 0x8e, 0xfe, 0x6f, 0x98, 0x86, 0x0e, 0xf2,
	0x09, 0x24, 0x48, 0x27, 0x71, 0x2e, 0xe8, 0xff, 0x6d, 0x90, 0xc7, 0xa7, 0xd9, 0x05, 0xcf, 0xb3,
	0x9a, 0xbf, 0x4b, 0x35, 0x0e, 0x23, 0x39, 0x3d, 0xff, 0x05, 0x41, 0x8a, 0x5c, 0x0a, 0xeb, 0x94,
	0xb4, 0x14, 0x9d, 0xfa, 0xfa, 0x46, 0xf6, 0x46, 0x6f, 0xe3, 0xb0, 0x7d, 0xf4, 0x7c, 0x50, 0xbe,
	0xfe, 0x60, 0xc5, 0xa5, 0x59, 0xde, 0xb6, 0xa2, 0x53, 0xbd, 0xb2, 0xde, 0x90, 0xb6, 0x4c, 0x31,
	0x4e, 0xd1, 0x67, 0x14, 0xa9, 0x5d, 0xd3, 0x98, 0x47, 0x0b, 0x4c, 0x56, 0xfb, 0xe0, 0x73, 0xde,
	0x99, 0x0b, 0x1a, 0x7b, 0x24, 0x57, 0x9f, 0x51, 0xa4, 0xd6, 0x47, 0x72, 0x7f, 0xee, 0x35, 0xcd,
	0xb1, 0xeb, 0x1a, 0xb0, 0x5f, 0x01, 0x5c, 0xce, 0x62, 0x60, 0x6e, 0x21, 0xf2, 0xee, 0xe5, 0x36,
	0xb3, 0x61, 0xbd, 0x26, 0x84, 0x0b, 0x53, 0x44, 0xe3, 0xb6, 0x22, 0x5a, 0x5a, 0xac, 0x6b, 0x78,
	0x47, 0x3a, 0x4b, 0xad, 0x4f, 0xec, 0x66, 0xaf, 0x7e, 0x83, 0xf7, 0x64, 0x2e, 0x71, 0xcf, 0xbc,
	0x76, 0x21, 0x77, 0x59, 0x62, 0x5d, 0x91, 0x07, 0x31, 0x55, 0x20, 0xd0, 0x17, 0x92, 0x81, 0x0f,
	0x45, 0x97, 0xec, 0xad, 0x6a, 0x3b, 0x35, 0xe6, 0x8b, 0x64, 0x60, 0x3a, 0xe9, 0x9a, 0x81, 0x7a,
	0x7b, 0x39, 0xa4, 0x74, 0x6c, 0xfd, 0x20, 0x7b, 0x0a, 0x42, 0x50, 0x20, 0x82, 0x65, 0xf2, 0xb6,
	0x26, 0xbf, 0xa8, 0x90, 0x57, 0xe6, 0xb4, 0x44, 0xb7, 0x0c, 0x66, 0x01, 0x3f, 0x26, 0xbb, 0x11,
	0x4d, 0x45, 0x70, 0xed, 0xc7, 0x11, 0x15, 0x3e, 0x67, 0x76, 0xeb, 0xc6, 0xa6, 0x2d, 0x61, 0x3a,
	0xb9, 0xe1, 0x6b, 0x44, 0x85, 0xcb, 0xfa, 0xbf, 0xeb, 0xe4, 0xe1, 0x22, 0x5c, 0xe5, 0xca, 0x8f,
	0x57, 0x83, 0xd5, 0xaf, 0x06, 0xab, 0xe4, 0xa8, 0x86, 0xea, 0x88, 0x6c, 0x21, 0x4d, 0xc6, 0x59,
	0x59, 0xb5, 0xdb, 0xca, 0x6a, 0x66, 0x4a, 0x97, 0x59, 0x07, 0x64, 0x47, 0x01, 0xaa, 0x99, 0x4f,
	0x11, 0x61, 0x12, 0xa3, 0x4e, 0xd2, 0x8e, 0xd7, 0xd1, 0x9b, 0x27, 0xf9, 0x5e, 0x35, 0xad, 0x8d,
	0xbb, 0xa6, 0x75, 0xf3, 0x3f, 0xa4, 0xb5, 0xb9, 0x46, 0x5a, 0xef, 0x3c, 0xb6, 0xab, 0xe5, 0xa9,
	0x5d, 0xd2, 0x64, 0xbc, 0xde, 0xd4, 0x4a, 0x8e, 0xca, 0xd4, 0xfa, 0x7f, 0x6a, 0xc4, 0x5e, 0xc0,
	0x8d, 0xec, 0x1b, 0x52, 0x85, 0xd6, 0x05, 0xe9, 0x98, 0x0c, 0x67, 0x75, 0x6f, 0xac, 0x1d, 0xe3,
	0x36, 0x2c, 0x36, 0x6f, 0x68, 0x44, 0x6d, 0xad, 0x46, 0x64, 0x49, 0x98, 0xce, 0x7f, 0x2c, 0x73,
	0xd7, 0x6f, 0x73, 0x93, 0x42, 0xed, 0xb2, 0x95, 0x6f, 0x46, 0x63, 0xad, 0x6f, 0xc6, 0x01, 0xd9,
	0x31, 0xee, 0x31, 0xcc, 0x12, 0x7b, 0xb3, 0x57, 0x3f, 0x6c, 0x79, 0x06, 0xf9, 0x09, 0x66, 0xc9,
	0x87, 0xf7, 0x57, 0x6f, 0x47, 0x1c, 0xaf, 0xd3, 0xe1, 0x20, 0x90, 0x13, 0x47, 0x83, 0xa5, 0x1a,
	0xe5, 0x0b, 0xc7, 0x3c, 0x0c, 0x23, 0x10, 0x4e, 0x3c, 0x7c, 0x39, 0x92, 0x4e, 0xf9, 0x95, 0x1a,
	0x36, 0xf5, 0x0b, 0xf0, 0xea, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x6c, 0x85, 0x5f, 0xf0,
	0x06, 0x00, 0x00,
}
