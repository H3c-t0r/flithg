// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/service/agent.proto

package service

import (
	context "context"
	fmt "fmt"
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("flyteidl/service/agent.proto", fileDescriptor_f7d1dfd1fb77d2ef) }

var fileDescriptor_f7d1dfd1fb77d2ef = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x40, 0xc5, 0xc3, 0x0a, 0x73, 0xd2, 0x1c, 0x8b, 0xae, 0xb8, 0x77, 0x13, 0xd0, 0xb3, 0xc8,
	0xea, 0x82, 0x08, 0x9e, 0xd4, 0xbd, 0x78, 0x4b, 0xbb, 0x63, 0x0c, 0xb6, 0x99, 0x9a, 0xa4, 0x42,
	0x7f, 0xd5, 0xaf, 0x11, 0xd3, 0x36, 0x2d, 0x95, 0xec, 0x2d, 0xe4, 0xbd, 0x79, 0x0c, 0x0c, 0x9c,
	0xbe, 0x97, 0xad, 0x47, 0xbd, 0x2b, 0x85, 0x43, 0xfb, 0xad, 0x0b, 0x14, 0x52, 0xa1, 0xf1, 0xbc,
	0xb6, 0xe4, 0x89, 0x1d, 0x0f, 0x94, 0xf7, 0x34, 0xcb, 0xa2, 0x2f, 0x77, 0x95, 0x36, 0x53, 0xfb,
	0xea, 0xe7, 0x10, 0x4e, 0xd6, 0xae, 0x35, 0xc5, 0xfa, 0xef, 0xf3, 0xa5, 0x9b, 0x60, 0x5b, 0x80,
	0x7b, 0x8b, 0xd2, 0xe3, 0xab, 0x74, 0x9f, 0xec, 0x82, 0xc7, 0x64, 0x08, 0xf0, 0x91, 0x3d, 0xe3,
	0x57, 0x83, 0xce, 0x67, 0xab, 0x7d, 0x8a, 0xab, 0xc9, 0x38, 0x5c, 0x1d, 0xb0, 0x27, 0x38, 0x7a,
	0x40, 0x1f, 0x9a, 0xcb, 0xf9, 0x40, 0x0f, 0x86, 0xe0, 0x79, 0x92, 0xc7, 0xda, 0x16, 0x60, 0x83,
	0x25, 0xa6, 0x96, 0x1c, 0x59, 0x72, 0xc9, 0xa9, 0x12, 0xb3, 0x8f, 0xb0, 0xd8, 0x50, 0x48, 0x9e,
	0xfd, 0xf3, 0x69, 0x9a, 0x5b, 0xa6, 0xf0, 0x90, 0xba, 0xbb, 0x7d, 0xbb, 0x51, 0xda, 0x7f, 0x34,
	0x39, 0x2f, 0xa8, 0x12, 0xc1, 0x26, 0xab, 0xba, 0x87, 0x88, 0x47, 0x51, 0x68, 0x44, 0x9d, 0x5f,
	0x2a, 0x12, 0xf3, 0xbb, 0xe6, 0x8b, 0x70, 0xa4, 0xeb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01,
	0xb8, 0x9c, 0xe0, 0xf2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsyncAgentServiceClient is the client API for AsyncAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsyncAgentServiceClient interface {
	// Send a task create request to the agent server.
	CreateTask(ctx context.Context, in *admin.CreateTaskRequest, opts ...grpc.CallOption) (*admin.CreateTaskResponse, error)
	// Get job status.
	GetTask(ctx context.Context, in *admin.GetTaskRequest, opts ...grpc.CallOption) (*admin.GetTaskResponse, error)
	// Delete the task resource.
	DeleteTask(ctx context.Context, in *admin.DeleteTaskRequest, opts ...grpc.CallOption) (*admin.DeleteTaskResponse, error)
	// Do a job and get response from the agent server.
	DoTask(ctx context.Context, in *admin.DoTaskRequest, opts ...grpc.CallOption) (*admin.DoTaskResponse, error)
}

type asyncAgentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAsyncAgentServiceClient(cc *grpc.ClientConn) AsyncAgentServiceClient {
	return &asyncAgentServiceClient{cc}
}

func (c *asyncAgentServiceClient) CreateTask(ctx context.Context, in *admin.CreateTaskRequest, opts ...grpc.CallOption) (*admin.CreateTaskResponse, error) {
	out := new(admin.CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AsyncAgentService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncAgentServiceClient) GetTask(ctx context.Context, in *admin.GetTaskRequest, opts ...grpc.CallOption) (*admin.GetTaskResponse, error) {
	out := new(admin.GetTaskResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AsyncAgentService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncAgentServiceClient) DeleteTask(ctx context.Context, in *admin.DeleteTaskRequest, opts ...grpc.CallOption) (*admin.DeleteTaskResponse, error) {
	out := new(admin.DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AsyncAgentService/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncAgentServiceClient) DoTask(ctx context.Context, in *admin.DoTaskRequest, opts ...grpc.CallOption) (*admin.DoTaskResponse, error) {
	out := new(admin.DoTaskResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AsyncAgentService/DoTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsyncAgentServiceServer is the server API for AsyncAgentService service.
type AsyncAgentServiceServer interface {
	// Send a task create request to the agent server.
	CreateTask(context.Context, *admin.CreateTaskRequest) (*admin.CreateTaskResponse, error)
	// Get job status.
	GetTask(context.Context, *admin.GetTaskRequest) (*admin.GetTaskResponse, error)
	// Delete the task resource.
	DeleteTask(context.Context, *admin.DeleteTaskRequest) (*admin.DeleteTaskResponse, error)
	// Do a job and get response from the agent server.
	DoTask(context.Context, *admin.DoTaskRequest) (*admin.DoTaskResponse, error)
}

// UnimplementedAsyncAgentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAsyncAgentServiceServer struct {
}

func (*UnimplementedAsyncAgentServiceServer) CreateTask(ctx context.Context, req *admin.CreateTaskRequest) (*admin.CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedAsyncAgentServiceServer) GetTask(ctx context.Context, req *admin.GetTaskRequest) (*admin.GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedAsyncAgentServiceServer) DeleteTask(ctx context.Context, req *admin.DeleteTaskRequest) (*admin.DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (*UnimplementedAsyncAgentServiceServer) DoTask(ctx context.Context, req *admin.DoTaskRequest) (*admin.DoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoTask not implemented")
}

func RegisterAsyncAgentServiceServer(s *grpc.Server, srv AsyncAgentServiceServer) {
	s.RegisterService(&_AsyncAgentService_serviceDesc, srv)
}

func _AsyncAgentService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncAgentServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AsyncAgentService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncAgentServiceServer).CreateTask(ctx, req.(*admin.CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncAgentService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncAgentServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AsyncAgentService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncAgentServiceServer).GetTask(ctx, req.(*admin.GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncAgentService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncAgentServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AsyncAgentService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncAgentServiceServer).DeleteTask(ctx, req.(*admin.DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncAgentService_DoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.DoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncAgentServiceServer).DoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AsyncAgentService/DoTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncAgentServiceServer).DoTask(ctx, req.(*admin.DoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsyncAgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.service.AsyncAgentService",
	HandlerType: (*AsyncAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _AsyncAgentService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AsyncAgentService_GetTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _AsyncAgentService_DeleteTask_Handler,
		},
		{
			MethodName: "DoTask",
			Handler:    _AsyncAgentService_DoTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/service/agent.proto",
}
