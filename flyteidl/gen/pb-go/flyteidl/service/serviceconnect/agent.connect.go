// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl/service/agent.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"
	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AsyncAgentServiceName is the fully-qualified name of the AsyncAgentService service.
	AsyncAgentServiceName = "flyteidl.service.AsyncAgentService"
	// AgentMetadataServiceName is the fully-qualified name of the AgentMetadataService service.
	AgentMetadataServiceName = "flyteidl.service.AgentMetadataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AsyncAgentServiceCreateTaskProcedure is the fully-qualified name of the AsyncAgentService's
	// CreateTask RPC.
	AsyncAgentServiceCreateTaskProcedure = "/flyteidl.service.AsyncAgentService/CreateTask"
	// AsyncAgentServiceGetTaskProcedure is the fully-qualified name of the AsyncAgentService's GetTask
	// RPC.
	AsyncAgentServiceGetTaskProcedure = "/flyteidl.service.AsyncAgentService/GetTask"
	// AsyncAgentServiceDeleteTaskProcedure is the fully-qualified name of the AsyncAgentService's
	// DeleteTask RPC.
	AsyncAgentServiceDeleteTaskProcedure = "/flyteidl.service.AsyncAgentService/DeleteTask"
	// AsyncAgentServiceGetTaskMetricsProcedure is the fully-qualified name of the AsyncAgentService's
	// GetTaskMetrics RPC.
	AsyncAgentServiceGetTaskMetricsProcedure = "/flyteidl.service.AsyncAgentService/GetTaskMetrics"
	// AsyncAgentServiceGetTaskLogsProcedure is the fully-qualified name of the AsyncAgentService's
	// GetTaskLogs RPC.
	AsyncAgentServiceGetTaskLogsProcedure = "/flyteidl.service.AsyncAgentService/GetTaskLogs"
	// AgentMetadataServiceGetAgentProcedure is the fully-qualified name of the AgentMetadataService's
	// GetAgent RPC.
	AgentMetadataServiceGetAgentProcedure = "/flyteidl.service.AgentMetadataService/GetAgent"
	// AgentMetadataServiceListAgentsProcedure is the fully-qualified name of the AgentMetadataService's
	// ListAgents RPC.
	AgentMetadataServiceListAgentsProcedure = "/flyteidl.service.AgentMetadataService/ListAgents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	asyncAgentServiceServiceDescriptor              = service.File_flyteidl_service_agent_proto.Services().ByName("AsyncAgentService")
	asyncAgentServiceCreateTaskMethodDescriptor     = asyncAgentServiceServiceDescriptor.Methods().ByName("CreateTask")
	asyncAgentServiceGetTaskMethodDescriptor        = asyncAgentServiceServiceDescriptor.Methods().ByName("GetTask")
	asyncAgentServiceDeleteTaskMethodDescriptor     = asyncAgentServiceServiceDescriptor.Methods().ByName("DeleteTask")
	asyncAgentServiceGetTaskMetricsMethodDescriptor = asyncAgentServiceServiceDescriptor.Methods().ByName("GetTaskMetrics")
	asyncAgentServiceGetTaskLogsMethodDescriptor    = asyncAgentServiceServiceDescriptor.Methods().ByName("GetTaskLogs")
	agentMetadataServiceServiceDescriptor           = service.File_flyteidl_service_agent_proto.Services().ByName("AgentMetadataService")
	agentMetadataServiceGetAgentMethodDescriptor    = agentMetadataServiceServiceDescriptor.Methods().ByName("GetAgent")
	agentMetadataServiceListAgentsMethodDescriptor  = agentMetadataServiceServiceDescriptor.Methods().ByName("ListAgents")
)

// AsyncAgentServiceClient is a client for the flyteidl.service.AsyncAgentService service.
type AsyncAgentServiceClient interface {
	// Send a task create request to the agent server.
	CreateTask(context.Context, *connect.Request[admin.CreateTaskRequest]) (*connect.Response[admin.CreateTaskResponse], error)
	// Get job status.
	GetTask(context.Context, *connect.Request[admin.GetTaskRequest]) (*connect.Response[admin.GetTaskResponse], error)
	// Delete the task resource.
	DeleteTask(context.Context, *connect.Request[admin.DeleteTaskRequest]) (*connect.Response[admin.DeleteTaskResponse], error)
	// GetTaskMetrics returns one or more task execution metrics, if available.
	//
	// Errors include
	//   - OutOfRange if metrics are not available for the specified task time range
	//   - various other errors
	GetTaskMetrics(context.Context, *connect.Request[admin.GetTaskMetricsRequest]) (*connect.Response[admin.GetTaskMetricsResponse], error)
	// GetTaskLogs returns task execution logs, if available.
	GetTaskLogs(context.Context, *connect.Request[admin.GetTaskLogsRequest]) (*connect.Response[admin.GetTaskLogsResponse], error)
}

// NewAsyncAgentServiceClient constructs a client for the flyteidl.service.AsyncAgentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAsyncAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AsyncAgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &asyncAgentServiceClient{
		createTask: connect.NewClient[admin.CreateTaskRequest, admin.CreateTaskResponse](
			httpClient,
			baseURL+AsyncAgentServiceCreateTaskProcedure,
			connect.WithSchema(asyncAgentServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[admin.GetTaskRequest, admin.GetTaskResponse](
			httpClient,
			baseURL+AsyncAgentServiceGetTaskProcedure,
			connect.WithSchema(asyncAgentServiceGetTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[admin.DeleteTaskRequest, admin.DeleteTaskResponse](
			httpClient,
			baseURL+AsyncAgentServiceDeleteTaskProcedure,
			connect.WithSchema(asyncAgentServiceDeleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskMetrics: connect.NewClient[admin.GetTaskMetricsRequest, admin.GetTaskMetricsResponse](
			httpClient,
			baseURL+AsyncAgentServiceGetTaskMetricsProcedure,
			connect.WithSchema(asyncAgentServiceGetTaskMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskLogs: connect.NewClient[admin.GetTaskLogsRequest, admin.GetTaskLogsResponse](
			httpClient,
			baseURL+AsyncAgentServiceGetTaskLogsProcedure,
			connect.WithSchema(asyncAgentServiceGetTaskLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// asyncAgentServiceClient implements AsyncAgentServiceClient.
type asyncAgentServiceClient struct {
	createTask     *connect.Client[admin.CreateTaskRequest, admin.CreateTaskResponse]
	getTask        *connect.Client[admin.GetTaskRequest, admin.GetTaskResponse]
	deleteTask     *connect.Client[admin.DeleteTaskRequest, admin.DeleteTaskResponse]
	getTaskMetrics *connect.Client[admin.GetTaskMetricsRequest, admin.GetTaskMetricsResponse]
	getTaskLogs    *connect.Client[admin.GetTaskLogsRequest, admin.GetTaskLogsResponse]
}

// CreateTask calls flyteidl.service.AsyncAgentService.CreateTask.
func (c *asyncAgentServiceClient) CreateTask(ctx context.Context, req *connect.Request[admin.CreateTaskRequest]) (*connect.Response[admin.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls flyteidl.service.AsyncAgentService.GetTask.
func (c *asyncAgentServiceClient) GetTask(ctx context.Context, req *connect.Request[admin.GetTaskRequest]) (*connect.Response[admin.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// DeleteTask calls flyteidl.service.AsyncAgentService.DeleteTask.
func (c *asyncAgentServiceClient) DeleteTask(ctx context.Context, req *connect.Request[admin.DeleteTaskRequest]) (*connect.Response[admin.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// GetTaskMetrics calls flyteidl.service.AsyncAgentService.GetTaskMetrics.
func (c *asyncAgentServiceClient) GetTaskMetrics(ctx context.Context, req *connect.Request[admin.GetTaskMetricsRequest]) (*connect.Response[admin.GetTaskMetricsResponse], error) {
	return c.getTaskMetrics.CallUnary(ctx, req)
}

// GetTaskLogs calls flyteidl.service.AsyncAgentService.GetTaskLogs.
func (c *asyncAgentServiceClient) GetTaskLogs(ctx context.Context, req *connect.Request[admin.GetTaskLogsRequest]) (*connect.Response[admin.GetTaskLogsResponse], error) {
	return c.getTaskLogs.CallUnary(ctx, req)
}

// AsyncAgentServiceHandler is an implementation of the flyteidl.service.AsyncAgentService service.
type AsyncAgentServiceHandler interface {
	// Send a task create request to the agent server.
	CreateTask(context.Context, *connect.Request[admin.CreateTaskRequest]) (*connect.Response[admin.CreateTaskResponse], error)
	// Get job status.
	GetTask(context.Context, *connect.Request[admin.GetTaskRequest]) (*connect.Response[admin.GetTaskResponse], error)
	// Delete the task resource.
	DeleteTask(context.Context, *connect.Request[admin.DeleteTaskRequest]) (*connect.Response[admin.DeleteTaskResponse], error)
	// GetTaskMetrics returns one or more task execution metrics, if available.
	//
	// Errors include
	//   - OutOfRange if metrics are not available for the specified task time range
	//   - various other errors
	GetTaskMetrics(context.Context, *connect.Request[admin.GetTaskMetricsRequest]) (*connect.Response[admin.GetTaskMetricsResponse], error)
	// GetTaskLogs returns task execution logs, if available.
	GetTaskLogs(context.Context, *connect.Request[admin.GetTaskLogsRequest]) (*connect.Response[admin.GetTaskLogsResponse], error)
}

// NewAsyncAgentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAsyncAgentServiceHandler(svc AsyncAgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	asyncAgentServiceCreateTaskHandler := connect.NewUnaryHandler(
		AsyncAgentServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(asyncAgentServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncAgentServiceGetTaskHandler := connect.NewUnaryHandler(
		AsyncAgentServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(asyncAgentServiceGetTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncAgentServiceDeleteTaskHandler := connect.NewUnaryHandler(
		AsyncAgentServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(asyncAgentServiceDeleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncAgentServiceGetTaskMetricsHandler := connect.NewUnaryHandler(
		AsyncAgentServiceGetTaskMetricsProcedure,
		svc.GetTaskMetrics,
		connect.WithSchema(asyncAgentServiceGetTaskMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncAgentServiceGetTaskLogsHandler := connect.NewUnaryHandler(
		AsyncAgentServiceGetTaskLogsProcedure,
		svc.GetTaskLogs,
		connect.WithSchema(asyncAgentServiceGetTaskLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.service.AsyncAgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AsyncAgentServiceCreateTaskProcedure:
			asyncAgentServiceCreateTaskHandler.ServeHTTP(w, r)
		case AsyncAgentServiceGetTaskProcedure:
			asyncAgentServiceGetTaskHandler.ServeHTTP(w, r)
		case AsyncAgentServiceDeleteTaskProcedure:
			asyncAgentServiceDeleteTaskHandler.ServeHTTP(w, r)
		case AsyncAgentServiceGetTaskMetricsProcedure:
			asyncAgentServiceGetTaskMetricsHandler.ServeHTTP(w, r)
		case AsyncAgentServiceGetTaskLogsProcedure:
			asyncAgentServiceGetTaskLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAsyncAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAsyncAgentServiceHandler struct{}

func (UnimplementedAsyncAgentServiceHandler) CreateTask(context.Context, *connect.Request[admin.CreateTaskRequest]) (*connect.Response[admin.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AsyncAgentService.CreateTask is not implemented"))
}

func (UnimplementedAsyncAgentServiceHandler) GetTask(context.Context, *connect.Request[admin.GetTaskRequest]) (*connect.Response[admin.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AsyncAgentService.GetTask is not implemented"))
}

func (UnimplementedAsyncAgentServiceHandler) DeleteTask(context.Context, *connect.Request[admin.DeleteTaskRequest]) (*connect.Response[admin.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AsyncAgentService.DeleteTask is not implemented"))
}

func (UnimplementedAsyncAgentServiceHandler) GetTaskMetrics(context.Context, *connect.Request[admin.GetTaskMetricsRequest]) (*connect.Response[admin.GetTaskMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AsyncAgentService.GetTaskMetrics is not implemented"))
}

func (UnimplementedAsyncAgentServiceHandler) GetTaskLogs(context.Context, *connect.Request[admin.GetTaskLogsRequest]) (*connect.Response[admin.GetTaskLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AsyncAgentService.GetTaskLogs is not implemented"))
}

// AgentMetadataServiceClient is a client for the flyteidl.service.AgentMetadataService service.
type AgentMetadataServiceClient interface {
	// Fetch a :ref:`ref_flyteidl.admin.Agent` definition.
	GetAgent(context.Context, *connect.Request[admin.GetAgentRequest]) (*connect.Response[admin.GetAgentResponse], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Agent` definitions.
	ListAgents(context.Context, *connect.Request[admin.ListAgentsRequest]) (*connect.Response[admin.ListAgentsResponse], error)
}

// NewAgentMetadataServiceClient constructs a client for the flyteidl.service.AgentMetadataService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentMetadataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentMetadataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentMetadataServiceClient{
		getAgent: connect.NewClient[admin.GetAgentRequest, admin.GetAgentResponse](
			httpClient,
			baseURL+AgentMetadataServiceGetAgentProcedure,
			connect.WithSchema(agentMetadataServiceGetAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAgents: connect.NewClient[admin.ListAgentsRequest, admin.ListAgentsResponse](
			httpClient,
			baseURL+AgentMetadataServiceListAgentsProcedure,
			connect.WithSchema(agentMetadataServiceListAgentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentMetadataServiceClient implements AgentMetadataServiceClient.
type agentMetadataServiceClient struct {
	getAgent   *connect.Client[admin.GetAgentRequest, admin.GetAgentResponse]
	listAgents *connect.Client[admin.ListAgentsRequest, admin.ListAgentsResponse]
}

// GetAgent calls flyteidl.service.AgentMetadataService.GetAgent.
func (c *agentMetadataServiceClient) GetAgent(ctx context.Context, req *connect.Request[admin.GetAgentRequest]) (*connect.Response[admin.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// ListAgents calls flyteidl.service.AgentMetadataService.ListAgents.
func (c *agentMetadataServiceClient) ListAgents(ctx context.Context, req *connect.Request[admin.ListAgentsRequest]) (*connect.Response[admin.ListAgentsResponse], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// AgentMetadataServiceHandler is an implementation of the flyteidl.service.AgentMetadataService
// service.
type AgentMetadataServiceHandler interface {
	// Fetch a :ref:`ref_flyteidl.admin.Agent` definition.
	GetAgent(context.Context, *connect.Request[admin.GetAgentRequest]) (*connect.Response[admin.GetAgentResponse], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Agent` definitions.
	ListAgents(context.Context, *connect.Request[admin.ListAgentsRequest]) (*connect.Response[admin.ListAgentsResponse], error)
}

// NewAgentMetadataServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentMetadataServiceHandler(svc AgentMetadataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentMetadataServiceGetAgentHandler := connect.NewUnaryHandler(
		AgentMetadataServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(agentMetadataServiceGetAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentMetadataServiceListAgentsHandler := connect.NewUnaryHandler(
		AgentMetadataServiceListAgentsProcedure,
		svc.ListAgents,
		connect.WithSchema(agentMetadataServiceListAgentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.service.AgentMetadataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentMetadataServiceGetAgentProcedure:
			agentMetadataServiceGetAgentHandler.ServeHTTP(w, r)
		case AgentMetadataServiceListAgentsProcedure:
			agentMetadataServiceListAgentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentMetadataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentMetadataServiceHandler struct{}

func (UnimplementedAgentMetadataServiceHandler) GetAgent(context.Context, *connect.Request[admin.GetAgentRequest]) (*connect.Response[admin.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AgentMetadataService.GetAgent is not implemented"))
}

func (UnimplementedAgentMetadataServiceHandler) ListAgents(context.Context, *connect.Request[admin.ListAgentsRequest]) (*connect.Response[admin.ListAgentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AgentMetadataService.ListAgents is not implemented"))
}
