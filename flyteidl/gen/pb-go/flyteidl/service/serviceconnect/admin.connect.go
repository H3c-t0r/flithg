// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl/service/admin.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"
	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "flyteidl.service.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceCreateTaskProcedure is the fully-qualified name of the AdminService's CreateTask RPC.
	AdminServiceCreateTaskProcedure = "/flyteidl.service.AdminService/CreateTask"
	// AdminServiceGetTaskProcedure is the fully-qualified name of the AdminService's GetTask RPC.
	AdminServiceGetTaskProcedure = "/flyteidl.service.AdminService/GetTask"
	// AdminServiceListTaskIdsProcedure is the fully-qualified name of the AdminService's ListTaskIds
	// RPC.
	AdminServiceListTaskIdsProcedure = "/flyteidl.service.AdminService/ListTaskIds"
	// AdminServiceListTasksProcedure is the fully-qualified name of the AdminService's ListTasks RPC.
	AdminServiceListTasksProcedure = "/flyteidl.service.AdminService/ListTasks"
	// AdminServiceCreateWorkflowProcedure is the fully-qualified name of the AdminService's
	// CreateWorkflow RPC.
	AdminServiceCreateWorkflowProcedure = "/flyteidl.service.AdminService/CreateWorkflow"
	// AdminServiceGetWorkflowProcedure is the fully-qualified name of the AdminService's GetWorkflow
	// RPC.
	AdminServiceGetWorkflowProcedure = "/flyteidl.service.AdminService/GetWorkflow"
	// AdminServiceListWorkflowIdsProcedure is the fully-qualified name of the AdminService's
	// ListWorkflowIds RPC.
	AdminServiceListWorkflowIdsProcedure = "/flyteidl.service.AdminService/ListWorkflowIds"
	// AdminServiceListWorkflowsProcedure is the fully-qualified name of the AdminService's
	// ListWorkflows RPC.
	AdminServiceListWorkflowsProcedure = "/flyteidl.service.AdminService/ListWorkflows"
	// AdminServiceCreateLaunchPlanProcedure is the fully-qualified name of the AdminService's
	// CreateLaunchPlan RPC.
	AdminServiceCreateLaunchPlanProcedure = "/flyteidl.service.AdminService/CreateLaunchPlan"
	// AdminServiceGetLaunchPlanProcedure is the fully-qualified name of the AdminService's
	// GetLaunchPlan RPC.
	AdminServiceGetLaunchPlanProcedure = "/flyteidl.service.AdminService/GetLaunchPlan"
	// AdminServiceGetActiveLaunchPlanProcedure is the fully-qualified name of the AdminService's
	// GetActiveLaunchPlan RPC.
	AdminServiceGetActiveLaunchPlanProcedure = "/flyteidl.service.AdminService/GetActiveLaunchPlan"
	// AdminServiceListActiveLaunchPlansProcedure is the fully-qualified name of the AdminService's
	// ListActiveLaunchPlans RPC.
	AdminServiceListActiveLaunchPlansProcedure = "/flyteidl.service.AdminService/ListActiveLaunchPlans"
	// AdminServiceListLaunchPlanIdsProcedure is the fully-qualified name of the AdminService's
	// ListLaunchPlanIds RPC.
	AdminServiceListLaunchPlanIdsProcedure = "/flyteidl.service.AdminService/ListLaunchPlanIds"
	// AdminServiceListLaunchPlansProcedure is the fully-qualified name of the AdminService's
	// ListLaunchPlans RPC.
	AdminServiceListLaunchPlansProcedure = "/flyteidl.service.AdminService/ListLaunchPlans"
	// AdminServiceUpdateLaunchPlanProcedure is the fully-qualified name of the AdminService's
	// UpdateLaunchPlan RPC.
	AdminServiceUpdateLaunchPlanProcedure = "/flyteidl.service.AdminService/UpdateLaunchPlan"
	// AdminServiceCreateExecutionProcedure is the fully-qualified name of the AdminService's
	// CreateExecution RPC.
	AdminServiceCreateExecutionProcedure = "/flyteidl.service.AdminService/CreateExecution"
	// AdminServiceRelaunchExecutionProcedure is the fully-qualified name of the AdminService's
	// RelaunchExecution RPC.
	AdminServiceRelaunchExecutionProcedure = "/flyteidl.service.AdminService/RelaunchExecution"
	// AdminServiceRecoverExecutionProcedure is the fully-qualified name of the AdminService's
	// RecoverExecution RPC.
	AdminServiceRecoverExecutionProcedure = "/flyteidl.service.AdminService/RecoverExecution"
	// AdminServiceGetExecutionProcedure is the fully-qualified name of the AdminService's GetExecution
	// RPC.
	AdminServiceGetExecutionProcedure = "/flyteidl.service.AdminService/GetExecution"
	// AdminServiceUpdateExecutionProcedure is the fully-qualified name of the AdminService's
	// UpdateExecution RPC.
	AdminServiceUpdateExecutionProcedure = "/flyteidl.service.AdminService/UpdateExecution"
	// AdminServiceGetExecutionDataProcedure is the fully-qualified name of the AdminService's
	// GetExecutionData RPC.
	AdminServiceGetExecutionDataProcedure = "/flyteidl.service.AdminService/GetExecutionData"
	// AdminServiceListExecutionsProcedure is the fully-qualified name of the AdminService's
	// ListExecutions RPC.
	AdminServiceListExecutionsProcedure = "/flyteidl.service.AdminService/ListExecutions"
	// AdminServiceTerminateExecutionProcedure is the fully-qualified name of the AdminService's
	// TerminateExecution RPC.
	AdminServiceTerminateExecutionProcedure = "/flyteidl.service.AdminService/TerminateExecution"
	// AdminServiceGetNodeExecutionProcedure is the fully-qualified name of the AdminService's
	// GetNodeExecution RPC.
	AdminServiceGetNodeExecutionProcedure = "/flyteidl.service.AdminService/GetNodeExecution"
	// AdminServiceGetDynamicNodeWorkflowProcedure is the fully-qualified name of the AdminService's
	// GetDynamicNodeWorkflow RPC.
	AdminServiceGetDynamicNodeWorkflowProcedure = "/flyteidl.service.AdminService/GetDynamicNodeWorkflow"
	// AdminServiceListNodeExecutionsProcedure is the fully-qualified name of the AdminService's
	// ListNodeExecutions RPC.
	AdminServiceListNodeExecutionsProcedure = "/flyteidl.service.AdminService/ListNodeExecutions"
	// AdminServiceListNodeExecutionsForTaskProcedure is the fully-qualified name of the AdminService's
	// ListNodeExecutionsForTask RPC.
	AdminServiceListNodeExecutionsForTaskProcedure = "/flyteidl.service.AdminService/ListNodeExecutionsForTask"
	// AdminServiceGetNodeExecutionDataProcedure is the fully-qualified name of the AdminService's
	// GetNodeExecutionData RPC.
	AdminServiceGetNodeExecutionDataProcedure = "/flyteidl.service.AdminService/GetNodeExecutionData"
	// AdminServiceRegisterProjectProcedure is the fully-qualified name of the AdminService's
	// RegisterProject RPC.
	AdminServiceRegisterProjectProcedure = "/flyteidl.service.AdminService/RegisterProject"
	// AdminServiceUpdateProjectProcedure is the fully-qualified name of the AdminService's
	// UpdateProject RPC.
	AdminServiceUpdateProjectProcedure = "/flyteidl.service.AdminService/UpdateProject"
	// AdminServiceListProjectsProcedure is the fully-qualified name of the AdminService's ListProjects
	// RPC.
	AdminServiceListProjectsProcedure = "/flyteidl.service.AdminService/ListProjects"
	// AdminServiceCreateWorkflowEventProcedure is the fully-qualified name of the AdminService's
	// CreateWorkflowEvent RPC.
	AdminServiceCreateWorkflowEventProcedure = "/flyteidl.service.AdminService/CreateWorkflowEvent"
	// AdminServiceCreateNodeEventProcedure is the fully-qualified name of the AdminService's
	// CreateNodeEvent RPC.
	AdminServiceCreateNodeEventProcedure = "/flyteidl.service.AdminService/CreateNodeEvent"
	// AdminServiceCreateTaskEventProcedure is the fully-qualified name of the AdminService's
	// CreateTaskEvent RPC.
	AdminServiceCreateTaskEventProcedure = "/flyteidl.service.AdminService/CreateTaskEvent"
	// AdminServiceGetTaskExecutionProcedure is the fully-qualified name of the AdminService's
	// GetTaskExecution RPC.
	AdminServiceGetTaskExecutionProcedure = "/flyteidl.service.AdminService/GetTaskExecution"
	// AdminServiceListTaskExecutionsProcedure is the fully-qualified name of the AdminService's
	// ListTaskExecutions RPC.
	AdminServiceListTaskExecutionsProcedure = "/flyteidl.service.AdminService/ListTaskExecutions"
	// AdminServiceGetTaskExecutionDataProcedure is the fully-qualified name of the AdminService's
	// GetTaskExecutionData RPC.
	AdminServiceGetTaskExecutionDataProcedure = "/flyteidl.service.AdminService/GetTaskExecutionData"
	// AdminServiceUpdateProjectDomainAttributesProcedure is the fully-qualified name of the
	// AdminService's UpdateProjectDomainAttributes RPC.
	AdminServiceUpdateProjectDomainAttributesProcedure = "/flyteidl.service.AdminService/UpdateProjectDomainAttributes"
	// AdminServiceGetProjectDomainAttributesProcedure is the fully-qualified name of the AdminService's
	// GetProjectDomainAttributes RPC.
	AdminServiceGetProjectDomainAttributesProcedure = "/flyteidl.service.AdminService/GetProjectDomainAttributes"
	// AdminServiceDeleteProjectDomainAttributesProcedure is the fully-qualified name of the
	// AdminService's DeleteProjectDomainAttributes RPC.
	AdminServiceDeleteProjectDomainAttributesProcedure = "/flyteidl.service.AdminService/DeleteProjectDomainAttributes"
	// AdminServiceUpdateProjectAttributesProcedure is the fully-qualified name of the AdminService's
	// UpdateProjectAttributes RPC.
	AdminServiceUpdateProjectAttributesProcedure = "/flyteidl.service.AdminService/UpdateProjectAttributes"
	// AdminServiceGetProjectAttributesProcedure is the fully-qualified name of the AdminService's
	// GetProjectAttributes RPC.
	AdminServiceGetProjectAttributesProcedure = "/flyteidl.service.AdminService/GetProjectAttributes"
	// AdminServiceDeleteProjectAttributesProcedure is the fully-qualified name of the AdminService's
	// DeleteProjectAttributes RPC.
	AdminServiceDeleteProjectAttributesProcedure = "/flyteidl.service.AdminService/DeleteProjectAttributes"
	// AdminServiceUpdateWorkflowAttributesProcedure is the fully-qualified name of the AdminService's
	// UpdateWorkflowAttributes RPC.
	AdminServiceUpdateWorkflowAttributesProcedure = "/flyteidl.service.AdminService/UpdateWorkflowAttributes"
	// AdminServiceGetWorkflowAttributesProcedure is the fully-qualified name of the AdminService's
	// GetWorkflowAttributes RPC.
	AdminServiceGetWorkflowAttributesProcedure = "/flyteidl.service.AdminService/GetWorkflowAttributes"
	// AdminServiceDeleteWorkflowAttributesProcedure is the fully-qualified name of the AdminService's
	// DeleteWorkflowAttributes RPC.
	AdminServiceDeleteWorkflowAttributesProcedure = "/flyteidl.service.AdminService/DeleteWorkflowAttributes"
	// AdminServiceListMatchableAttributesProcedure is the fully-qualified name of the AdminService's
	// ListMatchableAttributes RPC.
	AdminServiceListMatchableAttributesProcedure = "/flyteidl.service.AdminService/ListMatchableAttributes"
	// AdminServiceListNamedEntitiesProcedure is the fully-qualified name of the AdminService's
	// ListNamedEntities RPC.
	AdminServiceListNamedEntitiesProcedure = "/flyteidl.service.AdminService/ListNamedEntities"
	// AdminServiceGetNamedEntityProcedure is the fully-qualified name of the AdminService's
	// GetNamedEntity RPC.
	AdminServiceGetNamedEntityProcedure = "/flyteidl.service.AdminService/GetNamedEntity"
	// AdminServiceUpdateNamedEntityProcedure is the fully-qualified name of the AdminService's
	// UpdateNamedEntity RPC.
	AdminServiceUpdateNamedEntityProcedure = "/flyteidl.service.AdminService/UpdateNamedEntity"
	// AdminServiceGetVersionProcedure is the fully-qualified name of the AdminService's GetVersion RPC.
	AdminServiceGetVersionProcedure = "/flyteidl.service.AdminService/GetVersion"
	// AdminServiceGetDescriptionEntityProcedure is the fully-qualified name of the AdminService's
	// GetDescriptionEntity RPC.
	AdminServiceGetDescriptionEntityProcedure = "/flyteidl.service.AdminService/GetDescriptionEntity"
	// AdminServiceListDescriptionEntitiesProcedure is the fully-qualified name of the AdminService's
	// ListDescriptionEntities RPC.
	AdminServiceListDescriptionEntitiesProcedure = "/flyteidl.service.AdminService/ListDescriptionEntities"
	// AdminServiceGetExecutionMetricsProcedure is the fully-qualified name of the AdminService's
	// GetExecutionMetrics RPC.
	AdminServiceGetExecutionMetricsProcedure = "/flyteidl.service.AdminService/GetExecutionMetrics"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	adminServiceServiceDescriptor                             = service.File_flyteidl_service_admin_proto.Services().ByName("AdminService")
	adminServiceCreateTaskMethodDescriptor                    = adminServiceServiceDescriptor.Methods().ByName("CreateTask")
	adminServiceGetTaskMethodDescriptor                       = adminServiceServiceDescriptor.Methods().ByName("GetTask")
	adminServiceListTaskIdsMethodDescriptor                   = adminServiceServiceDescriptor.Methods().ByName("ListTaskIds")
	adminServiceListTasksMethodDescriptor                     = adminServiceServiceDescriptor.Methods().ByName("ListTasks")
	adminServiceCreateWorkflowMethodDescriptor                = adminServiceServiceDescriptor.Methods().ByName("CreateWorkflow")
	adminServiceGetWorkflowMethodDescriptor                   = adminServiceServiceDescriptor.Methods().ByName("GetWorkflow")
	adminServiceListWorkflowIdsMethodDescriptor               = adminServiceServiceDescriptor.Methods().ByName("ListWorkflowIds")
	adminServiceListWorkflowsMethodDescriptor                 = adminServiceServiceDescriptor.Methods().ByName("ListWorkflows")
	adminServiceCreateLaunchPlanMethodDescriptor              = adminServiceServiceDescriptor.Methods().ByName("CreateLaunchPlan")
	adminServiceGetLaunchPlanMethodDescriptor                 = adminServiceServiceDescriptor.Methods().ByName("GetLaunchPlan")
	adminServiceGetActiveLaunchPlanMethodDescriptor           = adminServiceServiceDescriptor.Methods().ByName("GetActiveLaunchPlan")
	adminServiceListActiveLaunchPlansMethodDescriptor         = adminServiceServiceDescriptor.Methods().ByName("ListActiveLaunchPlans")
	adminServiceListLaunchPlanIdsMethodDescriptor             = adminServiceServiceDescriptor.Methods().ByName("ListLaunchPlanIds")
	adminServiceListLaunchPlansMethodDescriptor               = adminServiceServiceDescriptor.Methods().ByName("ListLaunchPlans")
	adminServiceUpdateLaunchPlanMethodDescriptor              = adminServiceServiceDescriptor.Methods().ByName("UpdateLaunchPlan")
	adminServiceCreateExecutionMethodDescriptor               = adminServiceServiceDescriptor.Methods().ByName("CreateExecution")
	adminServiceRelaunchExecutionMethodDescriptor             = adminServiceServiceDescriptor.Methods().ByName("RelaunchExecution")
	adminServiceRecoverExecutionMethodDescriptor              = adminServiceServiceDescriptor.Methods().ByName("RecoverExecution")
	adminServiceGetExecutionMethodDescriptor                  = adminServiceServiceDescriptor.Methods().ByName("GetExecution")
	adminServiceUpdateExecutionMethodDescriptor               = adminServiceServiceDescriptor.Methods().ByName("UpdateExecution")
	adminServiceGetExecutionDataMethodDescriptor              = adminServiceServiceDescriptor.Methods().ByName("GetExecutionData")
	adminServiceListExecutionsMethodDescriptor                = adminServiceServiceDescriptor.Methods().ByName("ListExecutions")
	adminServiceTerminateExecutionMethodDescriptor            = adminServiceServiceDescriptor.Methods().ByName("TerminateExecution")
	adminServiceGetNodeExecutionMethodDescriptor              = adminServiceServiceDescriptor.Methods().ByName("GetNodeExecution")
	adminServiceGetDynamicNodeWorkflowMethodDescriptor        = adminServiceServiceDescriptor.Methods().ByName("GetDynamicNodeWorkflow")
	adminServiceListNodeExecutionsMethodDescriptor            = adminServiceServiceDescriptor.Methods().ByName("ListNodeExecutions")
	adminServiceListNodeExecutionsForTaskMethodDescriptor     = adminServiceServiceDescriptor.Methods().ByName("ListNodeExecutionsForTask")
	adminServiceGetNodeExecutionDataMethodDescriptor          = adminServiceServiceDescriptor.Methods().ByName("GetNodeExecutionData")
	adminServiceRegisterProjectMethodDescriptor               = adminServiceServiceDescriptor.Methods().ByName("RegisterProject")
	adminServiceUpdateProjectMethodDescriptor                 = adminServiceServiceDescriptor.Methods().ByName("UpdateProject")
	adminServiceListProjectsMethodDescriptor                  = adminServiceServiceDescriptor.Methods().ByName("ListProjects")
	adminServiceCreateWorkflowEventMethodDescriptor           = adminServiceServiceDescriptor.Methods().ByName("CreateWorkflowEvent")
	adminServiceCreateNodeEventMethodDescriptor               = adminServiceServiceDescriptor.Methods().ByName("CreateNodeEvent")
	adminServiceCreateTaskEventMethodDescriptor               = adminServiceServiceDescriptor.Methods().ByName("CreateTaskEvent")
	adminServiceGetTaskExecutionMethodDescriptor              = adminServiceServiceDescriptor.Methods().ByName("GetTaskExecution")
	adminServiceListTaskExecutionsMethodDescriptor            = adminServiceServiceDescriptor.Methods().ByName("ListTaskExecutions")
	adminServiceGetTaskExecutionDataMethodDescriptor          = adminServiceServiceDescriptor.Methods().ByName("GetTaskExecutionData")
	adminServiceUpdateProjectDomainAttributesMethodDescriptor = adminServiceServiceDescriptor.Methods().ByName("UpdateProjectDomainAttributes")
	adminServiceGetProjectDomainAttributesMethodDescriptor    = adminServiceServiceDescriptor.Methods().ByName("GetProjectDomainAttributes")
	adminServiceDeleteProjectDomainAttributesMethodDescriptor = adminServiceServiceDescriptor.Methods().ByName("DeleteProjectDomainAttributes")
	adminServiceUpdateProjectAttributesMethodDescriptor       = adminServiceServiceDescriptor.Methods().ByName("UpdateProjectAttributes")
	adminServiceGetProjectAttributesMethodDescriptor          = adminServiceServiceDescriptor.Methods().ByName("GetProjectAttributes")
	adminServiceDeleteProjectAttributesMethodDescriptor       = adminServiceServiceDescriptor.Methods().ByName("DeleteProjectAttributes")
	adminServiceUpdateWorkflowAttributesMethodDescriptor      = adminServiceServiceDescriptor.Methods().ByName("UpdateWorkflowAttributes")
	adminServiceGetWorkflowAttributesMethodDescriptor         = adminServiceServiceDescriptor.Methods().ByName("GetWorkflowAttributes")
	adminServiceDeleteWorkflowAttributesMethodDescriptor      = adminServiceServiceDescriptor.Methods().ByName("DeleteWorkflowAttributes")
	adminServiceListMatchableAttributesMethodDescriptor       = adminServiceServiceDescriptor.Methods().ByName("ListMatchableAttributes")
	adminServiceListNamedEntitiesMethodDescriptor             = adminServiceServiceDescriptor.Methods().ByName("ListNamedEntities")
	adminServiceGetNamedEntityMethodDescriptor                = adminServiceServiceDescriptor.Methods().ByName("GetNamedEntity")
	adminServiceUpdateNamedEntityMethodDescriptor             = adminServiceServiceDescriptor.Methods().ByName("UpdateNamedEntity")
	adminServiceGetVersionMethodDescriptor                    = adminServiceServiceDescriptor.Methods().ByName("GetVersion")
	adminServiceGetDescriptionEntityMethodDescriptor          = adminServiceServiceDescriptor.Methods().ByName("GetDescriptionEntity")
	adminServiceListDescriptionEntitiesMethodDescriptor       = adminServiceServiceDescriptor.Methods().ByName("ListDescriptionEntities")
	adminServiceGetExecutionMetricsMethodDescriptor           = adminServiceServiceDescriptor.Methods().ByName("GetExecutionMetrics")
)

// AdminServiceClient is a client for the flyteidl.service.AdminService service.
type AdminServiceClient interface {
	// Create and upload a :ref:`ref_flyteidl.admin.Task` definition
	CreateTask(context.Context, *connect.Request[admin.TaskCreateRequest]) (*connect.Response[admin.TaskCreateResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.Task` definition.
	GetTask(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Task], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of task objects.
	ListTaskIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Task` definitions.
	ListTasks(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.TaskList], error)
	// Create and upload a :ref:`ref_flyteidl.admin.Workflow` definition
	CreateWorkflow(context.Context, *connect.Request[admin.WorkflowCreateRequest]) (*connect.Response[admin.WorkflowCreateResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.Workflow` definition.
	GetWorkflow(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Workflow], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of workflow objects.
	ListWorkflowIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Workflow` definitions.
	ListWorkflows(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.WorkflowList], error)
	// Create and upload a :ref:`ref_flyteidl.admin.LaunchPlan` definition
	CreateLaunchPlan(context.Context, *connect.Request[admin.LaunchPlanCreateRequest]) (*connect.Response[admin.LaunchPlanCreateResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.LaunchPlan` definition.
	GetLaunchPlan(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.LaunchPlan], error)
	// Fetch the active version of a :ref:`ref_flyteidl.admin.LaunchPlan`.
	GetActiveLaunchPlan(context.Context, *connect.Request[admin.ActiveLaunchPlanRequest]) (*connect.Response[admin.LaunchPlan], error)
	// List active versions of :ref:`ref_flyteidl.admin.LaunchPlan`.
	ListActiveLaunchPlans(context.Context, *connect.Request[admin.ActiveLaunchPlanListRequest]) (*connect.Response[admin.LaunchPlanList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of launch plan objects.
	ListLaunchPlanIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.LaunchPlan` definitions.
	ListLaunchPlans(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.LaunchPlanList], error)
	// Updates the status of a registered :ref:`ref_flyteidl.admin.LaunchPlan`.
	UpdateLaunchPlan(context.Context, *connect.Request[admin.LaunchPlanUpdateRequest]) (*connect.Response[admin.LaunchPlanUpdateResponse], error)
	// Triggers the creation of a :ref:`ref_flyteidl.admin.Execution`
	CreateExecution(context.Context, *connect.Request[admin.ExecutionCreateRequest]) (*connect.Response[admin.ExecutionCreateResponse], error)
	// Triggers the creation of an identical :ref:`ref_flyteidl.admin.Execution`
	RelaunchExecution(context.Context, *connect.Request[admin.ExecutionRelaunchRequest]) (*connect.Response[admin.ExecutionCreateResponse], error)
	// Recreates a previously-run workflow execution that will only start executing from the last known failure point.
	// In Recover mode, users cannot change any input parameters or update the version of the execution.
	// This is extremely useful to recover from system errors and byzantine faults like - Loss of K8s cluster, bugs in platform or instability, machine failures,
	// downstream system failures (downstream services), or simply to recover executions that failed because of retry exhaustion and should complete if tried again.
	// See :ref:`ref_flyteidl.admin.ExecutionRecoverRequest` for more details.
	RecoverExecution(context.Context, *connect.Request[admin.ExecutionRecoverRequest]) (*connect.Response[admin.ExecutionCreateResponse], error)
	// Fetches a :ref:`ref_flyteidl.admin.Execution`.
	GetExecution(context.Context, *connect.Request[admin.WorkflowExecutionGetRequest]) (*connect.Response[admin.Execution], error)
	// Update execution belonging to project domain :ref:`ref_flyteidl.admin.Execution`.
	UpdateExecution(context.Context, *connect.Request[admin.ExecutionUpdateRequest]) (*connect.Response[admin.ExecutionUpdateResponse], error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionData(context.Context, *connect.Request[admin.WorkflowExecutionGetDataRequest]) (*connect.Response[admin.WorkflowExecutionGetDataResponse], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Execution`.
	ListExecutions(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.ExecutionList], error)
	// Terminates an in-progress :ref:`ref_flyteidl.admin.Execution`.
	TerminateExecution(context.Context, *connect.Request[admin.ExecutionTerminateRequest]) (*connect.Response[admin.ExecutionTerminateResponse], error)
	// Fetches a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecution(context.Context, *connect.Request[admin.NodeExecutionGetRequest]) (*connect.Response[admin.NodeExecution], error)
	// Fetches a :ref:`ref_flyteidl.admin.DynamicNodeWorkflowResponse`.
	GetDynamicNodeWorkflow(context.Context, *connect.Request[admin.GetDynamicNodeWorkflowRequest]) (*connect.Response[admin.DynamicNodeWorkflowResponse], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution`.
	ListNodeExecutions(context.Context, *connect.Request[admin.NodeExecutionListRequest]) (*connect.Response[admin.NodeExecutionList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution` launched by the reference :ref:`ref_flyteidl.admin.TaskExecution`.
	ListNodeExecutionsForTask(context.Context, *connect.Request[admin.NodeExecutionForTaskListRequest]) (*connect.Response[admin.NodeExecutionList], error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecutionData(context.Context, *connect.Request[admin.NodeExecutionGetDataRequest]) (*connect.Response[admin.NodeExecutionGetDataResponse], error)
	// Registers a :ref:`ref_flyteidl.admin.Project` with the Flyte deployment.
	RegisterProject(context.Context, *connect.Request[admin.ProjectRegisterRequest]) (*connect.Response[admin.ProjectRegisterResponse], error)
	// Updates an existing :ref:`ref_flyteidl.admin.Project`
	// flyteidl.admin.Project should be passed but the domains property should be empty;
	// it will be ignored in the handler as domains cannot be updated via this API.
	UpdateProject(context.Context, *connect.Request[admin.Project]) (*connect.Response[admin.ProjectUpdateResponse], error)
	// Fetches a list of :ref:`ref_flyteidl.admin.Project`
	ListProjects(context.Context, *connect.Request[admin.ProjectListRequest]) (*connect.Response[admin.Projects], error)
	// Indicates a :ref:`ref_flyteidl.event.WorkflowExecutionEvent` has occurred.
	CreateWorkflowEvent(context.Context, *connect.Request[admin.WorkflowExecutionEventRequest]) (*connect.Response[admin.WorkflowExecutionEventResponse], error)
	// Indicates a :ref:`ref_flyteidl.event.NodeExecutionEvent` has occurred.
	CreateNodeEvent(context.Context, *connect.Request[admin.NodeExecutionEventRequest]) (*connect.Response[admin.NodeExecutionEventResponse], error)
	// Indicates a :ref:`ref_flyteidl.event.TaskExecutionEvent` has occurred.
	CreateTaskEvent(context.Context, *connect.Request[admin.TaskExecutionEventRequest]) (*connect.Response[admin.TaskExecutionEventResponse], error)
	// Fetches a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecution(context.Context, *connect.Request[admin.TaskExecutionGetRequest]) (*connect.Response[admin.TaskExecution], error)
	// Fetches a list of :ref:`ref_flyteidl.admin.TaskExecution`.
	ListTaskExecutions(context.Context, *connect.Request[admin.TaskExecutionListRequest]) (*connect.Response[admin.TaskExecutionList], error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecutionData(context.Context, *connect.Request[admin.TaskExecutionGetDataRequest]) (*connect.Response[admin.TaskExecutionGetDataResponse], error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	UpdateProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesUpdateRequest]) (*connect.Response[admin.ProjectDomainAttributesUpdateResponse], error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesGetRequest]) (*connect.Response[admin.ProjectDomainAttributesGetResponse], error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesDeleteRequest]) (*connect.Response[admin.ProjectDomainAttributesDeleteResponse], error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` at the project level
	UpdateProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesUpdateRequest]) (*connect.Response[admin.ProjectAttributesUpdateResponse], error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesGetRequest]) (*connect.Response[admin.ProjectAttributesGetResponse], error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesDeleteRequest]) (*connect.Response[admin.ProjectAttributesDeleteResponse], error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	UpdateWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesUpdateRequest]) (*connect.Response[admin.WorkflowAttributesUpdateResponse], error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	GetWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesGetRequest]) (*connect.Response[admin.WorkflowAttributesGetResponse], error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	DeleteWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesDeleteRequest]) (*connect.Response[admin.WorkflowAttributesDeleteResponse], error)
	// Lists custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a specific resource type.
	ListMatchableAttributes(context.Context, *connect.Request[admin.ListMatchableAttributesRequest]) (*connect.Response[admin.ListMatchableAttributesResponse], error)
	// Returns a list of :ref:`ref_flyteidl.admin.NamedEntity` objects.
	ListNamedEntities(context.Context, *connect.Request[admin.NamedEntityListRequest]) (*connect.Response[admin.NamedEntityList], error)
	// Returns a :ref:`ref_flyteidl.admin.NamedEntity` object.
	GetNamedEntity(context.Context, *connect.Request[admin.NamedEntityGetRequest]) (*connect.Response[admin.NamedEntity], error)
	// Updates a :ref:`ref_flyteidl.admin.NamedEntity` object.
	UpdateNamedEntity(context.Context, *connect.Request[admin.NamedEntityUpdateRequest]) (*connect.Response[admin.NamedEntityUpdateResponse], error)
	GetVersion(context.Context, *connect.Request[admin.GetVersionRequest]) (*connect.Response[admin.GetVersionResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.DescriptionEntity` object.
	GetDescriptionEntity(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.DescriptionEntity], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.DescriptionEntity` definitions.
	ListDescriptionEntities(context.Context, *connect.Request[admin.DescriptionEntityListRequest]) (*connect.Response[admin.DescriptionEntityList], error)
	// Fetches runtime metrics for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionMetrics(context.Context, *connect.Request[admin.WorkflowExecutionGetMetricsRequest]) (*connect.Response[admin.WorkflowExecutionGetMetricsResponse], error)
}

// NewAdminServiceClient constructs a client for the flyteidl.service.AdminService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		createTask: connect.NewClient[admin.TaskCreateRequest, admin.TaskCreateResponse](
			httpClient,
			baseURL+AdminServiceCreateTaskProcedure,
			connect.WithSchema(adminServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[admin.ObjectGetRequest, admin.Task](
			httpClient,
			baseURL+AdminServiceGetTaskProcedure,
			connect.WithSchema(adminServiceGetTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTaskIds: connect.NewClient[admin.NamedEntityIdentifierListRequest, admin.NamedEntityIdentifierList](
			httpClient,
			baseURL+AdminServiceListTaskIdsProcedure,
			connect.WithSchema(adminServiceListTaskIdsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[admin.ResourceListRequest, admin.TaskList](
			httpClient,
			baseURL+AdminServiceListTasksProcedure,
			connect.WithSchema(adminServiceListTasksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWorkflow: connect.NewClient[admin.WorkflowCreateRequest, admin.WorkflowCreateResponse](
			httpClient,
			baseURL+AdminServiceCreateWorkflowProcedure,
			connect.WithSchema(adminServiceCreateWorkflowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWorkflow: connect.NewClient[admin.ObjectGetRequest, admin.Workflow](
			httpClient,
			baseURL+AdminServiceGetWorkflowProcedure,
			connect.WithSchema(adminServiceGetWorkflowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listWorkflowIds: connect.NewClient[admin.NamedEntityIdentifierListRequest, admin.NamedEntityIdentifierList](
			httpClient,
			baseURL+AdminServiceListWorkflowIdsProcedure,
			connect.WithSchema(adminServiceListWorkflowIdsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listWorkflows: connect.NewClient[admin.ResourceListRequest, admin.WorkflowList](
			httpClient,
			baseURL+AdminServiceListWorkflowsProcedure,
			connect.WithSchema(adminServiceListWorkflowsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createLaunchPlan: connect.NewClient[admin.LaunchPlanCreateRequest, admin.LaunchPlanCreateResponse](
			httpClient,
			baseURL+AdminServiceCreateLaunchPlanProcedure,
			connect.WithSchema(adminServiceCreateLaunchPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLaunchPlan: connect.NewClient[admin.ObjectGetRequest, admin.LaunchPlan](
			httpClient,
			baseURL+AdminServiceGetLaunchPlanProcedure,
			connect.WithSchema(adminServiceGetLaunchPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActiveLaunchPlan: connect.NewClient[admin.ActiveLaunchPlanRequest, admin.LaunchPlan](
			httpClient,
			baseURL+AdminServiceGetActiveLaunchPlanProcedure,
			connect.WithSchema(adminServiceGetActiveLaunchPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listActiveLaunchPlans: connect.NewClient[admin.ActiveLaunchPlanListRequest, admin.LaunchPlanList](
			httpClient,
			baseURL+AdminServiceListActiveLaunchPlansProcedure,
			connect.WithSchema(adminServiceListActiveLaunchPlansMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listLaunchPlanIds: connect.NewClient[admin.NamedEntityIdentifierListRequest, admin.NamedEntityIdentifierList](
			httpClient,
			baseURL+AdminServiceListLaunchPlanIdsProcedure,
			connect.WithSchema(adminServiceListLaunchPlanIdsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listLaunchPlans: connect.NewClient[admin.ResourceListRequest, admin.LaunchPlanList](
			httpClient,
			baseURL+AdminServiceListLaunchPlansProcedure,
			connect.WithSchema(adminServiceListLaunchPlansMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateLaunchPlan: connect.NewClient[admin.LaunchPlanUpdateRequest, admin.LaunchPlanUpdateResponse](
			httpClient,
			baseURL+AdminServiceUpdateLaunchPlanProcedure,
			connect.WithSchema(adminServiceUpdateLaunchPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createExecution: connect.NewClient[admin.ExecutionCreateRequest, admin.ExecutionCreateResponse](
			httpClient,
			baseURL+AdminServiceCreateExecutionProcedure,
			connect.WithSchema(adminServiceCreateExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		relaunchExecution: connect.NewClient[admin.ExecutionRelaunchRequest, admin.ExecutionCreateResponse](
			httpClient,
			baseURL+AdminServiceRelaunchExecutionProcedure,
			connect.WithSchema(adminServiceRelaunchExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		recoverExecution: connect.NewClient[admin.ExecutionRecoverRequest, admin.ExecutionCreateResponse](
			httpClient,
			baseURL+AdminServiceRecoverExecutionProcedure,
			connect.WithSchema(adminServiceRecoverExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getExecution: connect.NewClient[admin.WorkflowExecutionGetRequest, admin.Execution](
			httpClient,
			baseURL+AdminServiceGetExecutionProcedure,
			connect.WithSchema(adminServiceGetExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateExecution: connect.NewClient[admin.ExecutionUpdateRequest, admin.ExecutionUpdateResponse](
			httpClient,
			baseURL+AdminServiceUpdateExecutionProcedure,
			connect.WithSchema(adminServiceUpdateExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getExecutionData: connect.NewClient[admin.WorkflowExecutionGetDataRequest, admin.WorkflowExecutionGetDataResponse](
			httpClient,
			baseURL+AdminServiceGetExecutionDataProcedure,
			connect.WithSchema(adminServiceGetExecutionDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listExecutions: connect.NewClient[admin.ResourceListRequest, admin.ExecutionList](
			httpClient,
			baseURL+AdminServiceListExecutionsProcedure,
			connect.WithSchema(adminServiceListExecutionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		terminateExecution: connect.NewClient[admin.ExecutionTerminateRequest, admin.ExecutionTerminateResponse](
			httpClient,
			baseURL+AdminServiceTerminateExecutionProcedure,
			connect.WithSchema(adminServiceTerminateExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNodeExecution: connect.NewClient[admin.NodeExecutionGetRequest, admin.NodeExecution](
			httpClient,
			baseURL+AdminServiceGetNodeExecutionProcedure,
			connect.WithSchema(adminServiceGetNodeExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDynamicNodeWorkflow: connect.NewClient[admin.GetDynamicNodeWorkflowRequest, admin.DynamicNodeWorkflowResponse](
			httpClient,
			baseURL+AdminServiceGetDynamicNodeWorkflowProcedure,
			connect.WithSchema(adminServiceGetDynamicNodeWorkflowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNodeExecutions: connect.NewClient[admin.NodeExecutionListRequest, admin.NodeExecutionList](
			httpClient,
			baseURL+AdminServiceListNodeExecutionsProcedure,
			connect.WithSchema(adminServiceListNodeExecutionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNodeExecutionsForTask: connect.NewClient[admin.NodeExecutionForTaskListRequest, admin.NodeExecutionList](
			httpClient,
			baseURL+AdminServiceListNodeExecutionsForTaskProcedure,
			connect.WithSchema(adminServiceListNodeExecutionsForTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNodeExecutionData: connect.NewClient[admin.NodeExecutionGetDataRequest, admin.NodeExecutionGetDataResponse](
			httpClient,
			baseURL+AdminServiceGetNodeExecutionDataProcedure,
			connect.WithSchema(adminServiceGetNodeExecutionDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerProject: connect.NewClient[admin.ProjectRegisterRequest, admin.ProjectRegisterResponse](
			httpClient,
			baseURL+AdminServiceRegisterProjectProcedure,
			connect.WithSchema(adminServiceRegisterProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[admin.Project, admin.ProjectUpdateResponse](
			httpClient,
			baseURL+AdminServiceUpdateProjectProcedure,
			connect.WithSchema(adminServiceUpdateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[admin.ProjectListRequest, admin.Projects](
			httpClient,
			baseURL+AdminServiceListProjectsProcedure,
			connect.WithSchema(adminServiceListProjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWorkflowEvent: connect.NewClient[admin.WorkflowExecutionEventRequest, admin.WorkflowExecutionEventResponse](
			httpClient,
			baseURL+AdminServiceCreateWorkflowEventProcedure,
			connect.WithSchema(adminServiceCreateWorkflowEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createNodeEvent: connect.NewClient[admin.NodeExecutionEventRequest, admin.NodeExecutionEventResponse](
			httpClient,
			baseURL+AdminServiceCreateNodeEventProcedure,
			connect.WithSchema(adminServiceCreateNodeEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTaskEvent: connect.NewClient[admin.TaskExecutionEventRequest, admin.TaskExecutionEventResponse](
			httpClient,
			baseURL+AdminServiceCreateTaskEventProcedure,
			connect.WithSchema(adminServiceCreateTaskEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskExecution: connect.NewClient[admin.TaskExecutionGetRequest, admin.TaskExecution](
			httpClient,
			baseURL+AdminServiceGetTaskExecutionProcedure,
			connect.WithSchema(adminServiceGetTaskExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTaskExecutions: connect.NewClient[admin.TaskExecutionListRequest, admin.TaskExecutionList](
			httpClient,
			baseURL+AdminServiceListTaskExecutionsProcedure,
			connect.WithSchema(adminServiceListTaskExecutionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskExecutionData: connect.NewClient[admin.TaskExecutionGetDataRequest, admin.TaskExecutionGetDataResponse](
			httpClient,
			baseURL+AdminServiceGetTaskExecutionDataProcedure,
			connect.WithSchema(adminServiceGetTaskExecutionDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProjectDomainAttributes: connect.NewClient[admin.ProjectDomainAttributesUpdateRequest, admin.ProjectDomainAttributesUpdateResponse](
			httpClient,
			baseURL+AdminServiceUpdateProjectDomainAttributesProcedure,
			connect.WithSchema(adminServiceUpdateProjectDomainAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProjectDomainAttributes: connect.NewClient[admin.ProjectDomainAttributesGetRequest, admin.ProjectDomainAttributesGetResponse](
			httpClient,
			baseURL+AdminServiceGetProjectDomainAttributesProcedure,
			connect.WithSchema(adminServiceGetProjectDomainAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProjectDomainAttributes: connect.NewClient[admin.ProjectDomainAttributesDeleteRequest, admin.ProjectDomainAttributesDeleteResponse](
			httpClient,
			baseURL+AdminServiceDeleteProjectDomainAttributesProcedure,
			connect.WithSchema(adminServiceDeleteProjectDomainAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProjectAttributes: connect.NewClient[admin.ProjectAttributesUpdateRequest, admin.ProjectAttributesUpdateResponse](
			httpClient,
			baseURL+AdminServiceUpdateProjectAttributesProcedure,
			connect.WithSchema(adminServiceUpdateProjectAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProjectAttributes: connect.NewClient[admin.ProjectAttributesGetRequest, admin.ProjectAttributesGetResponse](
			httpClient,
			baseURL+AdminServiceGetProjectAttributesProcedure,
			connect.WithSchema(adminServiceGetProjectAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProjectAttributes: connect.NewClient[admin.ProjectAttributesDeleteRequest, admin.ProjectAttributesDeleteResponse](
			httpClient,
			baseURL+AdminServiceDeleteProjectAttributesProcedure,
			connect.WithSchema(adminServiceDeleteProjectAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateWorkflowAttributes: connect.NewClient[admin.WorkflowAttributesUpdateRequest, admin.WorkflowAttributesUpdateResponse](
			httpClient,
			baseURL+AdminServiceUpdateWorkflowAttributesProcedure,
			connect.WithSchema(adminServiceUpdateWorkflowAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWorkflowAttributes: connect.NewClient[admin.WorkflowAttributesGetRequest, admin.WorkflowAttributesGetResponse](
			httpClient,
			baseURL+AdminServiceGetWorkflowAttributesProcedure,
			connect.WithSchema(adminServiceGetWorkflowAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteWorkflowAttributes: connect.NewClient[admin.WorkflowAttributesDeleteRequest, admin.WorkflowAttributesDeleteResponse](
			httpClient,
			baseURL+AdminServiceDeleteWorkflowAttributesProcedure,
			connect.WithSchema(adminServiceDeleteWorkflowAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMatchableAttributes: connect.NewClient[admin.ListMatchableAttributesRequest, admin.ListMatchableAttributesResponse](
			httpClient,
			baseURL+AdminServiceListMatchableAttributesProcedure,
			connect.WithSchema(adminServiceListMatchableAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNamedEntities: connect.NewClient[admin.NamedEntityListRequest, admin.NamedEntityList](
			httpClient,
			baseURL+AdminServiceListNamedEntitiesProcedure,
			connect.WithSchema(adminServiceListNamedEntitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNamedEntity: connect.NewClient[admin.NamedEntityGetRequest, admin.NamedEntity](
			httpClient,
			baseURL+AdminServiceGetNamedEntityProcedure,
			connect.WithSchema(adminServiceGetNamedEntityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNamedEntity: connect.NewClient[admin.NamedEntityUpdateRequest, admin.NamedEntityUpdateResponse](
			httpClient,
			baseURL+AdminServiceUpdateNamedEntityProcedure,
			connect.WithSchema(adminServiceUpdateNamedEntityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVersion: connect.NewClient[admin.GetVersionRequest, admin.GetVersionResponse](
			httpClient,
			baseURL+AdminServiceGetVersionProcedure,
			connect.WithSchema(adminServiceGetVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDescriptionEntity: connect.NewClient[admin.ObjectGetRequest, admin.DescriptionEntity](
			httpClient,
			baseURL+AdminServiceGetDescriptionEntityProcedure,
			connect.WithSchema(adminServiceGetDescriptionEntityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDescriptionEntities: connect.NewClient[admin.DescriptionEntityListRequest, admin.DescriptionEntityList](
			httpClient,
			baseURL+AdminServiceListDescriptionEntitiesProcedure,
			connect.WithSchema(adminServiceListDescriptionEntitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getExecutionMetrics: connect.NewClient[admin.WorkflowExecutionGetMetricsRequest, admin.WorkflowExecutionGetMetricsResponse](
			httpClient,
			baseURL+AdminServiceGetExecutionMetricsProcedure,
			connect.WithSchema(adminServiceGetExecutionMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	createTask                    *connect.Client[admin.TaskCreateRequest, admin.TaskCreateResponse]
	getTask                       *connect.Client[admin.ObjectGetRequest, admin.Task]
	listTaskIds                   *connect.Client[admin.NamedEntityIdentifierListRequest, admin.NamedEntityIdentifierList]
	listTasks                     *connect.Client[admin.ResourceListRequest, admin.TaskList]
	createWorkflow                *connect.Client[admin.WorkflowCreateRequest, admin.WorkflowCreateResponse]
	getWorkflow                   *connect.Client[admin.ObjectGetRequest, admin.Workflow]
	listWorkflowIds               *connect.Client[admin.NamedEntityIdentifierListRequest, admin.NamedEntityIdentifierList]
	listWorkflows                 *connect.Client[admin.ResourceListRequest, admin.WorkflowList]
	createLaunchPlan              *connect.Client[admin.LaunchPlanCreateRequest, admin.LaunchPlanCreateResponse]
	getLaunchPlan                 *connect.Client[admin.ObjectGetRequest, admin.LaunchPlan]
	getActiveLaunchPlan           *connect.Client[admin.ActiveLaunchPlanRequest, admin.LaunchPlan]
	listActiveLaunchPlans         *connect.Client[admin.ActiveLaunchPlanListRequest, admin.LaunchPlanList]
	listLaunchPlanIds             *connect.Client[admin.NamedEntityIdentifierListRequest, admin.NamedEntityIdentifierList]
	listLaunchPlans               *connect.Client[admin.ResourceListRequest, admin.LaunchPlanList]
	updateLaunchPlan              *connect.Client[admin.LaunchPlanUpdateRequest, admin.LaunchPlanUpdateResponse]
	createExecution               *connect.Client[admin.ExecutionCreateRequest, admin.ExecutionCreateResponse]
	relaunchExecution             *connect.Client[admin.ExecutionRelaunchRequest, admin.ExecutionCreateResponse]
	recoverExecution              *connect.Client[admin.ExecutionRecoverRequest, admin.ExecutionCreateResponse]
	getExecution                  *connect.Client[admin.WorkflowExecutionGetRequest, admin.Execution]
	updateExecution               *connect.Client[admin.ExecutionUpdateRequest, admin.ExecutionUpdateResponse]
	getExecutionData              *connect.Client[admin.WorkflowExecutionGetDataRequest, admin.WorkflowExecutionGetDataResponse]
	listExecutions                *connect.Client[admin.ResourceListRequest, admin.ExecutionList]
	terminateExecution            *connect.Client[admin.ExecutionTerminateRequest, admin.ExecutionTerminateResponse]
	getNodeExecution              *connect.Client[admin.NodeExecutionGetRequest, admin.NodeExecution]
	getDynamicNodeWorkflow        *connect.Client[admin.GetDynamicNodeWorkflowRequest, admin.DynamicNodeWorkflowResponse]
	listNodeExecutions            *connect.Client[admin.NodeExecutionListRequest, admin.NodeExecutionList]
	listNodeExecutionsForTask     *connect.Client[admin.NodeExecutionForTaskListRequest, admin.NodeExecutionList]
	getNodeExecutionData          *connect.Client[admin.NodeExecutionGetDataRequest, admin.NodeExecutionGetDataResponse]
	registerProject               *connect.Client[admin.ProjectRegisterRequest, admin.ProjectRegisterResponse]
	updateProject                 *connect.Client[admin.Project, admin.ProjectUpdateResponse]
	listProjects                  *connect.Client[admin.ProjectListRequest, admin.Projects]
	createWorkflowEvent           *connect.Client[admin.WorkflowExecutionEventRequest, admin.WorkflowExecutionEventResponse]
	createNodeEvent               *connect.Client[admin.NodeExecutionEventRequest, admin.NodeExecutionEventResponse]
	createTaskEvent               *connect.Client[admin.TaskExecutionEventRequest, admin.TaskExecutionEventResponse]
	getTaskExecution              *connect.Client[admin.TaskExecutionGetRequest, admin.TaskExecution]
	listTaskExecutions            *connect.Client[admin.TaskExecutionListRequest, admin.TaskExecutionList]
	getTaskExecutionData          *connect.Client[admin.TaskExecutionGetDataRequest, admin.TaskExecutionGetDataResponse]
	updateProjectDomainAttributes *connect.Client[admin.ProjectDomainAttributesUpdateRequest, admin.ProjectDomainAttributesUpdateResponse]
	getProjectDomainAttributes    *connect.Client[admin.ProjectDomainAttributesGetRequest, admin.ProjectDomainAttributesGetResponse]
	deleteProjectDomainAttributes *connect.Client[admin.ProjectDomainAttributesDeleteRequest, admin.ProjectDomainAttributesDeleteResponse]
	updateProjectAttributes       *connect.Client[admin.ProjectAttributesUpdateRequest, admin.ProjectAttributesUpdateResponse]
	getProjectAttributes          *connect.Client[admin.ProjectAttributesGetRequest, admin.ProjectAttributesGetResponse]
	deleteProjectAttributes       *connect.Client[admin.ProjectAttributesDeleteRequest, admin.ProjectAttributesDeleteResponse]
	updateWorkflowAttributes      *connect.Client[admin.WorkflowAttributesUpdateRequest, admin.WorkflowAttributesUpdateResponse]
	getWorkflowAttributes         *connect.Client[admin.WorkflowAttributesGetRequest, admin.WorkflowAttributesGetResponse]
	deleteWorkflowAttributes      *connect.Client[admin.WorkflowAttributesDeleteRequest, admin.WorkflowAttributesDeleteResponse]
	listMatchableAttributes       *connect.Client[admin.ListMatchableAttributesRequest, admin.ListMatchableAttributesResponse]
	listNamedEntities             *connect.Client[admin.NamedEntityListRequest, admin.NamedEntityList]
	getNamedEntity                *connect.Client[admin.NamedEntityGetRequest, admin.NamedEntity]
	updateNamedEntity             *connect.Client[admin.NamedEntityUpdateRequest, admin.NamedEntityUpdateResponse]
	getVersion                    *connect.Client[admin.GetVersionRequest, admin.GetVersionResponse]
	getDescriptionEntity          *connect.Client[admin.ObjectGetRequest, admin.DescriptionEntity]
	listDescriptionEntities       *connect.Client[admin.DescriptionEntityListRequest, admin.DescriptionEntityList]
	getExecutionMetrics           *connect.Client[admin.WorkflowExecutionGetMetricsRequest, admin.WorkflowExecutionGetMetricsResponse]
}

// CreateTask calls flyteidl.service.AdminService.CreateTask.
func (c *adminServiceClient) CreateTask(ctx context.Context, req *connect.Request[admin.TaskCreateRequest]) (*connect.Response[admin.TaskCreateResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls flyteidl.service.AdminService.GetTask.
func (c *adminServiceClient) GetTask(ctx context.Context, req *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Task], error) {
	return c.getTask.CallUnary(ctx, req)
}

// ListTaskIds calls flyteidl.service.AdminService.ListTaskIds.
func (c *adminServiceClient) ListTaskIds(ctx context.Context, req *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error) {
	return c.listTaskIds.CallUnary(ctx, req)
}

// ListTasks calls flyteidl.service.AdminService.ListTasks.
func (c *adminServiceClient) ListTasks(ctx context.Context, req *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.TaskList], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// CreateWorkflow calls flyteidl.service.AdminService.CreateWorkflow.
func (c *adminServiceClient) CreateWorkflow(ctx context.Context, req *connect.Request[admin.WorkflowCreateRequest]) (*connect.Response[admin.WorkflowCreateResponse], error) {
	return c.createWorkflow.CallUnary(ctx, req)
}

// GetWorkflow calls flyteidl.service.AdminService.GetWorkflow.
func (c *adminServiceClient) GetWorkflow(ctx context.Context, req *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Workflow], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// ListWorkflowIds calls flyteidl.service.AdminService.ListWorkflowIds.
func (c *adminServiceClient) ListWorkflowIds(ctx context.Context, req *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error) {
	return c.listWorkflowIds.CallUnary(ctx, req)
}

// ListWorkflows calls flyteidl.service.AdminService.ListWorkflows.
func (c *adminServiceClient) ListWorkflows(ctx context.Context, req *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.WorkflowList], error) {
	return c.listWorkflows.CallUnary(ctx, req)
}

// CreateLaunchPlan calls flyteidl.service.AdminService.CreateLaunchPlan.
func (c *adminServiceClient) CreateLaunchPlan(ctx context.Context, req *connect.Request[admin.LaunchPlanCreateRequest]) (*connect.Response[admin.LaunchPlanCreateResponse], error) {
	return c.createLaunchPlan.CallUnary(ctx, req)
}

// GetLaunchPlan calls flyteidl.service.AdminService.GetLaunchPlan.
func (c *adminServiceClient) GetLaunchPlan(ctx context.Context, req *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.LaunchPlan], error) {
	return c.getLaunchPlan.CallUnary(ctx, req)
}

// GetActiveLaunchPlan calls flyteidl.service.AdminService.GetActiveLaunchPlan.
func (c *adminServiceClient) GetActiveLaunchPlan(ctx context.Context, req *connect.Request[admin.ActiveLaunchPlanRequest]) (*connect.Response[admin.LaunchPlan], error) {
	return c.getActiveLaunchPlan.CallUnary(ctx, req)
}

// ListActiveLaunchPlans calls flyteidl.service.AdminService.ListActiveLaunchPlans.
func (c *adminServiceClient) ListActiveLaunchPlans(ctx context.Context, req *connect.Request[admin.ActiveLaunchPlanListRequest]) (*connect.Response[admin.LaunchPlanList], error) {
	return c.listActiveLaunchPlans.CallUnary(ctx, req)
}

// ListLaunchPlanIds calls flyteidl.service.AdminService.ListLaunchPlanIds.
func (c *adminServiceClient) ListLaunchPlanIds(ctx context.Context, req *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error) {
	return c.listLaunchPlanIds.CallUnary(ctx, req)
}

// ListLaunchPlans calls flyteidl.service.AdminService.ListLaunchPlans.
func (c *adminServiceClient) ListLaunchPlans(ctx context.Context, req *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.LaunchPlanList], error) {
	return c.listLaunchPlans.CallUnary(ctx, req)
}

// UpdateLaunchPlan calls flyteidl.service.AdminService.UpdateLaunchPlan.
func (c *adminServiceClient) UpdateLaunchPlan(ctx context.Context, req *connect.Request[admin.LaunchPlanUpdateRequest]) (*connect.Response[admin.LaunchPlanUpdateResponse], error) {
	return c.updateLaunchPlan.CallUnary(ctx, req)
}

// CreateExecution calls flyteidl.service.AdminService.CreateExecution.
func (c *adminServiceClient) CreateExecution(ctx context.Context, req *connect.Request[admin.ExecutionCreateRequest]) (*connect.Response[admin.ExecutionCreateResponse], error) {
	return c.createExecution.CallUnary(ctx, req)
}

// RelaunchExecution calls flyteidl.service.AdminService.RelaunchExecution.
func (c *adminServiceClient) RelaunchExecution(ctx context.Context, req *connect.Request[admin.ExecutionRelaunchRequest]) (*connect.Response[admin.ExecutionCreateResponse], error) {
	return c.relaunchExecution.CallUnary(ctx, req)
}

// RecoverExecution calls flyteidl.service.AdminService.RecoverExecution.
func (c *adminServiceClient) RecoverExecution(ctx context.Context, req *connect.Request[admin.ExecutionRecoverRequest]) (*connect.Response[admin.ExecutionCreateResponse], error) {
	return c.recoverExecution.CallUnary(ctx, req)
}

// GetExecution calls flyteidl.service.AdminService.GetExecution.
func (c *adminServiceClient) GetExecution(ctx context.Context, req *connect.Request[admin.WorkflowExecutionGetRequest]) (*connect.Response[admin.Execution], error) {
	return c.getExecution.CallUnary(ctx, req)
}

// UpdateExecution calls flyteidl.service.AdminService.UpdateExecution.
func (c *adminServiceClient) UpdateExecution(ctx context.Context, req *connect.Request[admin.ExecutionUpdateRequest]) (*connect.Response[admin.ExecutionUpdateResponse], error) {
	return c.updateExecution.CallUnary(ctx, req)
}

// GetExecutionData calls flyteidl.service.AdminService.GetExecutionData.
func (c *adminServiceClient) GetExecutionData(ctx context.Context, req *connect.Request[admin.WorkflowExecutionGetDataRequest]) (*connect.Response[admin.WorkflowExecutionGetDataResponse], error) {
	return c.getExecutionData.CallUnary(ctx, req)
}

// ListExecutions calls flyteidl.service.AdminService.ListExecutions.
func (c *adminServiceClient) ListExecutions(ctx context.Context, req *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.ExecutionList], error) {
	return c.listExecutions.CallUnary(ctx, req)
}

// TerminateExecution calls flyteidl.service.AdminService.TerminateExecution.
func (c *adminServiceClient) TerminateExecution(ctx context.Context, req *connect.Request[admin.ExecutionTerminateRequest]) (*connect.Response[admin.ExecutionTerminateResponse], error) {
	return c.terminateExecution.CallUnary(ctx, req)
}

// GetNodeExecution calls flyteidl.service.AdminService.GetNodeExecution.
func (c *adminServiceClient) GetNodeExecution(ctx context.Context, req *connect.Request[admin.NodeExecutionGetRequest]) (*connect.Response[admin.NodeExecution], error) {
	return c.getNodeExecution.CallUnary(ctx, req)
}

// GetDynamicNodeWorkflow calls flyteidl.service.AdminService.GetDynamicNodeWorkflow.
func (c *adminServiceClient) GetDynamicNodeWorkflow(ctx context.Context, req *connect.Request[admin.GetDynamicNodeWorkflowRequest]) (*connect.Response[admin.DynamicNodeWorkflowResponse], error) {
	return c.getDynamicNodeWorkflow.CallUnary(ctx, req)
}

// ListNodeExecutions calls flyteidl.service.AdminService.ListNodeExecutions.
func (c *adminServiceClient) ListNodeExecutions(ctx context.Context, req *connect.Request[admin.NodeExecutionListRequest]) (*connect.Response[admin.NodeExecutionList], error) {
	return c.listNodeExecutions.CallUnary(ctx, req)
}

// ListNodeExecutionsForTask calls flyteidl.service.AdminService.ListNodeExecutionsForTask.
func (c *adminServiceClient) ListNodeExecutionsForTask(ctx context.Context, req *connect.Request[admin.NodeExecutionForTaskListRequest]) (*connect.Response[admin.NodeExecutionList], error) {
	return c.listNodeExecutionsForTask.CallUnary(ctx, req)
}

// GetNodeExecutionData calls flyteidl.service.AdminService.GetNodeExecutionData.
func (c *adminServiceClient) GetNodeExecutionData(ctx context.Context, req *connect.Request[admin.NodeExecutionGetDataRequest]) (*connect.Response[admin.NodeExecutionGetDataResponse], error) {
	return c.getNodeExecutionData.CallUnary(ctx, req)
}

// RegisterProject calls flyteidl.service.AdminService.RegisterProject.
func (c *adminServiceClient) RegisterProject(ctx context.Context, req *connect.Request[admin.ProjectRegisterRequest]) (*connect.Response[admin.ProjectRegisterResponse], error) {
	return c.registerProject.CallUnary(ctx, req)
}

// UpdateProject calls flyteidl.service.AdminService.UpdateProject.
func (c *adminServiceClient) UpdateProject(ctx context.Context, req *connect.Request[admin.Project]) (*connect.Response[admin.ProjectUpdateResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// ListProjects calls flyteidl.service.AdminService.ListProjects.
func (c *adminServiceClient) ListProjects(ctx context.Context, req *connect.Request[admin.ProjectListRequest]) (*connect.Response[admin.Projects], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// CreateWorkflowEvent calls flyteidl.service.AdminService.CreateWorkflowEvent.
func (c *adminServiceClient) CreateWorkflowEvent(ctx context.Context, req *connect.Request[admin.WorkflowExecutionEventRequest]) (*connect.Response[admin.WorkflowExecutionEventResponse], error) {
	return c.createWorkflowEvent.CallUnary(ctx, req)
}

// CreateNodeEvent calls flyteidl.service.AdminService.CreateNodeEvent.
func (c *adminServiceClient) CreateNodeEvent(ctx context.Context, req *connect.Request[admin.NodeExecutionEventRequest]) (*connect.Response[admin.NodeExecutionEventResponse], error) {
	return c.createNodeEvent.CallUnary(ctx, req)
}

// CreateTaskEvent calls flyteidl.service.AdminService.CreateTaskEvent.
func (c *adminServiceClient) CreateTaskEvent(ctx context.Context, req *connect.Request[admin.TaskExecutionEventRequest]) (*connect.Response[admin.TaskExecutionEventResponse], error) {
	return c.createTaskEvent.CallUnary(ctx, req)
}

// GetTaskExecution calls flyteidl.service.AdminService.GetTaskExecution.
func (c *adminServiceClient) GetTaskExecution(ctx context.Context, req *connect.Request[admin.TaskExecutionGetRequest]) (*connect.Response[admin.TaskExecution], error) {
	return c.getTaskExecution.CallUnary(ctx, req)
}

// ListTaskExecutions calls flyteidl.service.AdminService.ListTaskExecutions.
func (c *adminServiceClient) ListTaskExecutions(ctx context.Context, req *connect.Request[admin.TaskExecutionListRequest]) (*connect.Response[admin.TaskExecutionList], error) {
	return c.listTaskExecutions.CallUnary(ctx, req)
}

// GetTaskExecutionData calls flyteidl.service.AdminService.GetTaskExecutionData.
func (c *adminServiceClient) GetTaskExecutionData(ctx context.Context, req *connect.Request[admin.TaskExecutionGetDataRequest]) (*connect.Response[admin.TaskExecutionGetDataResponse], error) {
	return c.getTaskExecutionData.CallUnary(ctx, req)
}

// UpdateProjectDomainAttributes calls flyteidl.service.AdminService.UpdateProjectDomainAttributes.
func (c *adminServiceClient) UpdateProjectDomainAttributes(ctx context.Context, req *connect.Request[admin.ProjectDomainAttributesUpdateRequest]) (*connect.Response[admin.ProjectDomainAttributesUpdateResponse], error) {
	return c.updateProjectDomainAttributes.CallUnary(ctx, req)
}

// GetProjectDomainAttributes calls flyteidl.service.AdminService.GetProjectDomainAttributes.
func (c *adminServiceClient) GetProjectDomainAttributes(ctx context.Context, req *connect.Request[admin.ProjectDomainAttributesGetRequest]) (*connect.Response[admin.ProjectDomainAttributesGetResponse], error) {
	return c.getProjectDomainAttributes.CallUnary(ctx, req)
}

// DeleteProjectDomainAttributes calls flyteidl.service.AdminService.DeleteProjectDomainAttributes.
func (c *adminServiceClient) DeleteProjectDomainAttributes(ctx context.Context, req *connect.Request[admin.ProjectDomainAttributesDeleteRequest]) (*connect.Response[admin.ProjectDomainAttributesDeleteResponse], error) {
	return c.deleteProjectDomainAttributes.CallUnary(ctx, req)
}

// UpdateProjectAttributes calls flyteidl.service.AdminService.UpdateProjectAttributes.
func (c *adminServiceClient) UpdateProjectAttributes(ctx context.Context, req *connect.Request[admin.ProjectAttributesUpdateRequest]) (*connect.Response[admin.ProjectAttributesUpdateResponse], error) {
	return c.updateProjectAttributes.CallUnary(ctx, req)
}

// GetProjectAttributes calls flyteidl.service.AdminService.GetProjectAttributes.
func (c *adminServiceClient) GetProjectAttributes(ctx context.Context, req *connect.Request[admin.ProjectAttributesGetRequest]) (*connect.Response[admin.ProjectAttributesGetResponse], error) {
	return c.getProjectAttributes.CallUnary(ctx, req)
}

// DeleteProjectAttributes calls flyteidl.service.AdminService.DeleteProjectAttributes.
func (c *adminServiceClient) DeleteProjectAttributes(ctx context.Context, req *connect.Request[admin.ProjectAttributesDeleteRequest]) (*connect.Response[admin.ProjectAttributesDeleteResponse], error) {
	return c.deleteProjectAttributes.CallUnary(ctx, req)
}

// UpdateWorkflowAttributes calls flyteidl.service.AdminService.UpdateWorkflowAttributes.
func (c *adminServiceClient) UpdateWorkflowAttributes(ctx context.Context, req *connect.Request[admin.WorkflowAttributesUpdateRequest]) (*connect.Response[admin.WorkflowAttributesUpdateResponse], error) {
	return c.updateWorkflowAttributes.CallUnary(ctx, req)
}

// GetWorkflowAttributes calls flyteidl.service.AdminService.GetWorkflowAttributes.
func (c *adminServiceClient) GetWorkflowAttributes(ctx context.Context, req *connect.Request[admin.WorkflowAttributesGetRequest]) (*connect.Response[admin.WorkflowAttributesGetResponse], error) {
	return c.getWorkflowAttributes.CallUnary(ctx, req)
}

// DeleteWorkflowAttributes calls flyteidl.service.AdminService.DeleteWorkflowAttributes.
func (c *adminServiceClient) DeleteWorkflowAttributes(ctx context.Context, req *connect.Request[admin.WorkflowAttributesDeleteRequest]) (*connect.Response[admin.WorkflowAttributesDeleteResponse], error) {
	return c.deleteWorkflowAttributes.CallUnary(ctx, req)
}

// ListMatchableAttributes calls flyteidl.service.AdminService.ListMatchableAttributes.
func (c *adminServiceClient) ListMatchableAttributes(ctx context.Context, req *connect.Request[admin.ListMatchableAttributesRequest]) (*connect.Response[admin.ListMatchableAttributesResponse], error) {
	return c.listMatchableAttributes.CallUnary(ctx, req)
}

// ListNamedEntities calls flyteidl.service.AdminService.ListNamedEntities.
func (c *adminServiceClient) ListNamedEntities(ctx context.Context, req *connect.Request[admin.NamedEntityListRequest]) (*connect.Response[admin.NamedEntityList], error) {
	return c.listNamedEntities.CallUnary(ctx, req)
}

// GetNamedEntity calls flyteidl.service.AdminService.GetNamedEntity.
func (c *adminServiceClient) GetNamedEntity(ctx context.Context, req *connect.Request[admin.NamedEntityGetRequest]) (*connect.Response[admin.NamedEntity], error) {
	return c.getNamedEntity.CallUnary(ctx, req)
}

// UpdateNamedEntity calls flyteidl.service.AdminService.UpdateNamedEntity.
func (c *adminServiceClient) UpdateNamedEntity(ctx context.Context, req *connect.Request[admin.NamedEntityUpdateRequest]) (*connect.Response[admin.NamedEntityUpdateResponse], error) {
	return c.updateNamedEntity.CallUnary(ctx, req)
}

// GetVersion calls flyteidl.service.AdminService.GetVersion.
func (c *adminServiceClient) GetVersion(ctx context.Context, req *connect.Request[admin.GetVersionRequest]) (*connect.Response[admin.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// GetDescriptionEntity calls flyteidl.service.AdminService.GetDescriptionEntity.
func (c *adminServiceClient) GetDescriptionEntity(ctx context.Context, req *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.DescriptionEntity], error) {
	return c.getDescriptionEntity.CallUnary(ctx, req)
}

// ListDescriptionEntities calls flyteidl.service.AdminService.ListDescriptionEntities.
func (c *adminServiceClient) ListDescriptionEntities(ctx context.Context, req *connect.Request[admin.DescriptionEntityListRequest]) (*connect.Response[admin.DescriptionEntityList], error) {
	return c.listDescriptionEntities.CallUnary(ctx, req)
}

// GetExecutionMetrics calls flyteidl.service.AdminService.GetExecutionMetrics.
func (c *adminServiceClient) GetExecutionMetrics(ctx context.Context, req *connect.Request[admin.WorkflowExecutionGetMetricsRequest]) (*connect.Response[admin.WorkflowExecutionGetMetricsResponse], error) {
	return c.getExecutionMetrics.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the flyteidl.service.AdminService service.
type AdminServiceHandler interface {
	// Create and upload a :ref:`ref_flyteidl.admin.Task` definition
	CreateTask(context.Context, *connect.Request[admin.TaskCreateRequest]) (*connect.Response[admin.TaskCreateResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.Task` definition.
	GetTask(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Task], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of task objects.
	ListTaskIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Task` definitions.
	ListTasks(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.TaskList], error)
	// Create and upload a :ref:`ref_flyteidl.admin.Workflow` definition
	CreateWorkflow(context.Context, *connect.Request[admin.WorkflowCreateRequest]) (*connect.Response[admin.WorkflowCreateResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.Workflow` definition.
	GetWorkflow(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Workflow], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of workflow objects.
	ListWorkflowIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Workflow` definitions.
	ListWorkflows(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.WorkflowList], error)
	// Create and upload a :ref:`ref_flyteidl.admin.LaunchPlan` definition
	CreateLaunchPlan(context.Context, *connect.Request[admin.LaunchPlanCreateRequest]) (*connect.Response[admin.LaunchPlanCreateResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.LaunchPlan` definition.
	GetLaunchPlan(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.LaunchPlan], error)
	// Fetch the active version of a :ref:`ref_flyteidl.admin.LaunchPlan`.
	GetActiveLaunchPlan(context.Context, *connect.Request[admin.ActiveLaunchPlanRequest]) (*connect.Response[admin.LaunchPlan], error)
	// List active versions of :ref:`ref_flyteidl.admin.LaunchPlan`.
	ListActiveLaunchPlans(context.Context, *connect.Request[admin.ActiveLaunchPlanListRequest]) (*connect.Response[admin.LaunchPlanList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of launch plan objects.
	ListLaunchPlanIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.LaunchPlan` definitions.
	ListLaunchPlans(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.LaunchPlanList], error)
	// Updates the status of a registered :ref:`ref_flyteidl.admin.LaunchPlan`.
	UpdateLaunchPlan(context.Context, *connect.Request[admin.LaunchPlanUpdateRequest]) (*connect.Response[admin.LaunchPlanUpdateResponse], error)
	// Triggers the creation of a :ref:`ref_flyteidl.admin.Execution`
	CreateExecution(context.Context, *connect.Request[admin.ExecutionCreateRequest]) (*connect.Response[admin.ExecutionCreateResponse], error)
	// Triggers the creation of an identical :ref:`ref_flyteidl.admin.Execution`
	RelaunchExecution(context.Context, *connect.Request[admin.ExecutionRelaunchRequest]) (*connect.Response[admin.ExecutionCreateResponse], error)
	// Recreates a previously-run workflow execution that will only start executing from the last known failure point.
	// In Recover mode, users cannot change any input parameters or update the version of the execution.
	// This is extremely useful to recover from system errors and byzantine faults like - Loss of K8s cluster, bugs in platform or instability, machine failures,
	// downstream system failures (downstream services), or simply to recover executions that failed because of retry exhaustion and should complete if tried again.
	// See :ref:`ref_flyteidl.admin.ExecutionRecoverRequest` for more details.
	RecoverExecution(context.Context, *connect.Request[admin.ExecutionRecoverRequest]) (*connect.Response[admin.ExecutionCreateResponse], error)
	// Fetches a :ref:`ref_flyteidl.admin.Execution`.
	GetExecution(context.Context, *connect.Request[admin.WorkflowExecutionGetRequest]) (*connect.Response[admin.Execution], error)
	// Update execution belonging to project domain :ref:`ref_flyteidl.admin.Execution`.
	UpdateExecution(context.Context, *connect.Request[admin.ExecutionUpdateRequest]) (*connect.Response[admin.ExecutionUpdateResponse], error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionData(context.Context, *connect.Request[admin.WorkflowExecutionGetDataRequest]) (*connect.Response[admin.WorkflowExecutionGetDataResponse], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Execution`.
	ListExecutions(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.ExecutionList], error)
	// Terminates an in-progress :ref:`ref_flyteidl.admin.Execution`.
	TerminateExecution(context.Context, *connect.Request[admin.ExecutionTerminateRequest]) (*connect.Response[admin.ExecutionTerminateResponse], error)
	// Fetches a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecution(context.Context, *connect.Request[admin.NodeExecutionGetRequest]) (*connect.Response[admin.NodeExecution], error)
	// Fetches a :ref:`ref_flyteidl.admin.DynamicNodeWorkflowResponse`.
	GetDynamicNodeWorkflow(context.Context, *connect.Request[admin.GetDynamicNodeWorkflowRequest]) (*connect.Response[admin.DynamicNodeWorkflowResponse], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution`.
	ListNodeExecutions(context.Context, *connect.Request[admin.NodeExecutionListRequest]) (*connect.Response[admin.NodeExecutionList], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution` launched by the reference :ref:`ref_flyteidl.admin.TaskExecution`.
	ListNodeExecutionsForTask(context.Context, *connect.Request[admin.NodeExecutionForTaskListRequest]) (*connect.Response[admin.NodeExecutionList], error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecutionData(context.Context, *connect.Request[admin.NodeExecutionGetDataRequest]) (*connect.Response[admin.NodeExecutionGetDataResponse], error)
	// Registers a :ref:`ref_flyteidl.admin.Project` with the Flyte deployment.
	RegisterProject(context.Context, *connect.Request[admin.ProjectRegisterRequest]) (*connect.Response[admin.ProjectRegisterResponse], error)
	// Updates an existing :ref:`ref_flyteidl.admin.Project`
	// flyteidl.admin.Project should be passed but the domains property should be empty;
	// it will be ignored in the handler as domains cannot be updated via this API.
	UpdateProject(context.Context, *connect.Request[admin.Project]) (*connect.Response[admin.ProjectUpdateResponse], error)
	// Fetches a list of :ref:`ref_flyteidl.admin.Project`
	ListProjects(context.Context, *connect.Request[admin.ProjectListRequest]) (*connect.Response[admin.Projects], error)
	// Indicates a :ref:`ref_flyteidl.event.WorkflowExecutionEvent` has occurred.
	CreateWorkflowEvent(context.Context, *connect.Request[admin.WorkflowExecutionEventRequest]) (*connect.Response[admin.WorkflowExecutionEventResponse], error)
	// Indicates a :ref:`ref_flyteidl.event.NodeExecutionEvent` has occurred.
	CreateNodeEvent(context.Context, *connect.Request[admin.NodeExecutionEventRequest]) (*connect.Response[admin.NodeExecutionEventResponse], error)
	// Indicates a :ref:`ref_flyteidl.event.TaskExecutionEvent` has occurred.
	CreateTaskEvent(context.Context, *connect.Request[admin.TaskExecutionEventRequest]) (*connect.Response[admin.TaskExecutionEventResponse], error)
	// Fetches a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecution(context.Context, *connect.Request[admin.TaskExecutionGetRequest]) (*connect.Response[admin.TaskExecution], error)
	// Fetches a list of :ref:`ref_flyteidl.admin.TaskExecution`.
	ListTaskExecutions(context.Context, *connect.Request[admin.TaskExecutionListRequest]) (*connect.Response[admin.TaskExecutionList], error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecutionData(context.Context, *connect.Request[admin.TaskExecutionGetDataRequest]) (*connect.Response[admin.TaskExecutionGetDataResponse], error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	UpdateProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesUpdateRequest]) (*connect.Response[admin.ProjectDomainAttributesUpdateResponse], error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesGetRequest]) (*connect.Response[admin.ProjectDomainAttributesGetResponse], error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesDeleteRequest]) (*connect.Response[admin.ProjectDomainAttributesDeleteResponse], error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` at the project level
	UpdateProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesUpdateRequest]) (*connect.Response[admin.ProjectAttributesUpdateResponse], error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesGetRequest]) (*connect.Response[admin.ProjectAttributesGetResponse], error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesDeleteRequest]) (*connect.Response[admin.ProjectAttributesDeleteResponse], error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	UpdateWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesUpdateRequest]) (*connect.Response[admin.WorkflowAttributesUpdateResponse], error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	GetWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesGetRequest]) (*connect.Response[admin.WorkflowAttributesGetResponse], error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	DeleteWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesDeleteRequest]) (*connect.Response[admin.WorkflowAttributesDeleteResponse], error)
	// Lists custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a specific resource type.
	ListMatchableAttributes(context.Context, *connect.Request[admin.ListMatchableAttributesRequest]) (*connect.Response[admin.ListMatchableAttributesResponse], error)
	// Returns a list of :ref:`ref_flyteidl.admin.NamedEntity` objects.
	ListNamedEntities(context.Context, *connect.Request[admin.NamedEntityListRequest]) (*connect.Response[admin.NamedEntityList], error)
	// Returns a :ref:`ref_flyteidl.admin.NamedEntity` object.
	GetNamedEntity(context.Context, *connect.Request[admin.NamedEntityGetRequest]) (*connect.Response[admin.NamedEntity], error)
	// Updates a :ref:`ref_flyteidl.admin.NamedEntity` object.
	UpdateNamedEntity(context.Context, *connect.Request[admin.NamedEntityUpdateRequest]) (*connect.Response[admin.NamedEntityUpdateResponse], error)
	GetVersion(context.Context, *connect.Request[admin.GetVersionRequest]) (*connect.Response[admin.GetVersionResponse], error)
	// Fetch a :ref:`ref_flyteidl.admin.DescriptionEntity` object.
	GetDescriptionEntity(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.DescriptionEntity], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.DescriptionEntity` definitions.
	ListDescriptionEntities(context.Context, *connect.Request[admin.DescriptionEntityListRequest]) (*connect.Response[admin.DescriptionEntityList], error)
	// Fetches runtime metrics for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionMetrics(context.Context, *connect.Request[admin.WorkflowExecutionGetMetricsRequest]) (*connect.Response[admin.WorkflowExecutionGetMetricsResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceCreateTaskHandler := connect.NewUnaryHandler(
		AdminServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(adminServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetTaskHandler := connect.NewUnaryHandler(
		AdminServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(adminServiceGetTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListTaskIdsHandler := connect.NewUnaryHandler(
		AdminServiceListTaskIdsProcedure,
		svc.ListTaskIds,
		connect.WithSchema(adminServiceListTaskIdsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListTasksHandler := connect.NewUnaryHandler(
		AdminServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(adminServiceListTasksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateWorkflowHandler := connect.NewUnaryHandler(
		AdminServiceCreateWorkflowProcedure,
		svc.CreateWorkflow,
		connect.WithSchema(adminServiceCreateWorkflowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetWorkflowHandler := connect.NewUnaryHandler(
		AdminServiceGetWorkflowProcedure,
		svc.GetWorkflow,
		connect.WithSchema(adminServiceGetWorkflowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListWorkflowIdsHandler := connect.NewUnaryHandler(
		AdminServiceListWorkflowIdsProcedure,
		svc.ListWorkflowIds,
		connect.WithSchema(adminServiceListWorkflowIdsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListWorkflowsHandler := connect.NewUnaryHandler(
		AdminServiceListWorkflowsProcedure,
		svc.ListWorkflows,
		connect.WithSchema(adminServiceListWorkflowsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateLaunchPlanHandler := connect.NewUnaryHandler(
		AdminServiceCreateLaunchPlanProcedure,
		svc.CreateLaunchPlan,
		connect.WithSchema(adminServiceCreateLaunchPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetLaunchPlanHandler := connect.NewUnaryHandler(
		AdminServiceGetLaunchPlanProcedure,
		svc.GetLaunchPlan,
		connect.WithSchema(adminServiceGetLaunchPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetActiveLaunchPlanHandler := connect.NewUnaryHandler(
		AdminServiceGetActiveLaunchPlanProcedure,
		svc.GetActiveLaunchPlan,
		connect.WithSchema(adminServiceGetActiveLaunchPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListActiveLaunchPlansHandler := connect.NewUnaryHandler(
		AdminServiceListActiveLaunchPlansProcedure,
		svc.ListActiveLaunchPlans,
		connect.WithSchema(adminServiceListActiveLaunchPlansMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListLaunchPlanIdsHandler := connect.NewUnaryHandler(
		AdminServiceListLaunchPlanIdsProcedure,
		svc.ListLaunchPlanIds,
		connect.WithSchema(adminServiceListLaunchPlanIdsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListLaunchPlansHandler := connect.NewUnaryHandler(
		AdminServiceListLaunchPlansProcedure,
		svc.ListLaunchPlans,
		connect.WithSchema(adminServiceListLaunchPlansMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateLaunchPlanHandler := connect.NewUnaryHandler(
		AdminServiceUpdateLaunchPlanProcedure,
		svc.UpdateLaunchPlan,
		connect.WithSchema(adminServiceUpdateLaunchPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateExecutionHandler := connect.NewUnaryHandler(
		AdminServiceCreateExecutionProcedure,
		svc.CreateExecution,
		connect.WithSchema(adminServiceCreateExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceRelaunchExecutionHandler := connect.NewUnaryHandler(
		AdminServiceRelaunchExecutionProcedure,
		svc.RelaunchExecution,
		connect.WithSchema(adminServiceRelaunchExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceRecoverExecutionHandler := connect.NewUnaryHandler(
		AdminServiceRecoverExecutionProcedure,
		svc.RecoverExecution,
		connect.WithSchema(adminServiceRecoverExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetExecutionHandler := connect.NewUnaryHandler(
		AdminServiceGetExecutionProcedure,
		svc.GetExecution,
		connect.WithSchema(adminServiceGetExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateExecutionHandler := connect.NewUnaryHandler(
		AdminServiceUpdateExecutionProcedure,
		svc.UpdateExecution,
		connect.WithSchema(adminServiceUpdateExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetExecutionDataHandler := connect.NewUnaryHandler(
		AdminServiceGetExecutionDataProcedure,
		svc.GetExecutionData,
		connect.WithSchema(adminServiceGetExecutionDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListExecutionsHandler := connect.NewUnaryHandler(
		AdminServiceListExecutionsProcedure,
		svc.ListExecutions,
		connect.WithSchema(adminServiceListExecutionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceTerminateExecutionHandler := connect.NewUnaryHandler(
		AdminServiceTerminateExecutionProcedure,
		svc.TerminateExecution,
		connect.WithSchema(adminServiceTerminateExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetNodeExecutionHandler := connect.NewUnaryHandler(
		AdminServiceGetNodeExecutionProcedure,
		svc.GetNodeExecution,
		connect.WithSchema(adminServiceGetNodeExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetDynamicNodeWorkflowHandler := connect.NewUnaryHandler(
		AdminServiceGetDynamicNodeWorkflowProcedure,
		svc.GetDynamicNodeWorkflow,
		connect.WithSchema(adminServiceGetDynamicNodeWorkflowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListNodeExecutionsHandler := connect.NewUnaryHandler(
		AdminServiceListNodeExecutionsProcedure,
		svc.ListNodeExecutions,
		connect.WithSchema(adminServiceListNodeExecutionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListNodeExecutionsForTaskHandler := connect.NewUnaryHandler(
		AdminServiceListNodeExecutionsForTaskProcedure,
		svc.ListNodeExecutionsForTask,
		connect.WithSchema(adminServiceListNodeExecutionsForTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetNodeExecutionDataHandler := connect.NewUnaryHandler(
		AdminServiceGetNodeExecutionDataProcedure,
		svc.GetNodeExecutionData,
		connect.WithSchema(adminServiceGetNodeExecutionDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceRegisterProjectHandler := connect.NewUnaryHandler(
		AdminServiceRegisterProjectProcedure,
		svc.RegisterProject,
		connect.WithSchema(adminServiceRegisterProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateProjectHandler := connect.NewUnaryHandler(
		AdminServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(adminServiceUpdateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListProjectsHandler := connect.NewUnaryHandler(
		AdminServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(adminServiceListProjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateWorkflowEventHandler := connect.NewUnaryHandler(
		AdminServiceCreateWorkflowEventProcedure,
		svc.CreateWorkflowEvent,
		connect.WithSchema(adminServiceCreateWorkflowEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateNodeEventHandler := connect.NewUnaryHandler(
		AdminServiceCreateNodeEventProcedure,
		svc.CreateNodeEvent,
		connect.WithSchema(adminServiceCreateNodeEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateTaskEventHandler := connect.NewUnaryHandler(
		AdminServiceCreateTaskEventProcedure,
		svc.CreateTaskEvent,
		connect.WithSchema(adminServiceCreateTaskEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetTaskExecutionHandler := connect.NewUnaryHandler(
		AdminServiceGetTaskExecutionProcedure,
		svc.GetTaskExecution,
		connect.WithSchema(adminServiceGetTaskExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListTaskExecutionsHandler := connect.NewUnaryHandler(
		AdminServiceListTaskExecutionsProcedure,
		svc.ListTaskExecutions,
		connect.WithSchema(adminServiceListTaskExecutionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetTaskExecutionDataHandler := connect.NewUnaryHandler(
		AdminServiceGetTaskExecutionDataProcedure,
		svc.GetTaskExecutionData,
		connect.WithSchema(adminServiceGetTaskExecutionDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateProjectDomainAttributesHandler := connect.NewUnaryHandler(
		AdminServiceUpdateProjectDomainAttributesProcedure,
		svc.UpdateProjectDomainAttributes,
		connect.WithSchema(adminServiceUpdateProjectDomainAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetProjectDomainAttributesHandler := connect.NewUnaryHandler(
		AdminServiceGetProjectDomainAttributesProcedure,
		svc.GetProjectDomainAttributes,
		connect.WithSchema(adminServiceGetProjectDomainAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteProjectDomainAttributesHandler := connect.NewUnaryHandler(
		AdminServiceDeleteProjectDomainAttributesProcedure,
		svc.DeleteProjectDomainAttributes,
		connect.WithSchema(adminServiceDeleteProjectDomainAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateProjectAttributesHandler := connect.NewUnaryHandler(
		AdminServiceUpdateProjectAttributesProcedure,
		svc.UpdateProjectAttributes,
		connect.WithSchema(adminServiceUpdateProjectAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetProjectAttributesHandler := connect.NewUnaryHandler(
		AdminServiceGetProjectAttributesProcedure,
		svc.GetProjectAttributes,
		connect.WithSchema(adminServiceGetProjectAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteProjectAttributesHandler := connect.NewUnaryHandler(
		AdminServiceDeleteProjectAttributesProcedure,
		svc.DeleteProjectAttributes,
		connect.WithSchema(adminServiceDeleteProjectAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateWorkflowAttributesHandler := connect.NewUnaryHandler(
		AdminServiceUpdateWorkflowAttributesProcedure,
		svc.UpdateWorkflowAttributes,
		connect.WithSchema(adminServiceUpdateWorkflowAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetWorkflowAttributesHandler := connect.NewUnaryHandler(
		AdminServiceGetWorkflowAttributesProcedure,
		svc.GetWorkflowAttributes,
		connect.WithSchema(adminServiceGetWorkflowAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteWorkflowAttributesHandler := connect.NewUnaryHandler(
		AdminServiceDeleteWorkflowAttributesProcedure,
		svc.DeleteWorkflowAttributes,
		connect.WithSchema(adminServiceDeleteWorkflowAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListMatchableAttributesHandler := connect.NewUnaryHandler(
		AdminServiceListMatchableAttributesProcedure,
		svc.ListMatchableAttributes,
		connect.WithSchema(adminServiceListMatchableAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListNamedEntitiesHandler := connect.NewUnaryHandler(
		AdminServiceListNamedEntitiesProcedure,
		svc.ListNamedEntities,
		connect.WithSchema(adminServiceListNamedEntitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetNamedEntityHandler := connect.NewUnaryHandler(
		AdminServiceGetNamedEntityProcedure,
		svc.GetNamedEntity,
		connect.WithSchema(adminServiceGetNamedEntityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateNamedEntityHandler := connect.NewUnaryHandler(
		AdminServiceUpdateNamedEntityProcedure,
		svc.UpdateNamedEntity,
		connect.WithSchema(adminServiceUpdateNamedEntityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetVersionHandler := connect.NewUnaryHandler(
		AdminServiceGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(adminServiceGetVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetDescriptionEntityHandler := connect.NewUnaryHandler(
		AdminServiceGetDescriptionEntityProcedure,
		svc.GetDescriptionEntity,
		connect.WithSchema(adminServiceGetDescriptionEntityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListDescriptionEntitiesHandler := connect.NewUnaryHandler(
		AdminServiceListDescriptionEntitiesProcedure,
		svc.ListDescriptionEntities,
		connect.WithSchema(adminServiceListDescriptionEntitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetExecutionMetricsHandler := connect.NewUnaryHandler(
		AdminServiceGetExecutionMetricsProcedure,
		svc.GetExecutionMetrics,
		connect.WithSchema(adminServiceGetExecutionMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.service.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceCreateTaskProcedure:
			adminServiceCreateTaskHandler.ServeHTTP(w, r)
		case AdminServiceGetTaskProcedure:
			adminServiceGetTaskHandler.ServeHTTP(w, r)
		case AdminServiceListTaskIdsProcedure:
			adminServiceListTaskIdsHandler.ServeHTTP(w, r)
		case AdminServiceListTasksProcedure:
			adminServiceListTasksHandler.ServeHTTP(w, r)
		case AdminServiceCreateWorkflowProcedure:
			adminServiceCreateWorkflowHandler.ServeHTTP(w, r)
		case AdminServiceGetWorkflowProcedure:
			adminServiceGetWorkflowHandler.ServeHTTP(w, r)
		case AdminServiceListWorkflowIdsProcedure:
			adminServiceListWorkflowIdsHandler.ServeHTTP(w, r)
		case AdminServiceListWorkflowsProcedure:
			adminServiceListWorkflowsHandler.ServeHTTP(w, r)
		case AdminServiceCreateLaunchPlanProcedure:
			adminServiceCreateLaunchPlanHandler.ServeHTTP(w, r)
		case AdminServiceGetLaunchPlanProcedure:
			adminServiceGetLaunchPlanHandler.ServeHTTP(w, r)
		case AdminServiceGetActiveLaunchPlanProcedure:
			adminServiceGetActiveLaunchPlanHandler.ServeHTTP(w, r)
		case AdminServiceListActiveLaunchPlansProcedure:
			adminServiceListActiveLaunchPlansHandler.ServeHTTP(w, r)
		case AdminServiceListLaunchPlanIdsProcedure:
			adminServiceListLaunchPlanIdsHandler.ServeHTTP(w, r)
		case AdminServiceListLaunchPlansProcedure:
			adminServiceListLaunchPlansHandler.ServeHTTP(w, r)
		case AdminServiceUpdateLaunchPlanProcedure:
			adminServiceUpdateLaunchPlanHandler.ServeHTTP(w, r)
		case AdminServiceCreateExecutionProcedure:
			adminServiceCreateExecutionHandler.ServeHTTP(w, r)
		case AdminServiceRelaunchExecutionProcedure:
			adminServiceRelaunchExecutionHandler.ServeHTTP(w, r)
		case AdminServiceRecoverExecutionProcedure:
			adminServiceRecoverExecutionHandler.ServeHTTP(w, r)
		case AdminServiceGetExecutionProcedure:
			adminServiceGetExecutionHandler.ServeHTTP(w, r)
		case AdminServiceUpdateExecutionProcedure:
			adminServiceUpdateExecutionHandler.ServeHTTP(w, r)
		case AdminServiceGetExecutionDataProcedure:
			adminServiceGetExecutionDataHandler.ServeHTTP(w, r)
		case AdminServiceListExecutionsProcedure:
			adminServiceListExecutionsHandler.ServeHTTP(w, r)
		case AdminServiceTerminateExecutionProcedure:
			adminServiceTerminateExecutionHandler.ServeHTTP(w, r)
		case AdminServiceGetNodeExecutionProcedure:
			adminServiceGetNodeExecutionHandler.ServeHTTP(w, r)
		case AdminServiceGetDynamicNodeWorkflowProcedure:
			adminServiceGetDynamicNodeWorkflowHandler.ServeHTTP(w, r)
		case AdminServiceListNodeExecutionsProcedure:
			adminServiceListNodeExecutionsHandler.ServeHTTP(w, r)
		case AdminServiceListNodeExecutionsForTaskProcedure:
			adminServiceListNodeExecutionsForTaskHandler.ServeHTTP(w, r)
		case AdminServiceGetNodeExecutionDataProcedure:
			adminServiceGetNodeExecutionDataHandler.ServeHTTP(w, r)
		case AdminServiceRegisterProjectProcedure:
			adminServiceRegisterProjectHandler.ServeHTTP(w, r)
		case AdminServiceUpdateProjectProcedure:
			adminServiceUpdateProjectHandler.ServeHTTP(w, r)
		case AdminServiceListProjectsProcedure:
			adminServiceListProjectsHandler.ServeHTTP(w, r)
		case AdminServiceCreateWorkflowEventProcedure:
			adminServiceCreateWorkflowEventHandler.ServeHTTP(w, r)
		case AdminServiceCreateNodeEventProcedure:
			adminServiceCreateNodeEventHandler.ServeHTTP(w, r)
		case AdminServiceCreateTaskEventProcedure:
			adminServiceCreateTaskEventHandler.ServeHTTP(w, r)
		case AdminServiceGetTaskExecutionProcedure:
			adminServiceGetTaskExecutionHandler.ServeHTTP(w, r)
		case AdminServiceListTaskExecutionsProcedure:
			adminServiceListTaskExecutionsHandler.ServeHTTP(w, r)
		case AdminServiceGetTaskExecutionDataProcedure:
			adminServiceGetTaskExecutionDataHandler.ServeHTTP(w, r)
		case AdminServiceUpdateProjectDomainAttributesProcedure:
			adminServiceUpdateProjectDomainAttributesHandler.ServeHTTP(w, r)
		case AdminServiceGetProjectDomainAttributesProcedure:
			adminServiceGetProjectDomainAttributesHandler.ServeHTTP(w, r)
		case AdminServiceDeleteProjectDomainAttributesProcedure:
			adminServiceDeleteProjectDomainAttributesHandler.ServeHTTP(w, r)
		case AdminServiceUpdateProjectAttributesProcedure:
			adminServiceUpdateProjectAttributesHandler.ServeHTTP(w, r)
		case AdminServiceGetProjectAttributesProcedure:
			adminServiceGetProjectAttributesHandler.ServeHTTP(w, r)
		case AdminServiceDeleteProjectAttributesProcedure:
			adminServiceDeleteProjectAttributesHandler.ServeHTTP(w, r)
		case AdminServiceUpdateWorkflowAttributesProcedure:
			adminServiceUpdateWorkflowAttributesHandler.ServeHTTP(w, r)
		case AdminServiceGetWorkflowAttributesProcedure:
			adminServiceGetWorkflowAttributesHandler.ServeHTTP(w, r)
		case AdminServiceDeleteWorkflowAttributesProcedure:
			adminServiceDeleteWorkflowAttributesHandler.ServeHTTP(w, r)
		case AdminServiceListMatchableAttributesProcedure:
			adminServiceListMatchableAttributesHandler.ServeHTTP(w, r)
		case AdminServiceListNamedEntitiesProcedure:
			adminServiceListNamedEntitiesHandler.ServeHTTP(w, r)
		case AdminServiceGetNamedEntityProcedure:
			adminServiceGetNamedEntityHandler.ServeHTTP(w, r)
		case AdminServiceUpdateNamedEntityProcedure:
			adminServiceUpdateNamedEntityHandler.ServeHTTP(w, r)
		case AdminServiceGetVersionProcedure:
			adminServiceGetVersionHandler.ServeHTTP(w, r)
		case AdminServiceGetDescriptionEntityProcedure:
			adminServiceGetDescriptionEntityHandler.ServeHTTP(w, r)
		case AdminServiceListDescriptionEntitiesProcedure:
			adminServiceListDescriptionEntitiesHandler.ServeHTTP(w, r)
		case AdminServiceGetExecutionMetricsProcedure:
			adminServiceGetExecutionMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) CreateTask(context.Context, *connect.Request[admin.TaskCreateRequest]) (*connect.Response[admin.TaskCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.CreateTask is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetTask(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetTask is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListTaskIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListTaskIds is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListTasks(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.TaskList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListTasks is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateWorkflow(context.Context, *connect.Request[admin.WorkflowCreateRequest]) (*connect.Response[admin.WorkflowCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.CreateWorkflow is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetWorkflow(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.Workflow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetWorkflow is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListWorkflowIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListWorkflowIds is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListWorkflows(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.WorkflowList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListWorkflows is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateLaunchPlan(context.Context, *connect.Request[admin.LaunchPlanCreateRequest]) (*connect.Response[admin.LaunchPlanCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.CreateLaunchPlan is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetLaunchPlan(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.LaunchPlan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetLaunchPlan is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetActiveLaunchPlan(context.Context, *connect.Request[admin.ActiveLaunchPlanRequest]) (*connect.Response[admin.LaunchPlan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetActiveLaunchPlan is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListActiveLaunchPlans(context.Context, *connect.Request[admin.ActiveLaunchPlanListRequest]) (*connect.Response[admin.LaunchPlanList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListActiveLaunchPlans is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListLaunchPlanIds(context.Context, *connect.Request[admin.NamedEntityIdentifierListRequest]) (*connect.Response[admin.NamedEntityIdentifierList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListLaunchPlanIds is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListLaunchPlans(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.LaunchPlanList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListLaunchPlans is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateLaunchPlan(context.Context, *connect.Request[admin.LaunchPlanUpdateRequest]) (*connect.Response[admin.LaunchPlanUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.UpdateLaunchPlan is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateExecution(context.Context, *connect.Request[admin.ExecutionCreateRequest]) (*connect.Response[admin.ExecutionCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.CreateExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) RelaunchExecution(context.Context, *connect.Request[admin.ExecutionRelaunchRequest]) (*connect.Response[admin.ExecutionCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.RelaunchExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) RecoverExecution(context.Context, *connect.Request[admin.ExecutionRecoverRequest]) (*connect.Response[admin.ExecutionCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.RecoverExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetExecution(context.Context, *connect.Request[admin.WorkflowExecutionGetRequest]) (*connect.Response[admin.Execution], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateExecution(context.Context, *connect.Request[admin.ExecutionUpdateRequest]) (*connect.Response[admin.ExecutionUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.UpdateExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetExecutionData(context.Context, *connect.Request[admin.WorkflowExecutionGetDataRequest]) (*connect.Response[admin.WorkflowExecutionGetDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetExecutionData is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListExecutions(context.Context, *connect.Request[admin.ResourceListRequest]) (*connect.Response[admin.ExecutionList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListExecutions is not implemented"))
}

func (UnimplementedAdminServiceHandler) TerminateExecution(context.Context, *connect.Request[admin.ExecutionTerminateRequest]) (*connect.Response[admin.ExecutionTerminateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.TerminateExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetNodeExecution(context.Context, *connect.Request[admin.NodeExecutionGetRequest]) (*connect.Response[admin.NodeExecution], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetNodeExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDynamicNodeWorkflow(context.Context, *connect.Request[admin.GetDynamicNodeWorkflowRequest]) (*connect.Response[admin.DynamicNodeWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetDynamicNodeWorkflow is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListNodeExecutions(context.Context, *connect.Request[admin.NodeExecutionListRequest]) (*connect.Response[admin.NodeExecutionList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListNodeExecutions is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListNodeExecutionsForTask(context.Context, *connect.Request[admin.NodeExecutionForTaskListRequest]) (*connect.Response[admin.NodeExecutionList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListNodeExecutionsForTask is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetNodeExecutionData(context.Context, *connect.Request[admin.NodeExecutionGetDataRequest]) (*connect.Response[admin.NodeExecutionGetDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetNodeExecutionData is not implemented"))
}

func (UnimplementedAdminServiceHandler) RegisterProject(context.Context, *connect.Request[admin.ProjectRegisterRequest]) (*connect.Response[admin.ProjectRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.RegisterProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateProject(context.Context, *connect.Request[admin.Project]) (*connect.Response[admin.ProjectUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.UpdateProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProjects(context.Context, *connect.Request[admin.ProjectListRequest]) (*connect.Response[admin.Projects], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListProjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateWorkflowEvent(context.Context, *connect.Request[admin.WorkflowExecutionEventRequest]) (*connect.Response[admin.WorkflowExecutionEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.CreateWorkflowEvent is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateNodeEvent(context.Context, *connect.Request[admin.NodeExecutionEventRequest]) (*connect.Response[admin.NodeExecutionEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.CreateNodeEvent is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateTaskEvent(context.Context, *connect.Request[admin.TaskExecutionEventRequest]) (*connect.Response[admin.TaskExecutionEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.CreateTaskEvent is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetTaskExecution(context.Context, *connect.Request[admin.TaskExecutionGetRequest]) (*connect.Response[admin.TaskExecution], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetTaskExecution is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListTaskExecutions(context.Context, *connect.Request[admin.TaskExecutionListRequest]) (*connect.Response[admin.TaskExecutionList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListTaskExecutions is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetTaskExecutionData(context.Context, *connect.Request[admin.TaskExecutionGetDataRequest]) (*connect.Response[admin.TaskExecutionGetDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetTaskExecutionData is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesUpdateRequest]) (*connect.Response[admin.ProjectDomainAttributesUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.UpdateProjectDomainAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesGetRequest]) (*connect.Response[admin.ProjectDomainAttributesGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetProjectDomainAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteProjectDomainAttributes(context.Context, *connect.Request[admin.ProjectDomainAttributesDeleteRequest]) (*connect.Response[admin.ProjectDomainAttributesDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.DeleteProjectDomainAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesUpdateRequest]) (*connect.Response[admin.ProjectAttributesUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.UpdateProjectAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesGetRequest]) (*connect.Response[admin.ProjectAttributesGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetProjectAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteProjectAttributes(context.Context, *connect.Request[admin.ProjectAttributesDeleteRequest]) (*connect.Response[admin.ProjectAttributesDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.DeleteProjectAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesUpdateRequest]) (*connect.Response[admin.WorkflowAttributesUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.UpdateWorkflowAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesGetRequest]) (*connect.Response[admin.WorkflowAttributesGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetWorkflowAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteWorkflowAttributes(context.Context, *connect.Request[admin.WorkflowAttributesDeleteRequest]) (*connect.Response[admin.WorkflowAttributesDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.DeleteWorkflowAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListMatchableAttributes(context.Context, *connect.Request[admin.ListMatchableAttributesRequest]) (*connect.Response[admin.ListMatchableAttributesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListMatchableAttributes is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListNamedEntities(context.Context, *connect.Request[admin.NamedEntityListRequest]) (*connect.Response[admin.NamedEntityList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListNamedEntities is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetNamedEntity(context.Context, *connect.Request[admin.NamedEntityGetRequest]) (*connect.Response[admin.NamedEntity], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetNamedEntity is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateNamedEntity(context.Context, *connect.Request[admin.NamedEntityUpdateRequest]) (*connect.Response[admin.NamedEntityUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.UpdateNamedEntity is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetVersion(context.Context, *connect.Request[admin.GetVersionRequest]) (*connect.Response[admin.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetVersion is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDescriptionEntity(context.Context, *connect.Request[admin.ObjectGetRequest]) (*connect.Response[admin.DescriptionEntity], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetDescriptionEntity is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListDescriptionEntities(context.Context, *connect.Request[admin.DescriptionEntityListRequest]) (*connect.Response[admin.DescriptionEntityList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.ListDescriptionEntities is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetExecutionMetrics(context.Context, *connect.Request[admin.WorkflowExecutionGetMetricsRequest]) (*connect.Response[admin.WorkflowExecutionGetMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AdminService.GetExecutionMetrics is not implemented"))
}
