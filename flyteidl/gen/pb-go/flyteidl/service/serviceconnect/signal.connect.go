// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl/service/signal.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"
	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SignalServiceName is the fully-qualified name of the SignalService service.
	SignalServiceName = "flyteidl.service.SignalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SignalServiceGetOrCreateSignalProcedure is the fully-qualified name of the SignalService's
	// GetOrCreateSignal RPC.
	SignalServiceGetOrCreateSignalProcedure = "/flyteidl.service.SignalService/GetOrCreateSignal"
	// SignalServiceListSignalsProcedure is the fully-qualified name of the SignalService's ListSignals
	// RPC.
	SignalServiceListSignalsProcedure = "/flyteidl.service.SignalService/ListSignals"
	// SignalServiceSetSignalProcedure is the fully-qualified name of the SignalService's SetSignal RPC.
	SignalServiceSetSignalProcedure = "/flyteidl.service.SignalService/SetSignal"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	signalServiceServiceDescriptor                 = service.File_flyteidl_service_signal_proto.Services().ByName("SignalService")
	signalServiceGetOrCreateSignalMethodDescriptor = signalServiceServiceDescriptor.Methods().ByName("GetOrCreateSignal")
	signalServiceListSignalsMethodDescriptor       = signalServiceServiceDescriptor.Methods().ByName("ListSignals")
	signalServiceSetSignalMethodDescriptor         = signalServiceServiceDescriptor.Methods().ByName("SetSignal")
)

// SignalServiceClient is a client for the flyteidl.service.SignalService service.
type SignalServiceClient interface {
	// Fetches or creates a :ref:`ref_flyteidl.admin.Signal`.
	GetOrCreateSignal(context.Context, *connect.Request[admin.SignalGetOrCreateRequest]) (*connect.Response[admin.Signal], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Signal` definitions.
	ListSignals(context.Context, *connect.Request[admin.SignalListRequest]) (*connect.Response[admin.SignalList], error)
	// Sets the value on a :ref:`ref_flyteidl.admin.Signal` definition
	SetSignal(context.Context, *connect.Request[admin.SignalSetRequest]) (*connect.Response[admin.SignalSetResponse], error)
}

// NewSignalServiceClient constructs a client for the flyteidl.service.SignalService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSignalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SignalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &signalServiceClient{
		getOrCreateSignal: connect.NewClient[admin.SignalGetOrCreateRequest, admin.Signal](
			httpClient,
			baseURL+SignalServiceGetOrCreateSignalProcedure,
			connect.WithSchema(signalServiceGetOrCreateSignalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSignals: connect.NewClient[admin.SignalListRequest, admin.SignalList](
			httpClient,
			baseURL+SignalServiceListSignalsProcedure,
			connect.WithSchema(signalServiceListSignalsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSignal: connect.NewClient[admin.SignalSetRequest, admin.SignalSetResponse](
			httpClient,
			baseURL+SignalServiceSetSignalProcedure,
			connect.WithSchema(signalServiceSetSignalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// signalServiceClient implements SignalServiceClient.
type signalServiceClient struct {
	getOrCreateSignal *connect.Client[admin.SignalGetOrCreateRequest, admin.Signal]
	listSignals       *connect.Client[admin.SignalListRequest, admin.SignalList]
	setSignal         *connect.Client[admin.SignalSetRequest, admin.SignalSetResponse]
}

// GetOrCreateSignal calls flyteidl.service.SignalService.GetOrCreateSignal.
func (c *signalServiceClient) GetOrCreateSignal(ctx context.Context, req *connect.Request[admin.SignalGetOrCreateRequest]) (*connect.Response[admin.Signal], error) {
	return c.getOrCreateSignal.CallUnary(ctx, req)
}

// ListSignals calls flyteidl.service.SignalService.ListSignals.
func (c *signalServiceClient) ListSignals(ctx context.Context, req *connect.Request[admin.SignalListRequest]) (*connect.Response[admin.SignalList], error) {
	return c.listSignals.CallUnary(ctx, req)
}

// SetSignal calls flyteidl.service.SignalService.SetSignal.
func (c *signalServiceClient) SetSignal(ctx context.Context, req *connect.Request[admin.SignalSetRequest]) (*connect.Response[admin.SignalSetResponse], error) {
	return c.setSignal.CallUnary(ctx, req)
}

// SignalServiceHandler is an implementation of the flyteidl.service.SignalService service.
type SignalServiceHandler interface {
	// Fetches or creates a :ref:`ref_flyteidl.admin.Signal`.
	GetOrCreateSignal(context.Context, *connect.Request[admin.SignalGetOrCreateRequest]) (*connect.Response[admin.Signal], error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Signal` definitions.
	ListSignals(context.Context, *connect.Request[admin.SignalListRequest]) (*connect.Response[admin.SignalList], error)
	// Sets the value on a :ref:`ref_flyteidl.admin.Signal` definition
	SetSignal(context.Context, *connect.Request[admin.SignalSetRequest]) (*connect.Response[admin.SignalSetResponse], error)
}

// NewSignalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSignalServiceHandler(svc SignalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	signalServiceGetOrCreateSignalHandler := connect.NewUnaryHandler(
		SignalServiceGetOrCreateSignalProcedure,
		svc.GetOrCreateSignal,
		connect.WithSchema(signalServiceGetOrCreateSignalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	signalServiceListSignalsHandler := connect.NewUnaryHandler(
		SignalServiceListSignalsProcedure,
		svc.ListSignals,
		connect.WithSchema(signalServiceListSignalsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	signalServiceSetSignalHandler := connect.NewUnaryHandler(
		SignalServiceSetSignalProcedure,
		svc.SetSignal,
		connect.WithSchema(signalServiceSetSignalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.service.SignalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SignalServiceGetOrCreateSignalProcedure:
			signalServiceGetOrCreateSignalHandler.ServeHTTP(w, r)
		case SignalServiceListSignalsProcedure:
			signalServiceListSignalsHandler.ServeHTTP(w, r)
		case SignalServiceSetSignalProcedure:
			signalServiceSetSignalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSignalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSignalServiceHandler struct{}

func (UnimplementedSignalServiceHandler) GetOrCreateSignal(context.Context, *connect.Request[admin.SignalGetOrCreateRequest]) (*connect.Response[admin.Signal], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.SignalService.GetOrCreateSignal is not implemented"))
}

func (UnimplementedSignalServiceHandler) ListSignals(context.Context, *connect.Request[admin.SignalListRequest]) (*connect.Response[admin.SignalList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.SignalService.ListSignals is not implemented"))
}

func (UnimplementedSignalServiceHandler) SetSignal(context.Context, *connect.Request[admin.SignalSetRequest]) (*connect.Response[admin.SignalSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.SignalService.SetSignal is not implemented"))
}
