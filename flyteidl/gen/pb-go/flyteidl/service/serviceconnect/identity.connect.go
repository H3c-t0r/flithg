// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl/service/identity.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IdentityServiceName is the fully-qualified name of the IdentityService service.
	IdentityServiceName = "flyteidl.service.IdentityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityServiceUserInfoProcedure is the fully-qualified name of the IdentityService's UserInfo
	// RPC.
	IdentityServiceUserInfoProcedure = "/flyteidl.service.IdentityService/UserInfo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	identityServiceServiceDescriptor        = service.File_flyteidl_service_identity_proto.Services().ByName("IdentityService")
	identityServiceUserInfoMethodDescriptor = identityServiceServiceDescriptor.Methods().ByName("UserInfo")
)

// IdentityServiceClient is a client for the flyteidl.service.IdentityService service.
type IdentityServiceClient interface {
	// Retrieves user information about the currently logged in user.
	UserInfo(context.Context, *connect.Request[service.UserInfoRequest]) (*connect.Response[service.UserInfoResponse], error)
}

// NewIdentityServiceClient constructs a client for the flyteidl.service.IdentityService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &identityServiceClient{
		userInfo: connect.NewClient[service.UserInfoRequest, service.UserInfoResponse](
			httpClient,
			baseURL+IdentityServiceUserInfoProcedure,
			connect.WithSchema(identityServiceUserInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// identityServiceClient implements IdentityServiceClient.
type identityServiceClient struct {
	userInfo *connect.Client[service.UserInfoRequest, service.UserInfoResponse]
}

// UserInfo calls flyteidl.service.IdentityService.UserInfo.
func (c *identityServiceClient) UserInfo(ctx context.Context, req *connect.Request[service.UserInfoRequest]) (*connect.Response[service.UserInfoResponse], error) {
	return c.userInfo.CallUnary(ctx, req)
}

// IdentityServiceHandler is an implementation of the flyteidl.service.IdentityService service.
type IdentityServiceHandler interface {
	// Retrieves user information about the currently logged in user.
	UserInfo(context.Context, *connect.Request[service.UserInfoRequest]) (*connect.Response[service.UserInfoResponse], error)
}

// NewIdentityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityServiceHandler(svc IdentityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityServiceUserInfoHandler := connect.NewUnaryHandler(
		IdentityServiceUserInfoProcedure,
		svc.UserInfo,
		connect.WithSchema(identityServiceUserInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.service.IdentityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityServiceUserInfoProcedure:
			identityServiceUserInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityServiceHandler struct{}

func (UnimplementedIdentityServiceHandler) UserInfo(context.Context, *connect.Request[service.UserInfoRequest]) (*connect.Response[service.UserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.IdentityService.UserInfo is not implemented"))
}
