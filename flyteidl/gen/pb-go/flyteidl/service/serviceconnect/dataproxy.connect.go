// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl/service/dataproxy.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataProxyServiceName is the fully-qualified name of the DataProxyService service.
	DataProxyServiceName = "flyteidl.service.DataProxyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataProxyServiceCreateUploadLocationProcedure is the fully-qualified name of the
	// DataProxyService's CreateUploadLocation RPC.
	DataProxyServiceCreateUploadLocationProcedure = "/flyteidl.service.DataProxyService/CreateUploadLocation"
	// DataProxyServiceCreateDownloadLocationProcedure is the fully-qualified name of the
	// DataProxyService's CreateDownloadLocation RPC.
	DataProxyServiceCreateDownloadLocationProcedure = "/flyteidl.service.DataProxyService/CreateDownloadLocation"
	// DataProxyServiceCreateDownloadLinkProcedure is the fully-qualified name of the DataProxyService's
	// CreateDownloadLink RPC.
	DataProxyServiceCreateDownloadLinkProcedure = "/flyteidl.service.DataProxyService/CreateDownloadLink"
	// DataProxyServiceGetDataProcedure is the fully-qualified name of the DataProxyService's GetData
	// RPC.
	DataProxyServiceGetDataProcedure = "/flyteidl.service.DataProxyService/GetData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dataProxyServiceServiceDescriptor                      = service.File_flyteidl_service_dataproxy_proto.Services().ByName("DataProxyService")
	dataProxyServiceCreateUploadLocationMethodDescriptor   = dataProxyServiceServiceDescriptor.Methods().ByName("CreateUploadLocation")
	dataProxyServiceCreateDownloadLocationMethodDescriptor = dataProxyServiceServiceDescriptor.Methods().ByName("CreateDownloadLocation")
	dataProxyServiceCreateDownloadLinkMethodDescriptor     = dataProxyServiceServiceDescriptor.Methods().ByName("CreateDownloadLink")
	dataProxyServiceGetDataMethodDescriptor                = dataProxyServiceServiceDescriptor.Methods().ByName("GetData")
)

// DataProxyServiceClient is a client for the flyteidl.service.DataProxyService service.
type DataProxyServiceClient interface {
	// CreateUploadLocation creates a signed url to upload artifacts to for a given project/domain.
	CreateUploadLocation(context.Context, *connect.Request[service.CreateUploadLocationRequest]) (*connect.Response[service.CreateUploadLocationResponse], error)
	// CreateDownloadLocation creates a signed url to download artifacts.
	//
	// Deprecated: do not use.
	CreateDownloadLocation(context.Context, *connect.Request[service.CreateDownloadLocationRequest]) (*connect.Response[service.CreateDownloadLocationResponse], error)
	// CreateDownloadLocation creates a signed url to download artifacts.
	CreateDownloadLink(context.Context, *connect.Request[service.CreateDownloadLinkRequest]) (*connect.Response[service.CreateDownloadLinkResponse], error)
	GetData(context.Context, *connect.Request[service.GetDataRequest]) (*connect.Response[service.GetDataResponse], error)
}

// NewDataProxyServiceClient constructs a client for the flyteidl.service.DataProxyService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataProxyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataProxyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dataProxyServiceClient{
		createUploadLocation: connect.NewClient[service.CreateUploadLocationRequest, service.CreateUploadLocationResponse](
			httpClient,
			baseURL+DataProxyServiceCreateUploadLocationProcedure,
			connect.WithSchema(dataProxyServiceCreateUploadLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDownloadLocation: connect.NewClient[service.CreateDownloadLocationRequest, service.CreateDownloadLocationResponse](
			httpClient,
			baseURL+DataProxyServiceCreateDownloadLocationProcedure,
			connect.WithSchema(dataProxyServiceCreateDownloadLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDownloadLink: connect.NewClient[service.CreateDownloadLinkRequest, service.CreateDownloadLinkResponse](
			httpClient,
			baseURL+DataProxyServiceCreateDownloadLinkProcedure,
			connect.WithSchema(dataProxyServiceCreateDownloadLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getData: connect.NewClient[service.GetDataRequest, service.GetDataResponse](
			httpClient,
			baseURL+DataProxyServiceGetDataProcedure,
			connect.WithSchema(dataProxyServiceGetDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataProxyServiceClient implements DataProxyServiceClient.
type dataProxyServiceClient struct {
	createUploadLocation   *connect.Client[service.CreateUploadLocationRequest, service.CreateUploadLocationResponse]
	createDownloadLocation *connect.Client[service.CreateDownloadLocationRequest, service.CreateDownloadLocationResponse]
	createDownloadLink     *connect.Client[service.CreateDownloadLinkRequest, service.CreateDownloadLinkResponse]
	getData                *connect.Client[service.GetDataRequest, service.GetDataResponse]
}

// CreateUploadLocation calls flyteidl.service.DataProxyService.CreateUploadLocation.
func (c *dataProxyServiceClient) CreateUploadLocation(ctx context.Context, req *connect.Request[service.CreateUploadLocationRequest]) (*connect.Response[service.CreateUploadLocationResponse], error) {
	return c.createUploadLocation.CallUnary(ctx, req)
}

// CreateDownloadLocation calls flyteidl.service.DataProxyService.CreateDownloadLocation.
//
// Deprecated: do not use.
func (c *dataProxyServiceClient) CreateDownloadLocation(ctx context.Context, req *connect.Request[service.CreateDownloadLocationRequest]) (*connect.Response[service.CreateDownloadLocationResponse], error) {
	return c.createDownloadLocation.CallUnary(ctx, req)
}

// CreateDownloadLink calls flyteidl.service.DataProxyService.CreateDownloadLink.
func (c *dataProxyServiceClient) CreateDownloadLink(ctx context.Context, req *connect.Request[service.CreateDownloadLinkRequest]) (*connect.Response[service.CreateDownloadLinkResponse], error) {
	return c.createDownloadLink.CallUnary(ctx, req)
}

// GetData calls flyteidl.service.DataProxyService.GetData.
func (c *dataProxyServiceClient) GetData(ctx context.Context, req *connect.Request[service.GetDataRequest]) (*connect.Response[service.GetDataResponse], error) {
	return c.getData.CallUnary(ctx, req)
}

// DataProxyServiceHandler is an implementation of the flyteidl.service.DataProxyService service.
type DataProxyServiceHandler interface {
	// CreateUploadLocation creates a signed url to upload artifacts to for a given project/domain.
	CreateUploadLocation(context.Context, *connect.Request[service.CreateUploadLocationRequest]) (*connect.Response[service.CreateUploadLocationResponse], error)
	// CreateDownloadLocation creates a signed url to download artifacts.
	//
	// Deprecated: do not use.
	CreateDownloadLocation(context.Context, *connect.Request[service.CreateDownloadLocationRequest]) (*connect.Response[service.CreateDownloadLocationResponse], error)
	// CreateDownloadLocation creates a signed url to download artifacts.
	CreateDownloadLink(context.Context, *connect.Request[service.CreateDownloadLinkRequest]) (*connect.Response[service.CreateDownloadLinkResponse], error)
	GetData(context.Context, *connect.Request[service.GetDataRequest]) (*connect.Response[service.GetDataResponse], error)
}

// NewDataProxyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataProxyServiceHandler(svc DataProxyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataProxyServiceCreateUploadLocationHandler := connect.NewUnaryHandler(
		DataProxyServiceCreateUploadLocationProcedure,
		svc.CreateUploadLocation,
		connect.WithSchema(dataProxyServiceCreateUploadLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataProxyServiceCreateDownloadLocationHandler := connect.NewUnaryHandler(
		DataProxyServiceCreateDownloadLocationProcedure,
		svc.CreateDownloadLocation,
		connect.WithSchema(dataProxyServiceCreateDownloadLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataProxyServiceCreateDownloadLinkHandler := connect.NewUnaryHandler(
		DataProxyServiceCreateDownloadLinkProcedure,
		svc.CreateDownloadLink,
		connect.WithSchema(dataProxyServiceCreateDownloadLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataProxyServiceGetDataHandler := connect.NewUnaryHandler(
		DataProxyServiceGetDataProcedure,
		svc.GetData,
		connect.WithSchema(dataProxyServiceGetDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.service.DataProxyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataProxyServiceCreateUploadLocationProcedure:
			dataProxyServiceCreateUploadLocationHandler.ServeHTTP(w, r)
		case DataProxyServiceCreateDownloadLocationProcedure:
			dataProxyServiceCreateDownloadLocationHandler.ServeHTTP(w, r)
		case DataProxyServiceCreateDownloadLinkProcedure:
			dataProxyServiceCreateDownloadLinkHandler.ServeHTTP(w, r)
		case DataProxyServiceGetDataProcedure:
			dataProxyServiceGetDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataProxyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataProxyServiceHandler struct{}

func (UnimplementedDataProxyServiceHandler) CreateUploadLocation(context.Context, *connect.Request[service.CreateUploadLocationRequest]) (*connect.Response[service.CreateUploadLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.DataProxyService.CreateUploadLocation is not implemented"))
}

func (UnimplementedDataProxyServiceHandler) CreateDownloadLocation(context.Context, *connect.Request[service.CreateDownloadLocationRequest]) (*connect.Response[service.CreateDownloadLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.DataProxyService.CreateDownloadLocation is not implemented"))
}

func (UnimplementedDataProxyServiceHandler) CreateDownloadLink(context.Context, *connect.Request[service.CreateDownloadLinkRequest]) (*connect.Response[service.CreateDownloadLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.DataProxyService.CreateDownloadLink is not implemented"))
}

func (UnimplementedDataProxyServiceHandler) GetData(context.Context, *connect.Request[service.GetDataRequest]) (*connect.Response[service.GetDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.DataProxyService.GetData is not implemented"))
}
