// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl/service/auth.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthMetadataServiceName is the fully-qualified name of the AuthMetadataService service.
	AuthMetadataServiceName = "flyteidl.service.AuthMetadataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthMetadataServiceGetOAuth2MetadataProcedure is the fully-qualified name of the
	// AuthMetadataService's GetOAuth2Metadata RPC.
	AuthMetadataServiceGetOAuth2MetadataProcedure = "/flyteidl.service.AuthMetadataService/GetOAuth2Metadata"
	// AuthMetadataServiceGetPublicClientConfigProcedure is the fully-qualified name of the
	// AuthMetadataService's GetPublicClientConfig RPC.
	AuthMetadataServiceGetPublicClientConfigProcedure = "/flyteidl.service.AuthMetadataService/GetPublicClientConfig"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authMetadataServiceServiceDescriptor                     = service.File_flyteidl_service_auth_proto.Services().ByName("AuthMetadataService")
	authMetadataServiceGetOAuth2MetadataMethodDescriptor     = authMetadataServiceServiceDescriptor.Methods().ByName("GetOAuth2Metadata")
	authMetadataServiceGetPublicClientConfigMethodDescriptor = authMetadataServiceServiceDescriptor.Methods().ByName("GetPublicClientConfig")
)

// AuthMetadataServiceClient is a client for the flyteidl.service.AuthMetadataService service.
type AuthMetadataServiceClient interface {
	// Anonymously accessible. Retrieves local or external oauth authorization server metadata.
	GetOAuth2Metadata(context.Context, *connect.Request[service.OAuth2MetadataRequest]) (*connect.Response[service.OAuth2MetadataResponse], error)
	// Anonymously accessible. Retrieves the client information clients should use when initiating OAuth2 authorization
	// requests.
	GetPublicClientConfig(context.Context, *connect.Request[service.PublicClientAuthConfigRequest]) (*connect.Response[service.PublicClientAuthConfigResponse], error)
}

// NewAuthMetadataServiceClient constructs a client for the flyteidl.service.AuthMetadataService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthMetadataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthMetadataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authMetadataServiceClient{
		getOAuth2Metadata: connect.NewClient[service.OAuth2MetadataRequest, service.OAuth2MetadataResponse](
			httpClient,
			baseURL+AuthMetadataServiceGetOAuth2MetadataProcedure,
			connect.WithSchema(authMetadataServiceGetOAuth2MetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPublicClientConfig: connect.NewClient[service.PublicClientAuthConfigRequest, service.PublicClientAuthConfigResponse](
			httpClient,
			baseURL+AuthMetadataServiceGetPublicClientConfigProcedure,
			connect.WithSchema(authMetadataServiceGetPublicClientConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authMetadataServiceClient implements AuthMetadataServiceClient.
type authMetadataServiceClient struct {
	getOAuth2Metadata     *connect.Client[service.OAuth2MetadataRequest, service.OAuth2MetadataResponse]
	getPublicClientConfig *connect.Client[service.PublicClientAuthConfigRequest, service.PublicClientAuthConfigResponse]
}

// GetOAuth2Metadata calls flyteidl.service.AuthMetadataService.GetOAuth2Metadata.
func (c *authMetadataServiceClient) GetOAuth2Metadata(ctx context.Context, req *connect.Request[service.OAuth2MetadataRequest]) (*connect.Response[service.OAuth2MetadataResponse], error) {
	return c.getOAuth2Metadata.CallUnary(ctx, req)
}

// GetPublicClientConfig calls flyteidl.service.AuthMetadataService.GetPublicClientConfig.
func (c *authMetadataServiceClient) GetPublicClientConfig(ctx context.Context, req *connect.Request[service.PublicClientAuthConfigRequest]) (*connect.Response[service.PublicClientAuthConfigResponse], error) {
	return c.getPublicClientConfig.CallUnary(ctx, req)
}

// AuthMetadataServiceHandler is an implementation of the flyteidl.service.AuthMetadataService
// service.
type AuthMetadataServiceHandler interface {
	// Anonymously accessible. Retrieves local or external oauth authorization server metadata.
	GetOAuth2Metadata(context.Context, *connect.Request[service.OAuth2MetadataRequest]) (*connect.Response[service.OAuth2MetadataResponse], error)
	// Anonymously accessible. Retrieves the client information clients should use when initiating OAuth2 authorization
	// requests.
	GetPublicClientConfig(context.Context, *connect.Request[service.PublicClientAuthConfigRequest]) (*connect.Response[service.PublicClientAuthConfigResponse], error)
}

// NewAuthMetadataServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthMetadataServiceHandler(svc AuthMetadataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authMetadataServiceGetOAuth2MetadataHandler := connect.NewUnaryHandler(
		AuthMetadataServiceGetOAuth2MetadataProcedure,
		svc.GetOAuth2Metadata,
		connect.WithSchema(authMetadataServiceGetOAuth2MetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authMetadataServiceGetPublicClientConfigHandler := connect.NewUnaryHandler(
		AuthMetadataServiceGetPublicClientConfigProcedure,
		svc.GetPublicClientConfig,
		connect.WithSchema(authMetadataServiceGetPublicClientConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.service.AuthMetadataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthMetadataServiceGetOAuth2MetadataProcedure:
			authMetadataServiceGetOAuth2MetadataHandler.ServeHTTP(w, r)
		case AuthMetadataServiceGetPublicClientConfigProcedure:
			authMetadataServiceGetPublicClientConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthMetadataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthMetadataServiceHandler struct{}

func (UnimplementedAuthMetadataServiceHandler) GetOAuth2Metadata(context.Context, *connect.Request[service.OAuth2MetadataRequest]) (*connect.Response[service.OAuth2MetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AuthMetadataService.GetOAuth2Metadata is not implemented"))
}

func (UnimplementedAuthMetadataServiceHandler) GetPublicClientConfig(context.Context, *connect.Request[service.PublicClientAuthConfigRequest]) (*connect.Response[service.PublicClientAuthConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.service.AuthMetadataService.GetPublicClientConfig is not implemented"))
}
