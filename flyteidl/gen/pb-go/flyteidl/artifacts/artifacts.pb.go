// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl/artifacts/artifacts.proto

package artifacts

import (
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	_ "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/event"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FindByWorkflowExecRequest_Direction int32

const (
	FindByWorkflowExecRequest_INPUTS  FindByWorkflowExecRequest_Direction = 0
	FindByWorkflowExecRequest_OUTPUTS FindByWorkflowExecRequest_Direction = 1
)

// Enum value maps for FindByWorkflowExecRequest_Direction.
var (
	FindByWorkflowExecRequest_Direction_name = map[int32]string{
		0: "INPUTS",
		1: "OUTPUTS",
	}
	FindByWorkflowExecRequest_Direction_value = map[string]int32{
		"INPUTS":  0,
		"OUTPUTS": 1,
	}
)

func (x FindByWorkflowExecRequest_Direction) Enum() *FindByWorkflowExecRequest_Direction {
	p := new(FindByWorkflowExecRequest_Direction)
	*p = x
	return p
}

func (x FindByWorkflowExecRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindByWorkflowExecRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_artifacts_artifacts_proto_enumTypes[0].Descriptor()
}

func (FindByWorkflowExecRequest_Direction) Type() protoreflect.EnumType {
	return &file_flyteidl_artifacts_artifacts_proto_enumTypes[0]
}

func (x FindByWorkflowExecRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindByWorkflowExecRequest_Direction.Descriptor instead.
func (FindByWorkflowExecRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{12, 0}
}

type Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId *core.ArtifactID `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	Spec       *ArtifactSpec    `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// references the tag field in ArtifactTag
	Tags     []string          `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Source   *ArtifactSource   `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Metadata *ArtifactMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{0}
}

func (x *Artifact) GetArtifactId() *core.ArtifactID {
	if x != nil {
		return x.ArtifactId
	}
	return nil
}

func (x *Artifact) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Artifact) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Artifact) GetSource() *ArtifactSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Artifact) GetMetadata() *ArtifactMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ArtifactMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// i.e. flyte://av0.1/org/project/domain/name
	// for now return without org but we're going to need to detect if there is an org there
	// this will support cross org serverless accounts (need to sanitize inputs, getting rid of any special characters)
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ArtifactMetadata) Reset() {
	*x = ArtifactMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactMetadata) ProtoMessage() {}

func (x *ArtifactMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactMetadata.ProtoReflect.Descriptor instead.
func (*ArtifactMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{1}
}

func (x *ArtifactMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ArtifactMetadata) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type CreateArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify just project/domain on creation
	ArtifactKey        *core.ArtifactKey      `protobuf:"bytes,1,opt,name=artifact_key,json=artifactKey,proto3" json:"artifact_key,omitempty"`
	Version            string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Spec               *ArtifactSpec          `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Partitions         map[string]string      `protobuf:"bytes,4,rep,name=partitions,proto3" json:"partitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimePartitionValue *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time_partition_value,json=timePartitionValue,proto3" json:"time_partition_value,omitempty"`
	Source             *ArtifactSource        `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CreateArtifactRequest) Reset() {
	*x = CreateArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtifactRequest) ProtoMessage() {}

func (x *CreateArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtifactRequest.ProtoReflect.Descriptor instead.
func (*CreateArtifactRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{2}
}

func (x *CreateArtifactRequest) GetArtifactKey() *core.ArtifactKey {
	if x != nil {
		return x.ArtifactKey
	}
	return nil
}

func (x *CreateArtifactRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateArtifactRequest) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CreateArtifactRequest) GetPartitions() map[string]string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *CreateArtifactRequest) GetTimePartitionValue() *timestamppb.Timestamp {
	if x != nil {
		return x.TimePartitionValue
	}
	return nil
}

func (x *CreateArtifactRequest) GetSource() *ArtifactSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type ArtifactSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowExecution *core.WorkflowExecutionIdentifier `protobuf:"bytes,1,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	NodeId            string                            `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TaskId            *core.Identifier                  `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	RetryAttempt      uint32                            `protobuf:"varint,4,opt,name=retry_attempt,json=retryAttempt,proto3" json:"retry_attempt,omitempty"`
	// Uploads, either from the UI or from the CLI, or FlyteRemote, will have this.
	Principal string `protobuf:"bytes,5,opt,name=principal,proto3" json:"principal,omitempty"`
}

func (x *ArtifactSource) Reset() {
	*x = ArtifactSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSource) ProtoMessage() {}

func (x *ArtifactSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSource.ProtoReflect.Descriptor instead.
func (*ArtifactSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{3}
}

func (x *ArtifactSource) GetWorkflowExecution() *core.WorkflowExecutionIdentifier {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ArtifactSource) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ArtifactSource) GetTaskId() *core.Identifier {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *ArtifactSource) GetRetryAttempt() uint32 {
	if x != nil {
		return x.RetryAttempt
	}
	return 0
}

func (x *ArtifactSource) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

type ArtifactSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *core.Literal `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// This type will not form part of the artifact key, so for user-named artifacts, if the user changes the type, but
	// forgets to change the name, that is okay. And the reason why this is a separate field is because adding the
	// type to all Literals is a lot of work.
	Type             *core.LiteralType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ShortDescription string            `protobuf:"bytes,3,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Additional user metadata
	UserMetadata *structpb.Struct `protobuf:"bytes,4,opt,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
}

func (x *ArtifactSpec) Reset() {
	*x = ArtifactSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSpec) ProtoMessage() {}

func (x *ArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSpec.ProtoReflect.Descriptor instead.
func (*ArtifactSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{4}
}

func (x *ArtifactSpec) GetValue() *core.Literal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ArtifactSpec) GetType() *core.LiteralType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ArtifactSpec) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *ArtifactSpec) GetUserMetadata() *structpb.Struct {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a partial artifact ID that will be triggered on
	Trigger       *core.ArtifactID   `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	TriggerInputs *core.ParameterMap `protobuf:"bytes,2,opt,name=trigger_inputs,json=triggerInputs,proto3" json:"trigger_inputs,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{5}
}

func (x *Trigger) GetTrigger() *core.ArtifactID {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Trigger) GetTriggerInputs() *core.ParameterMap {
	if x != nil {
		return x.TriggerInputs
	}
	return nil
}

type CreateArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact *Artifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *CreateArtifactResponse) Reset() {
	*x = CreateArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtifactResponse) ProtoMessage() {}

func (x *CreateArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtifactResponse.ProtoReflect.Descriptor instead.
func (*CreateArtifactResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{6}
}

func (x *CreateArtifactResponse) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type GetArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *core.ArtifactQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// If false, then long_description is not returned.
	Details bool `protobuf:"varint,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GetArtifactRequest) Reset() {
	*x = GetArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactRequest) ProtoMessage() {}

func (x *GetArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactRequest.ProtoReflect.Descriptor instead.
func (*GetArtifactRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{7}
}

func (x *GetArtifactRequest) GetQuery() *core.ArtifactQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetArtifactRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

type GetArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact *Artifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *GetArtifactResponse) Reset() {
	*x = GetArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactResponse) ProtoMessage() {}

func (x *GetArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactResponse.ProtoReflect.Descriptor instead.
func (*GetArtifactResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{8}
}

func (x *GetArtifactResponse) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type SearchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, this means a strict partition search. meaning if you don't specify the partition
	// field, that will mean, non-partitioned, rather than any partition.
	StrictPartitions bool `protobuf:"varint,1,opt,name=strict_partitions,json=strictPartitions,proto3" json:"strict_partitions,omitempty"`
	// If true, only one artifact per key will be returned. It will be the latest one by creation time.
	LatestByKey bool `protobuf:"varint,2,opt,name=latest_by_key,json=latestByKey,proto3" json:"latest_by_key,omitempty"`
}

func (x *SearchOptions) Reset() {
	*x = SearchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptions) ProtoMessage() {}

func (x *SearchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptions.ProtoReflect.Descriptor instead.
func (*SearchOptions) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{9}
}

func (x *SearchOptions) GetStrictPartitions() bool {
	if x != nil {
		return x.StrictPartitions
	}
	return false
}

func (x *SearchOptions) GetLatestByKey() bool {
	if x != nil {
		return x.LatestByKey
	}
	return false
}

type SearchArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactKey        *core.ArtifactKey      `protobuf:"bytes,1,opt,name=artifact_key,json=artifactKey,proto3" json:"artifact_key,omitempty"`
	Partitions         *core.Partitions       `protobuf:"bytes,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	TimePartitionValue *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_partition_value,json=timePartitionValue,proto3" json:"time_partition_value,omitempty"`
	Principal          string                 `protobuf:"bytes,4,opt,name=principal,proto3" json:"principal,omitempty"`
	Version            string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Options            *SearchOptions         `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	Token              string                 `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	Limit              int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchArtifactsRequest) Reset() {
	*x = SearchArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArtifactsRequest) ProtoMessage() {}

func (x *SearchArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArtifactsRequest.ProtoReflect.Descriptor instead.
func (*SearchArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{10}
}

func (x *SearchArtifactsRequest) GetArtifactKey() *core.ArtifactKey {
	if x != nil {
		return x.ArtifactKey
	}
	return nil
}

func (x *SearchArtifactsRequest) GetPartitions() *core.Partitions {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *SearchArtifactsRequest) GetTimePartitionValue() *timestamppb.Timestamp {
	if x != nil {
		return x.TimePartitionValue
	}
	return nil
}

func (x *SearchArtifactsRequest) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *SearchArtifactsRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SearchArtifactsRequest) GetOptions() *SearchOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SearchArtifactsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SearchArtifactsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchArtifactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If artifact specs are not requested, the resultant artifacts may be empty.
	Artifacts []*Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// continuation token if relevant.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SearchArtifactsResponse) Reset() {
	*x = SearchArtifactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArtifactsResponse) ProtoMessage() {}

func (x *SearchArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArtifactsResponse.ProtoReflect.Descriptor instead.
func (*SearchArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{11}
}

func (x *SearchArtifactsResponse) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *SearchArtifactsResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type FindByWorkflowExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecId    *core.WorkflowExecutionIdentifier   `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Direction FindByWorkflowExecRequest_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=flyteidl.artifact.FindByWorkflowExecRequest_Direction" json:"direction,omitempty"`
}

func (x *FindByWorkflowExecRequest) Reset() {
	*x = FindByWorkflowExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByWorkflowExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByWorkflowExecRequest) ProtoMessage() {}

func (x *FindByWorkflowExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByWorkflowExecRequest.ProtoReflect.Descriptor instead.
func (*FindByWorkflowExecRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{12}
}

func (x *FindByWorkflowExecRequest) GetExecId() *core.WorkflowExecutionIdentifier {
	if x != nil {
		return x.ExecId
	}
	return nil
}

func (x *FindByWorkflowExecRequest) GetDirection() FindByWorkflowExecRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return FindByWorkflowExecRequest_INPUTS
}

// Aliases identify a particular version of an artifact. They are different than tags in that they
// have to be unique for a given artifact project/domain/name. That is, for a given project/domain/name/kind,
// at most one version can have any given value at any point.
type AddTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId *core.ArtifactID `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	Value      string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// If true, and another version already has the specified kind/value, set this version instead
	Overwrite bool `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *AddTagRequest) Reset() {
	*x = AddTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagRequest) ProtoMessage() {}

func (x *AddTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagRequest.ProtoReflect.Descriptor instead.
func (*AddTagRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{13}
}

func (x *AddTagRequest) GetArtifactId() *core.ArtifactID {
	if x != nil {
		return x.ArtifactId
	}
	return nil
}

func (x *AddTagRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddTagRequest) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

type AddTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTagResponse) Reset() {
	*x = AddTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagResponse) ProtoMessage() {}

func (x *AddTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagResponse.ProtoReflect.Descriptor instead.
func (*AddTagResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{14}
}

type ActivateTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId *core.Identifier `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (x *ActivateTriggerRequest) Reset() {
	*x = ActivateTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateTriggerRequest) ProtoMessage() {}

func (x *ActivateTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateTriggerRequest.ProtoReflect.Descriptor instead.
func (*ActivateTriggerRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{15}
}

func (x *ActivateTriggerRequest) GetTriggerId() *core.Identifier {
	if x != nil {
		return x.TriggerId
	}
	return nil
}

type ActivateTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateTriggerResponse) Reset() {
	*x = ActivateTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateTriggerResponse) ProtoMessage() {}

func (x *ActivateTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateTriggerResponse.ProtoReflect.Descriptor instead.
func (*ActivateTriggerResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{16}
}

type CreateTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerLaunchPlan *admin.LaunchPlan `protobuf:"bytes,1,opt,name=trigger_launch_plan,json=triggerLaunchPlan,proto3" json:"trigger_launch_plan,omitempty"`
}

func (x *CreateTriggerRequest) Reset() {
	*x = CreateTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerRequest) ProtoMessage() {}

func (x *CreateTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTriggerRequest.ProtoReflect.Descriptor instead.
func (*CreateTriggerRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTriggerRequest) GetTriggerLaunchPlan() *admin.LaunchPlan {
	if x != nil {
		return x.TriggerLaunchPlan
	}
	return nil
}

type CreateTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTriggerResponse) Reset() {
	*x = CreateTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerResponse) ProtoMessage() {}

func (x *CreateTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTriggerResponse.ProtoReflect.Descriptor instead.
func (*CreateTriggerResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{18}
}

type DeactivateTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note that Trigger IDs are now 1:1 with Launch Plan IDs
	TriggerId *core.Identifier `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (x *DeactivateTriggerRequest) Reset() {
	*x = DeactivateTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTriggerRequest) ProtoMessage() {}

func (x *DeactivateTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTriggerRequest.ProtoReflect.Descriptor instead.
func (*DeactivateTriggerRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{19}
}

func (x *DeactivateTriggerRequest) GetTriggerId() *core.Identifier {
	if x != nil {
		return x.TriggerId
	}
	return nil
}

type DeactivateTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeactivateTriggerResponse) Reset() {
	*x = DeactivateTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTriggerResponse) ProtoMessage() {}

func (x *DeactivateTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTriggerResponse.ProtoReflect.Descriptor instead.
func (*DeactivateTriggerResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{20}
}

type DeactivateAllTriggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeactivateAllTriggersRequest) Reset() {
	*x = DeactivateAllTriggersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateAllTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAllTriggersRequest) ProtoMessage() {}

func (x *DeactivateAllTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAllTriggersRequest.ProtoReflect.Descriptor instead.
func (*DeactivateAllTriggersRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{21}
}

type DeactivateAllTriggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumDeactivated uint64 `protobuf:"varint,1,opt,name=num_deactivated,json=numDeactivated,proto3" json:"num_deactivated,omitempty"`
}

func (x *DeactivateAllTriggersResponse) Reset() {
	*x = DeactivateAllTriggersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateAllTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAllTriggersResponse) ProtoMessage() {}

func (x *DeactivateAllTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAllTriggersResponse.ProtoReflect.Descriptor instead.
func (*DeactivateAllTriggersResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{22}
}

func (x *DeactivateAllTriggersResponse) GetNumDeactivated() uint64 {
	if x != nil {
		return x.NumDeactivated
	}
	return 0
}

type ArtifactProducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These can be tasks, and workflows. Keeping track of the launch plans that a given workflow has is purely in
	// Admin's domain.
	EntityId *core.Identifier  `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Outputs  *core.VariableMap `protobuf:"bytes,2,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ArtifactProducer) Reset() {
	*x = ArtifactProducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactProducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactProducer) ProtoMessage() {}

func (x *ArtifactProducer) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactProducer.ProtoReflect.Descriptor instead.
func (*ArtifactProducer) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{23}
}

func (x *ArtifactProducer) GetEntityId() *core.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *ArtifactProducer) GetOutputs() *core.VariableMap {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type RegisterProducerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Producers []*ArtifactProducer `protobuf:"bytes,1,rep,name=producers,proto3" json:"producers,omitempty"`
}

func (x *RegisterProducerRequest) Reset() {
	*x = RegisterProducerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProducerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProducerRequest) ProtoMessage() {}

func (x *RegisterProducerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProducerRequest.ProtoReflect.Descriptor instead.
func (*RegisterProducerRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{24}
}

func (x *RegisterProducerRequest) GetProducers() []*ArtifactProducer {
	if x != nil {
		return x.Producers
	}
	return nil
}

type ArtifactConsumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These should all be launch plan IDs
	EntityId *core.Identifier   `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Inputs   *core.ParameterMap `protobuf:"bytes,2,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *ArtifactConsumer) Reset() {
	*x = ArtifactConsumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactConsumer) ProtoMessage() {}

func (x *ArtifactConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactConsumer.ProtoReflect.Descriptor instead.
func (*ArtifactConsumer) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{25}
}

func (x *ArtifactConsumer) GetEntityId() *core.Identifier {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *ArtifactConsumer) GetInputs() *core.ParameterMap {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type RegisterConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumers []*ArtifactConsumer `protobuf:"bytes,1,rep,name=consumers,proto3" json:"consumers,omitempty"`
}

func (x *RegisterConsumerRequest) Reset() {
	*x = RegisterConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerRequest) ProtoMessage() {}

func (x *RegisterConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerRequest.ProtoReflect.Descriptor instead.
func (*RegisterConsumerRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{26}
}

func (x *RegisterConsumerRequest) GetConsumers() []*ArtifactConsumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{27}
}

type ExecutionInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId *core.WorkflowExecutionIdentifier `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// can make this a map in the future, currently no need.
	Inputs []*core.ArtifactID `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *ExecutionInputsRequest) Reset() {
	*x = ExecutionInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionInputsRequest) ProtoMessage() {}

func (x *ExecutionInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionInputsRequest.ProtoReflect.Descriptor instead.
func (*ExecutionInputsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{28}
}

func (x *ExecutionInputsRequest) GetExecutionId() *core.WorkflowExecutionIdentifier {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

func (x *ExecutionInputsRequest) GetInputs() []*core.ArtifactID {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type ExecutionInputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutionInputsResponse) Reset() {
	*x = ExecutionInputsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionInputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionInputsResponse) ProtoMessage() {}

func (x *ExecutionInputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionInputsResponse.ProtoReflect.Descriptor instead.
func (*ExecutionInputsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{29}
}

type ListUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId *core.ArtifactID `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
}

func (x *ListUsageRequest) Reset() {
	*x = ListUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsageRequest) ProtoMessage() {}

func (x *ListUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsageRequest.ProtoReflect.Descriptor instead.
func (*ListUsageRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{30}
}

func (x *ListUsageRequest) GetArtifactId() *core.ArtifactID {
	if x != nil {
		return x.ArtifactId
	}
	return nil
}

type ListUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executions []*core.WorkflowExecutionIdentifier `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
}

func (x *ListUsageResponse) Reset() {
	*x = ListUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsageResponse) ProtoMessage() {}

func (x *ListUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_artifacts_artifacts_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsageResponse.ProtoReflect.Descriptor instead.
func (*ListUsageResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_artifacts_artifacts_proto_rawDescGZIP(), []int{31}
}

func (x *ListUsageResponse) GetExecutions() []*core.WorkflowExecutionIdentifier {
	if x != nil {
		return x.Executions
	}
	return nil
}

var File_flyteidl_artifacts_artifacts_proto protoreflect.FileDescriptor

var file_flyteidl_artifacts_artifacts_proto_rawDesc = []byte{
	0x0a, 0x22, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8b, 0x02, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0a,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x5f, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x22, 0xc7, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x0e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0xd7, 0x01, 0x0a, 0x0c, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x62, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x60,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x22, 0x80, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x6a, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xdc, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63,
	0x49, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x10, 0x01, 0x22, 0x7f,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x44, 0x52,
	0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22,
	0x10, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x52, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x62, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a,
	0x18, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x48, 0x0a, 0x1d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x5c, 0x0a,
	0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x10, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x17,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xc7, 0x0e, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x67, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x28,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22,
	0x1b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x8d, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a,
	0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x64, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x27, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x9f, 0x01, 0x0a,
	0x11, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x2b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x32, 0x24, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0xaf,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x32, 0x28, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x6c, 0x6c,
	0x12, 0x4f, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x12, 0x20, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd8,
	0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x12, 0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x60, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x65, 0x78, 0x65,
	0x63, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x7b, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xf5, 0x01, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x95, 0x01, 0x12, 0x92, 0x01, 0x2f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x7b, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x7d, 0x42, 0xcd, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x42, 0x0e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0xa2, 0x02,
	0x03, 0x46, 0x41, 0x58, 0xaa, 0x02, 0x11, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0xca, 0x02, 0x11, 0x46, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x5c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0xe2, 0x02, 0x1d, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_artifacts_artifacts_proto_rawDescOnce sync.Once
	file_flyteidl_artifacts_artifacts_proto_rawDescData = file_flyteidl_artifacts_artifacts_proto_rawDesc
)

func file_flyteidl_artifacts_artifacts_proto_rawDescGZIP() []byte {
	file_flyteidl_artifacts_artifacts_proto_rawDescOnce.Do(func() {
		file_flyteidl_artifacts_artifacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_artifacts_artifacts_proto_rawDescData)
	})
	return file_flyteidl_artifacts_artifacts_proto_rawDescData
}

var file_flyteidl_artifacts_artifacts_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flyteidl_artifacts_artifacts_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_flyteidl_artifacts_artifacts_proto_goTypes = []interface{}{
	(FindByWorkflowExecRequest_Direction)(0), // 0: flyteidl.artifact.FindByWorkflowExecRequest.Direction
	(*Artifact)(nil),                         // 1: flyteidl.artifact.Artifact
	(*ArtifactMetadata)(nil),                 // 2: flyteidl.artifact.ArtifactMetadata
	(*CreateArtifactRequest)(nil),            // 3: flyteidl.artifact.CreateArtifactRequest
	(*ArtifactSource)(nil),                   // 4: flyteidl.artifact.ArtifactSource
	(*ArtifactSpec)(nil),                     // 5: flyteidl.artifact.ArtifactSpec
	(*Trigger)(nil),                          // 6: flyteidl.artifact.Trigger
	(*CreateArtifactResponse)(nil),           // 7: flyteidl.artifact.CreateArtifactResponse
	(*GetArtifactRequest)(nil),               // 8: flyteidl.artifact.GetArtifactRequest
	(*GetArtifactResponse)(nil),              // 9: flyteidl.artifact.GetArtifactResponse
	(*SearchOptions)(nil),                    // 10: flyteidl.artifact.SearchOptions
	(*SearchArtifactsRequest)(nil),           // 11: flyteidl.artifact.SearchArtifactsRequest
	(*SearchArtifactsResponse)(nil),          // 12: flyteidl.artifact.SearchArtifactsResponse
	(*FindByWorkflowExecRequest)(nil),        // 13: flyteidl.artifact.FindByWorkflowExecRequest
	(*AddTagRequest)(nil),                    // 14: flyteidl.artifact.AddTagRequest
	(*AddTagResponse)(nil),                   // 15: flyteidl.artifact.AddTagResponse
	(*ActivateTriggerRequest)(nil),           // 16: flyteidl.artifact.ActivateTriggerRequest
	(*ActivateTriggerResponse)(nil),          // 17: flyteidl.artifact.ActivateTriggerResponse
	(*CreateTriggerRequest)(nil),             // 18: flyteidl.artifact.CreateTriggerRequest
	(*CreateTriggerResponse)(nil),            // 19: flyteidl.artifact.CreateTriggerResponse
	(*DeactivateTriggerRequest)(nil),         // 20: flyteidl.artifact.DeactivateTriggerRequest
	(*DeactivateTriggerResponse)(nil),        // 21: flyteidl.artifact.DeactivateTriggerResponse
	(*DeactivateAllTriggersRequest)(nil),     // 22: flyteidl.artifact.DeactivateAllTriggersRequest
	(*DeactivateAllTriggersResponse)(nil),    // 23: flyteidl.artifact.DeactivateAllTriggersResponse
	(*ArtifactProducer)(nil),                 // 24: flyteidl.artifact.ArtifactProducer
	(*RegisterProducerRequest)(nil),          // 25: flyteidl.artifact.RegisterProducerRequest
	(*ArtifactConsumer)(nil),                 // 26: flyteidl.artifact.ArtifactConsumer
	(*RegisterConsumerRequest)(nil),          // 27: flyteidl.artifact.RegisterConsumerRequest
	(*RegisterResponse)(nil),                 // 28: flyteidl.artifact.RegisterResponse
	(*ExecutionInputsRequest)(nil),           // 29: flyteidl.artifact.ExecutionInputsRequest
	(*ExecutionInputsResponse)(nil),          // 30: flyteidl.artifact.ExecutionInputsResponse
	(*ListUsageRequest)(nil),                 // 31: flyteidl.artifact.ListUsageRequest
	(*ListUsageResponse)(nil),                // 32: flyteidl.artifact.ListUsageResponse
	nil,                                      // 33: flyteidl.artifact.CreateArtifactRequest.PartitionsEntry
	(*core.ArtifactID)(nil),                  // 34: flyteidl.core.ArtifactID
	(*timestamppb.Timestamp)(nil),            // 35: google.protobuf.Timestamp
	(*core.ArtifactKey)(nil),                 // 36: flyteidl.core.ArtifactKey
	(*core.WorkflowExecutionIdentifier)(nil), // 37: flyteidl.core.WorkflowExecutionIdentifier
	(*core.Identifier)(nil),                  // 38: flyteidl.core.Identifier
	(*core.Literal)(nil),                     // 39: flyteidl.core.Literal
	(*core.LiteralType)(nil),                 // 40: flyteidl.core.LiteralType
	(*structpb.Struct)(nil),                  // 41: google.protobuf.Struct
	(*core.ParameterMap)(nil),                // 42: flyteidl.core.ParameterMap
	(*core.ArtifactQuery)(nil),               // 43: flyteidl.core.ArtifactQuery
	(*core.Partitions)(nil),                  // 44: flyteidl.core.Partitions
	(*admin.LaunchPlan)(nil),                 // 45: flyteidl.admin.LaunchPlan
	(*core.VariableMap)(nil),                 // 46: flyteidl.core.VariableMap
}
var file_flyteidl_artifacts_artifacts_proto_depIdxs = []int32{
	34, // 0: flyteidl.artifact.Artifact.artifact_id:type_name -> flyteidl.core.ArtifactID
	5,  // 1: flyteidl.artifact.Artifact.spec:type_name -> flyteidl.artifact.ArtifactSpec
	4,  // 2: flyteidl.artifact.Artifact.source:type_name -> flyteidl.artifact.ArtifactSource
	2,  // 3: flyteidl.artifact.Artifact.metadata:type_name -> flyteidl.artifact.ArtifactMetadata
	35, // 4: flyteidl.artifact.ArtifactMetadata.created_at:type_name -> google.protobuf.Timestamp
	36, // 5: flyteidl.artifact.CreateArtifactRequest.artifact_key:type_name -> flyteidl.core.ArtifactKey
	5,  // 6: flyteidl.artifact.CreateArtifactRequest.spec:type_name -> flyteidl.artifact.ArtifactSpec
	33, // 7: flyteidl.artifact.CreateArtifactRequest.partitions:type_name -> flyteidl.artifact.CreateArtifactRequest.PartitionsEntry
	35, // 8: flyteidl.artifact.CreateArtifactRequest.time_partition_value:type_name -> google.protobuf.Timestamp
	4,  // 9: flyteidl.artifact.CreateArtifactRequest.source:type_name -> flyteidl.artifact.ArtifactSource
	37, // 10: flyteidl.artifact.ArtifactSource.workflow_execution:type_name -> flyteidl.core.WorkflowExecutionIdentifier
	38, // 11: flyteidl.artifact.ArtifactSource.task_id:type_name -> flyteidl.core.Identifier
	39, // 12: flyteidl.artifact.ArtifactSpec.value:type_name -> flyteidl.core.Literal
	40, // 13: flyteidl.artifact.ArtifactSpec.type:type_name -> flyteidl.core.LiteralType
	41, // 14: flyteidl.artifact.ArtifactSpec.user_metadata:type_name -> google.protobuf.Struct
	34, // 15: flyteidl.artifact.Trigger.trigger:type_name -> flyteidl.core.ArtifactID
	42, // 16: flyteidl.artifact.Trigger.trigger_inputs:type_name -> flyteidl.core.ParameterMap
	1,  // 17: flyteidl.artifact.CreateArtifactResponse.artifact:type_name -> flyteidl.artifact.Artifact
	43, // 18: flyteidl.artifact.GetArtifactRequest.query:type_name -> flyteidl.core.ArtifactQuery
	1,  // 19: flyteidl.artifact.GetArtifactResponse.artifact:type_name -> flyteidl.artifact.Artifact
	36, // 20: flyteidl.artifact.SearchArtifactsRequest.artifact_key:type_name -> flyteidl.core.ArtifactKey
	44, // 21: flyteidl.artifact.SearchArtifactsRequest.partitions:type_name -> flyteidl.core.Partitions
	35, // 22: flyteidl.artifact.SearchArtifactsRequest.time_partition_value:type_name -> google.protobuf.Timestamp
	10, // 23: flyteidl.artifact.SearchArtifactsRequest.options:type_name -> flyteidl.artifact.SearchOptions
	1,  // 24: flyteidl.artifact.SearchArtifactsResponse.artifacts:type_name -> flyteidl.artifact.Artifact
	37, // 25: flyteidl.artifact.FindByWorkflowExecRequest.exec_id:type_name -> flyteidl.core.WorkflowExecutionIdentifier
	0,  // 26: flyteidl.artifact.FindByWorkflowExecRequest.direction:type_name -> flyteidl.artifact.FindByWorkflowExecRequest.Direction
	34, // 27: flyteidl.artifact.AddTagRequest.artifact_id:type_name -> flyteidl.core.ArtifactID
	38, // 28: flyteidl.artifact.ActivateTriggerRequest.trigger_id:type_name -> flyteidl.core.Identifier
	45, // 29: flyteidl.artifact.CreateTriggerRequest.trigger_launch_plan:type_name -> flyteidl.admin.LaunchPlan
	38, // 30: flyteidl.artifact.DeactivateTriggerRequest.trigger_id:type_name -> flyteidl.core.Identifier
	38, // 31: flyteidl.artifact.ArtifactProducer.entity_id:type_name -> flyteidl.core.Identifier
	46, // 32: flyteidl.artifact.ArtifactProducer.outputs:type_name -> flyteidl.core.VariableMap
	24, // 33: flyteidl.artifact.RegisterProducerRequest.producers:type_name -> flyteidl.artifact.ArtifactProducer
	38, // 34: flyteidl.artifact.ArtifactConsumer.entity_id:type_name -> flyteidl.core.Identifier
	42, // 35: flyteidl.artifact.ArtifactConsumer.inputs:type_name -> flyteidl.core.ParameterMap
	26, // 36: flyteidl.artifact.RegisterConsumerRequest.consumers:type_name -> flyteidl.artifact.ArtifactConsumer
	37, // 37: flyteidl.artifact.ExecutionInputsRequest.execution_id:type_name -> flyteidl.core.WorkflowExecutionIdentifier
	34, // 38: flyteidl.artifact.ExecutionInputsRequest.inputs:type_name -> flyteidl.core.ArtifactID
	34, // 39: flyteidl.artifact.ListUsageRequest.artifact_id:type_name -> flyteidl.core.ArtifactID
	37, // 40: flyteidl.artifact.ListUsageResponse.executions:type_name -> flyteidl.core.WorkflowExecutionIdentifier
	3,  // 41: flyteidl.artifact.ArtifactRegistry.CreateArtifact:input_type -> flyteidl.artifact.CreateArtifactRequest
	8,  // 42: flyteidl.artifact.ArtifactRegistry.GetArtifact:input_type -> flyteidl.artifact.GetArtifactRequest
	11, // 43: flyteidl.artifact.ArtifactRegistry.SearchArtifacts:input_type -> flyteidl.artifact.SearchArtifactsRequest
	18, // 44: flyteidl.artifact.ArtifactRegistry.CreateTrigger:input_type -> flyteidl.artifact.CreateTriggerRequest
	16, // 45: flyteidl.artifact.ArtifactRegistry.ActivateTrigger:input_type -> flyteidl.artifact.ActivateTriggerRequest
	20, // 46: flyteidl.artifact.ArtifactRegistry.DeactivateTrigger:input_type -> flyteidl.artifact.DeactivateTriggerRequest
	22, // 47: flyteidl.artifact.ArtifactRegistry.DeactivateAllTriggers:input_type -> flyteidl.artifact.DeactivateAllTriggersRequest
	14, // 48: flyteidl.artifact.ArtifactRegistry.AddTag:input_type -> flyteidl.artifact.AddTagRequest
	25, // 49: flyteidl.artifact.ArtifactRegistry.RegisterProducer:input_type -> flyteidl.artifact.RegisterProducerRequest
	27, // 50: flyteidl.artifact.ArtifactRegistry.RegisterConsumer:input_type -> flyteidl.artifact.RegisterConsumerRequest
	29, // 51: flyteidl.artifact.ArtifactRegistry.SetExecutionInputs:input_type -> flyteidl.artifact.ExecutionInputsRequest
	13, // 52: flyteidl.artifact.ArtifactRegistry.FindByWorkflowExec:input_type -> flyteidl.artifact.FindByWorkflowExecRequest
	31, // 53: flyteidl.artifact.ArtifactRegistry.ListUsage:input_type -> flyteidl.artifact.ListUsageRequest
	7,  // 54: flyteidl.artifact.ArtifactRegistry.CreateArtifact:output_type -> flyteidl.artifact.CreateArtifactResponse
	9,  // 55: flyteidl.artifact.ArtifactRegistry.GetArtifact:output_type -> flyteidl.artifact.GetArtifactResponse
	12, // 56: flyteidl.artifact.ArtifactRegistry.SearchArtifacts:output_type -> flyteidl.artifact.SearchArtifactsResponse
	19, // 57: flyteidl.artifact.ArtifactRegistry.CreateTrigger:output_type -> flyteidl.artifact.CreateTriggerResponse
	17, // 58: flyteidl.artifact.ArtifactRegistry.ActivateTrigger:output_type -> flyteidl.artifact.ActivateTriggerResponse
	21, // 59: flyteidl.artifact.ArtifactRegistry.DeactivateTrigger:output_type -> flyteidl.artifact.DeactivateTriggerResponse
	23, // 60: flyteidl.artifact.ArtifactRegistry.DeactivateAllTriggers:output_type -> flyteidl.artifact.DeactivateAllTriggersResponse
	15, // 61: flyteidl.artifact.ArtifactRegistry.AddTag:output_type -> flyteidl.artifact.AddTagResponse
	28, // 62: flyteidl.artifact.ArtifactRegistry.RegisterProducer:output_type -> flyteidl.artifact.RegisterResponse
	28, // 63: flyteidl.artifact.ArtifactRegistry.RegisterConsumer:output_type -> flyteidl.artifact.RegisterResponse
	30, // 64: flyteidl.artifact.ArtifactRegistry.SetExecutionInputs:output_type -> flyteidl.artifact.ExecutionInputsResponse
	12, // 65: flyteidl.artifact.ArtifactRegistry.FindByWorkflowExec:output_type -> flyteidl.artifact.SearchArtifactsResponse
	32, // 66: flyteidl.artifact.ArtifactRegistry.ListUsage:output_type -> flyteidl.artifact.ListUsageResponse
	54, // [54:67] is the sub-list for method output_type
	41, // [41:54] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_flyteidl_artifacts_artifacts_proto_init() }
func file_flyteidl_artifacts_artifacts_proto_init() {
	if File_flyteidl_artifacts_artifacts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_artifacts_artifacts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArtifactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByWorkflowExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateAllTriggersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateAllTriggersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactProducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProducerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactConsumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionInputsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_artifacts_artifacts_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_artifacts_artifacts_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flyteidl_artifacts_artifacts_proto_goTypes,
		DependencyIndexes: file_flyteidl_artifacts_artifacts_proto_depIdxs,
		EnumInfos:         file_flyteidl_artifacts_artifacts_proto_enumTypes,
		MessageInfos:      file_flyteidl_artifacts_artifacts_proto_msgTypes,
	}.Build()
	File_flyteidl_artifacts_artifacts_proto = out.File
	file_flyteidl_artifacts_artifacts_proto_rawDesc = nil
	file_flyteidl_artifacts_artifacts_proto_goTypes = nil
	file_flyteidl_artifacts_artifacts_proto_depIdxs = nil
}
