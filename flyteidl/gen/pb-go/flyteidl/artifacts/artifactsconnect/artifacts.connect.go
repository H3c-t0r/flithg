// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl/artifacts/artifacts.proto

package artifactsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	artifacts "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/artifacts"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArtifactRegistryName is the fully-qualified name of the ArtifactRegistry service.
	ArtifactRegistryName = "flyteidl.artifact.ArtifactRegistry"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArtifactRegistryCreateArtifactProcedure is the fully-qualified name of the ArtifactRegistry's
	// CreateArtifact RPC.
	ArtifactRegistryCreateArtifactProcedure = "/flyteidl.artifact.ArtifactRegistry/CreateArtifact"
	// ArtifactRegistryGetArtifactProcedure is the fully-qualified name of the ArtifactRegistry's
	// GetArtifact RPC.
	ArtifactRegistryGetArtifactProcedure = "/flyteidl.artifact.ArtifactRegistry/GetArtifact"
	// ArtifactRegistrySearchArtifactsProcedure is the fully-qualified name of the ArtifactRegistry's
	// SearchArtifacts RPC.
	ArtifactRegistrySearchArtifactsProcedure = "/flyteidl.artifact.ArtifactRegistry/SearchArtifacts"
	// ArtifactRegistryCreateTriggerProcedure is the fully-qualified name of the ArtifactRegistry's
	// CreateTrigger RPC.
	ArtifactRegistryCreateTriggerProcedure = "/flyteidl.artifact.ArtifactRegistry/CreateTrigger"
	// ArtifactRegistryDeactivateTriggerProcedure is the fully-qualified name of the ArtifactRegistry's
	// DeactivateTrigger RPC.
	ArtifactRegistryDeactivateTriggerProcedure = "/flyteidl.artifact.ArtifactRegistry/DeactivateTrigger"
	// ArtifactRegistryDeactivateAllTriggersProcedure is the fully-qualified name of the
	// ArtifactRegistry's DeactivateAllTriggers RPC.
	ArtifactRegistryDeactivateAllTriggersProcedure = "/flyteidl.artifact.ArtifactRegistry/DeactivateAllTriggers"
	// ArtifactRegistryAddTagProcedure is the fully-qualified name of the ArtifactRegistry's AddTag RPC.
	ArtifactRegistryAddTagProcedure = "/flyteidl.artifact.ArtifactRegistry/AddTag"
	// ArtifactRegistryRegisterProducerProcedure is the fully-qualified name of the ArtifactRegistry's
	// RegisterProducer RPC.
	ArtifactRegistryRegisterProducerProcedure = "/flyteidl.artifact.ArtifactRegistry/RegisterProducer"
	// ArtifactRegistryRegisterConsumerProcedure is the fully-qualified name of the ArtifactRegistry's
	// RegisterConsumer RPC.
	ArtifactRegistryRegisterConsumerProcedure = "/flyteidl.artifact.ArtifactRegistry/RegisterConsumer"
	// ArtifactRegistrySetExecutionInputsProcedure is the fully-qualified name of the ArtifactRegistry's
	// SetExecutionInputs RPC.
	ArtifactRegistrySetExecutionInputsProcedure = "/flyteidl.artifact.ArtifactRegistry/SetExecutionInputs"
	// ArtifactRegistryFindByWorkflowExecProcedure is the fully-qualified name of the ArtifactRegistry's
	// FindByWorkflowExec RPC.
	ArtifactRegistryFindByWorkflowExecProcedure = "/flyteidl.artifact.ArtifactRegistry/FindByWorkflowExec"
	// ArtifactRegistryListUsageProcedure is the fully-qualified name of the ArtifactRegistry's
	// ListUsage RPC.
	ArtifactRegistryListUsageProcedure = "/flyteidl.artifact.ArtifactRegistry/ListUsage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	artifactRegistryServiceDescriptor                     = artifacts.File_flyteidl_artifacts_artifacts_proto.Services().ByName("ArtifactRegistry")
	artifactRegistryCreateArtifactMethodDescriptor        = artifactRegistryServiceDescriptor.Methods().ByName("CreateArtifact")
	artifactRegistryGetArtifactMethodDescriptor           = artifactRegistryServiceDescriptor.Methods().ByName("GetArtifact")
	artifactRegistrySearchArtifactsMethodDescriptor       = artifactRegistryServiceDescriptor.Methods().ByName("SearchArtifacts")
	artifactRegistryCreateTriggerMethodDescriptor         = artifactRegistryServiceDescriptor.Methods().ByName("CreateTrigger")
	artifactRegistryDeactivateTriggerMethodDescriptor     = artifactRegistryServiceDescriptor.Methods().ByName("DeactivateTrigger")
	artifactRegistryDeactivateAllTriggersMethodDescriptor = artifactRegistryServiceDescriptor.Methods().ByName("DeactivateAllTriggers")
	artifactRegistryAddTagMethodDescriptor                = artifactRegistryServiceDescriptor.Methods().ByName("AddTag")
	artifactRegistryRegisterProducerMethodDescriptor      = artifactRegistryServiceDescriptor.Methods().ByName("RegisterProducer")
	artifactRegistryRegisterConsumerMethodDescriptor      = artifactRegistryServiceDescriptor.Methods().ByName("RegisterConsumer")
	artifactRegistrySetExecutionInputsMethodDescriptor    = artifactRegistryServiceDescriptor.Methods().ByName("SetExecutionInputs")
	artifactRegistryFindByWorkflowExecMethodDescriptor    = artifactRegistryServiceDescriptor.Methods().ByName("FindByWorkflowExec")
	artifactRegistryListUsageMethodDescriptor             = artifactRegistryServiceDescriptor.Methods().ByName("ListUsage")
)

// ArtifactRegistryClient is a client for the flyteidl.artifact.ArtifactRegistry service.
type ArtifactRegistryClient interface {
	CreateArtifact(context.Context, *connect.Request[artifacts.CreateArtifactRequest]) (*connect.Response[artifacts.CreateArtifactResponse], error)
	GetArtifact(context.Context, *connect.Request[artifacts.GetArtifactRequest]) (*connect.Response[artifacts.GetArtifactResponse], error)
	SearchArtifacts(context.Context, *connect.Request[artifacts.SearchArtifactsRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error)
	CreateTrigger(context.Context, *connect.Request[artifacts.CreateTriggerRequest]) (*connect.Response[artifacts.CreateTriggerResponse], error)
	DeactivateTrigger(context.Context, *connect.Request[artifacts.DeactivateTriggerRequest]) (*connect.Response[artifacts.DeactivateTriggerResponse], error)
	DeactivateAllTriggers(context.Context, *connect.Request[artifacts.DeactivateAllTriggersRequest]) (*connect.Response[artifacts.DeactivateAllTriggersResponse], error)
	AddTag(context.Context, *connect.Request[artifacts.AddTagRequest]) (*connect.Response[artifacts.AddTagResponse], error)
	RegisterProducer(context.Context, *connect.Request[artifacts.RegisterProducerRequest]) (*connect.Response[artifacts.RegisterResponse], error)
	RegisterConsumer(context.Context, *connect.Request[artifacts.RegisterConsumerRequest]) (*connect.Response[artifacts.RegisterResponse], error)
	SetExecutionInputs(context.Context, *connect.Request[artifacts.ExecutionInputsRequest]) (*connect.Response[artifacts.ExecutionInputsResponse], error)
	FindByWorkflowExec(context.Context, *connect.Request[artifacts.FindByWorkflowExecRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error)
	ListUsage(context.Context, *connect.Request[artifacts.ListUsageRequest]) (*connect.Response[artifacts.ListUsageResponse], error)
}

// NewArtifactRegistryClient constructs a client for the flyteidl.artifact.ArtifactRegistry service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtifactRegistryClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArtifactRegistryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &artifactRegistryClient{
		createArtifact: connect.NewClient[artifacts.CreateArtifactRequest, artifacts.CreateArtifactResponse](
			httpClient,
			baseURL+ArtifactRegistryCreateArtifactProcedure,
			connect.WithSchema(artifactRegistryCreateArtifactMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getArtifact: connect.NewClient[artifacts.GetArtifactRequest, artifacts.GetArtifactResponse](
			httpClient,
			baseURL+ArtifactRegistryGetArtifactProcedure,
			connect.WithSchema(artifactRegistryGetArtifactMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchArtifacts: connect.NewClient[artifacts.SearchArtifactsRequest, artifacts.SearchArtifactsResponse](
			httpClient,
			baseURL+ArtifactRegistrySearchArtifactsProcedure,
			connect.WithSchema(artifactRegistrySearchArtifactsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTrigger: connect.NewClient[artifacts.CreateTriggerRequest, artifacts.CreateTriggerResponse](
			httpClient,
			baseURL+ArtifactRegistryCreateTriggerProcedure,
			connect.WithSchema(artifactRegistryCreateTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateTrigger: connect.NewClient[artifacts.DeactivateTriggerRequest, artifacts.DeactivateTriggerResponse](
			httpClient,
			baseURL+ArtifactRegistryDeactivateTriggerProcedure,
			connect.WithSchema(artifactRegistryDeactivateTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateAllTriggers: connect.NewClient[artifacts.DeactivateAllTriggersRequest, artifacts.DeactivateAllTriggersResponse](
			httpClient,
			baseURL+ArtifactRegistryDeactivateAllTriggersProcedure,
			connect.WithSchema(artifactRegistryDeactivateAllTriggersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addTag: connect.NewClient[artifacts.AddTagRequest, artifacts.AddTagResponse](
			httpClient,
			baseURL+ArtifactRegistryAddTagProcedure,
			connect.WithSchema(artifactRegistryAddTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerProducer: connect.NewClient[artifacts.RegisterProducerRequest, artifacts.RegisterResponse](
			httpClient,
			baseURL+ArtifactRegistryRegisterProducerProcedure,
			connect.WithSchema(artifactRegistryRegisterProducerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerConsumer: connect.NewClient[artifacts.RegisterConsumerRequest, artifacts.RegisterResponse](
			httpClient,
			baseURL+ArtifactRegistryRegisterConsumerProcedure,
			connect.WithSchema(artifactRegistryRegisterConsumerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setExecutionInputs: connect.NewClient[artifacts.ExecutionInputsRequest, artifacts.ExecutionInputsResponse](
			httpClient,
			baseURL+ArtifactRegistrySetExecutionInputsProcedure,
			connect.WithSchema(artifactRegistrySetExecutionInputsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		findByWorkflowExec: connect.NewClient[artifacts.FindByWorkflowExecRequest, artifacts.SearchArtifactsResponse](
			httpClient,
			baseURL+ArtifactRegistryFindByWorkflowExecProcedure,
			connect.WithSchema(artifactRegistryFindByWorkflowExecMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsage: connect.NewClient[artifacts.ListUsageRequest, artifacts.ListUsageResponse](
			httpClient,
			baseURL+ArtifactRegistryListUsageProcedure,
			connect.WithSchema(artifactRegistryListUsageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// artifactRegistryClient implements ArtifactRegistryClient.
type artifactRegistryClient struct {
	createArtifact        *connect.Client[artifacts.CreateArtifactRequest, artifacts.CreateArtifactResponse]
	getArtifact           *connect.Client[artifacts.GetArtifactRequest, artifacts.GetArtifactResponse]
	searchArtifacts       *connect.Client[artifacts.SearchArtifactsRequest, artifacts.SearchArtifactsResponse]
	createTrigger         *connect.Client[artifacts.CreateTriggerRequest, artifacts.CreateTriggerResponse]
	deactivateTrigger     *connect.Client[artifacts.DeactivateTriggerRequest, artifacts.DeactivateTriggerResponse]
	deactivateAllTriggers *connect.Client[artifacts.DeactivateAllTriggersRequest, artifacts.DeactivateAllTriggersResponse]
	addTag                *connect.Client[artifacts.AddTagRequest, artifacts.AddTagResponse]
	registerProducer      *connect.Client[artifacts.RegisterProducerRequest, artifacts.RegisterResponse]
	registerConsumer      *connect.Client[artifacts.RegisterConsumerRequest, artifacts.RegisterResponse]
	setExecutionInputs    *connect.Client[artifacts.ExecutionInputsRequest, artifacts.ExecutionInputsResponse]
	findByWorkflowExec    *connect.Client[artifacts.FindByWorkflowExecRequest, artifacts.SearchArtifactsResponse]
	listUsage             *connect.Client[artifacts.ListUsageRequest, artifacts.ListUsageResponse]
}

// CreateArtifact calls flyteidl.artifact.ArtifactRegistry.CreateArtifact.
func (c *artifactRegistryClient) CreateArtifact(ctx context.Context, req *connect.Request[artifacts.CreateArtifactRequest]) (*connect.Response[artifacts.CreateArtifactResponse], error) {
	return c.createArtifact.CallUnary(ctx, req)
}

// GetArtifact calls flyteidl.artifact.ArtifactRegistry.GetArtifact.
func (c *artifactRegistryClient) GetArtifact(ctx context.Context, req *connect.Request[artifacts.GetArtifactRequest]) (*connect.Response[artifacts.GetArtifactResponse], error) {
	return c.getArtifact.CallUnary(ctx, req)
}

// SearchArtifacts calls flyteidl.artifact.ArtifactRegistry.SearchArtifacts.
func (c *artifactRegistryClient) SearchArtifacts(ctx context.Context, req *connect.Request[artifacts.SearchArtifactsRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error) {
	return c.searchArtifacts.CallUnary(ctx, req)
}

// CreateTrigger calls flyteidl.artifact.ArtifactRegistry.CreateTrigger.
func (c *artifactRegistryClient) CreateTrigger(ctx context.Context, req *connect.Request[artifacts.CreateTriggerRequest]) (*connect.Response[artifacts.CreateTriggerResponse], error) {
	return c.createTrigger.CallUnary(ctx, req)
}

// DeactivateTrigger calls flyteidl.artifact.ArtifactRegistry.DeactivateTrigger.
func (c *artifactRegistryClient) DeactivateTrigger(ctx context.Context, req *connect.Request[artifacts.DeactivateTriggerRequest]) (*connect.Response[artifacts.DeactivateTriggerResponse], error) {
	return c.deactivateTrigger.CallUnary(ctx, req)
}

// DeactivateAllTriggers calls flyteidl.artifact.ArtifactRegistry.DeactivateAllTriggers.
func (c *artifactRegistryClient) DeactivateAllTriggers(ctx context.Context, req *connect.Request[artifacts.DeactivateAllTriggersRequest]) (*connect.Response[artifacts.DeactivateAllTriggersResponse], error) {
	return c.deactivateAllTriggers.CallUnary(ctx, req)
}

// AddTag calls flyteidl.artifact.ArtifactRegistry.AddTag.
func (c *artifactRegistryClient) AddTag(ctx context.Context, req *connect.Request[artifacts.AddTagRequest]) (*connect.Response[artifacts.AddTagResponse], error) {
	return c.addTag.CallUnary(ctx, req)
}

// RegisterProducer calls flyteidl.artifact.ArtifactRegistry.RegisterProducer.
func (c *artifactRegistryClient) RegisterProducer(ctx context.Context, req *connect.Request[artifacts.RegisterProducerRequest]) (*connect.Response[artifacts.RegisterResponse], error) {
	return c.registerProducer.CallUnary(ctx, req)
}

// RegisterConsumer calls flyteidl.artifact.ArtifactRegistry.RegisterConsumer.
func (c *artifactRegistryClient) RegisterConsumer(ctx context.Context, req *connect.Request[artifacts.RegisterConsumerRequest]) (*connect.Response[artifacts.RegisterResponse], error) {
	return c.registerConsumer.CallUnary(ctx, req)
}

// SetExecutionInputs calls flyteidl.artifact.ArtifactRegistry.SetExecutionInputs.
func (c *artifactRegistryClient) SetExecutionInputs(ctx context.Context, req *connect.Request[artifacts.ExecutionInputsRequest]) (*connect.Response[artifacts.ExecutionInputsResponse], error) {
	return c.setExecutionInputs.CallUnary(ctx, req)
}

// FindByWorkflowExec calls flyteidl.artifact.ArtifactRegistry.FindByWorkflowExec.
func (c *artifactRegistryClient) FindByWorkflowExec(ctx context.Context, req *connect.Request[artifacts.FindByWorkflowExecRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error) {
	return c.findByWorkflowExec.CallUnary(ctx, req)
}

// ListUsage calls flyteidl.artifact.ArtifactRegistry.ListUsage.
func (c *artifactRegistryClient) ListUsage(ctx context.Context, req *connect.Request[artifacts.ListUsageRequest]) (*connect.Response[artifacts.ListUsageResponse], error) {
	return c.listUsage.CallUnary(ctx, req)
}

// ArtifactRegistryHandler is an implementation of the flyteidl.artifact.ArtifactRegistry service.
type ArtifactRegistryHandler interface {
	CreateArtifact(context.Context, *connect.Request[artifacts.CreateArtifactRequest]) (*connect.Response[artifacts.CreateArtifactResponse], error)
	GetArtifact(context.Context, *connect.Request[artifacts.GetArtifactRequest]) (*connect.Response[artifacts.GetArtifactResponse], error)
	SearchArtifacts(context.Context, *connect.Request[artifacts.SearchArtifactsRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error)
	CreateTrigger(context.Context, *connect.Request[artifacts.CreateTriggerRequest]) (*connect.Response[artifacts.CreateTriggerResponse], error)
	DeactivateTrigger(context.Context, *connect.Request[artifacts.DeactivateTriggerRequest]) (*connect.Response[artifacts.DeactivateTriggerResponse], error)
	DeactivateAllTriggers(context.Context, *connect.Request[artifacts.DeactivateAllTriggersRequest]) (*connect.Response[artifacts.DeactivateAllTriggersResponse], error)
	AddTag(context.Context, *connect.Request[artifacts.AddTagRequest]) (*connect.Response[artifacts.AddTagResponse], error)
	RegisterProducer(context.Context, *connect.Request[artifacts.RegisterProducerRequest]) (*connect.Response[artifacts.RegisterResponse], error)
	RegisterConsumer(context.Context, *connect.Request[artifacts.RegisterConsumerRequest]) (*connect.Response[artifacts.RegisterResponse], error)
	SetExecutionInputs(context.Context, *connect.Request[artifacts.ExecutionInputsRequest]) (*connect.Response[artifacts.ExecutionInputsResponse], error)
	FindByWorkflowExec(context.Context, *connect.Request[artifacts.FindByWorkflowExecRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error)
	ListUsage(context.Context, *connect.Request[artifacts.ListUsageRequest]) (*connect.Response[artifacts.ListUsageResponse], error)
}

// NewArtifactRegistryHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtifactRegistryHandler(svc ArtifactRegistryHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	artifactRegistryCreateArtifactHandler := connect.NewUnaryHandler(
		ArtifactRegistryCreateArtifactProcedure,
		svc.CreateArtifact,
		connect.WithSchema(artifactRegistryCreateArtifactMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryGetArtifactHandler := connect.NewUnaryHandler(
		ArtifactRegistryGetArtifactProcedure,
		svc.GetArtifact,
		connect.WithSchema(artifactRegistryGetArtifactMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistrySearchArtifactsHandler := connect.NewUnaryHandler(
		ArtifactRegistrySearchArtifactsProcedure,
		svc.SearchArtifacts,
		connect.WithSchema(artifactRegistrySearchArtifactsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryCreateTriggerHandler := connect.NewUnaryHandler(
		ArtifactRegistryCreateTriggerProcedure,
		svc.CreateTrigger,
		connect.WithSchema(artifactRegistryCreateTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryDeactivateTriggerHandler := connect.NewUnaryHandler(
		ArtifactRegistryDeactivateTriggerProcedure,
		svc.DeactivateTrigger,
		connect.WithSchema(artifactRegistryDeactivateTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryDeactivateAllTriggersHandler := connect.NewUnaryHandler(
		ArtifactRegistryDeactivateAllTriggersProcedure,
		svc.DeactivateAllTriggers,
		connect.WithSchema(artifactRegistryDeactivateAllTriggersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryAddTagHandler := connect.NewUnaryHandler(
		ArtifactRegistryAddTagProcedure,
		svc.AddTag,
		connect.WithSchema(artifactRegistryAddTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryRegisterProducerHandler := connect.NewUnaryHandler(
		ArtifactRegistryRegisterProducerProcedure,
		svc.RegisterProducer,
		connect.WithSchema(artifactRegistryRegisterProducerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryRegisterConsumerHandler := connect.NewUnaryHandler(
		ArtifactRegistryRegisterConsumerProcedure,
		svc.RegisterConsumer,
		connect.WithSchema(artifactRegistryRegisterConsumerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistrySetExecutionInputsHandler := connect.NewUnaryHandler(
		ArtifactRegistrySetExecutionInputsProcedure,
		svc.SetExecutionInputs,
		connect.WithSchema(artifactRegistrySetExecutionInputsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryFindByWorkflowExecHandler := connect.NewUnaryHandler(
		ArtifactRegistryFindByWorkflowExecProcedure,
		svc.FindByWorkflowExec,
		connect.WithSchema(artifactRegistryFindByWorkflowExecMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactRegistryListUsageHandler := connect.NewUnaryHandler(
		ArtifactRegistryListUsageProcedure,
		svc.ListUsage,
		connect.WithSchema(artifactRegistryListUsageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.artifact.ArtifactRegistry/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArtifactRegistryCreateArtifactProcedure:
			artifactRegistryCreateArtifactHandler.ServeHTTP(w, r)
		case ArtifactRegistryGetArtifactProcedure:
			artifactRegistryGetArtifactHandler.ServeHTTP(w, r)
		case ArtifactRegistrySearchArtifactsProcedure:
			artifactRegistrySearchArtifactsHandler.ServeHTTP(w, r)
		case ArtifactRegistryCreateTriggerProcedure:
			artifactRegistryCreateTriggerHandler.ServeHTTP(w, r)
		case ArtifactRegistryDeactivateTriggerProcedure:
			artifactRegistryDeactivateTriggerHandler.ServeHTTP(w, r)
		case ArtifactRegistryDeactivateAllTriggersProcedure:
			artifactRegistryDeactivateAllTriggersHandler.ServeHTTP(w, r)
		case ArtifactRegistryAddTagProcedure:
			artifactRegistryAddTagHandler.ServeHTTP(w, r)
		case ArtifactRegistryRegisterProducerProcedure:
			artifactRegistryRegisterProducerHandler.ServeHTTP(w, r)
		case ArtifactRegistryRegisterConsumerProcedure:
			artifactRegistryRegisterConsumerHandler.ServeHTTP(w, r)
		case ArtifactRegistrySetExecutionInputsProcedure:
			artifactRegistrySetExecutionInputsHandler.ServeHTTP(w, r)
		case ArtifactRegistryFindByWorkflowExecProcedure:
			artifactRegistryFindByWorkflowExecHandler.ServeHTTP(w, r)
		case ArtifactRegistryListUsageProcedure:
			artifactRegistryListUsageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArtifactRegistryHandler returns CodeUnimplemented from all methods.
type UnimplementedArtifactRegistryHandler struct{}

func (UnimplementedArtifactRegistryHandler) CreateArtifact(context.Context, *connect.Request[artifacts.CreateArtifactRequest]) (*connect.Response[artifacts.CreateArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.CreateArtifact is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) GetArtifact(context.Context, *connect.Request[artifacts.GetArtifactRequest]) (*connect.Response[artifacts.GetArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.GetArtifact is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) SearchArtifacts(context.Context, *connect.Request[artifacts.SearchArtifactsRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.SearchArtifacts is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) CreateTrigger(context.Context, *connect.Request[artifacts.CreateTriggerRequest]) (*connect.Response[artifacts.CreateTriggerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.CreateTrigger is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) DeactivateTrigger(context.Context, *connect.Request[artifacts.DeactivateTriggerRequest]) (*connect.Response[artifacts.DeactivateTriggerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.DeactivateTrigger is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) DeactivateAllTriggers(context.Context, *connect.Request[artifacts.DeactivateAllTriggersRequest]) (*connect.Response[artifacts.DeactivateAllTriggersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.DeactivateAllTriggers is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) AddTag(context.Context, *connect.Request[artifacts.AddTagRequest]) (*connect.Response[artifacts.AddTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.AddTag is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) RegisterProducer(context.Context, *connect.Request[artifacts.RegisterProducerRequest]) (*connect.Response[artifacts.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.RegisterProducer is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) RegisterConsumer(context.Context, *connect.Request[artifacts.RegisterConsumerRequest]) (*connect.Response[artifacts.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.RegisterConsumer is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) SetExecutionInputs(context.Context, *connect.Request[artifacts.ExecutionInputsRequest]) (*connect.Response[artifacts.ExecutionInputsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.SetExecutionInputs is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) FindByWorkflowExec(context.Context, *connect.Request[artifacts.FindByWorkflowExecRequest]) (*connect.Response[artifacts.SearchArtifactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.FindByWorkflowExec is not implemented"))
}

func (UnimplementedArtifactRegistryHandler) ListUsage(context.Context, *connect.Request[artifacts.ListUsageRequest]) (*connect.Response[artifacts.ListUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.artifact.ArtifactRegistry.ListUsage is not implemented"))
}
