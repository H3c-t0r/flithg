// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flyteidl/artifacts/artifacts.proto

package artifacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtifactRegistry_CreateArtifact_FullMethodName                   = "/flyteidl.artifact.ArtifactRegistry/CreateArtifact"
	ArtifactRegistry_GetArtifact_FullMethodName                      = "/flyteidl.artifact.ArtifactRegistry/GetArtifact"
	ArtifactRegistry_SearchArtifacts_FullMethodName                  = "/flyteidl.artifact.ArtifactRegistry/SearchArtifacts"
	ArtifactRegistry_CreateTrigger_FullMethodName                    = "/flyteidl.artifact.ArtifactRegistry/CreateTrigger"
	ArtifactRegistry_ActivateTrigger_FullMethodName                  = "/flyteidl.artifact.ArtifactRegistry/ActivateTrigger"
	ArtifactRegistry_DeactivateTrigger_FullMethodName                = "/flyteidl.artifact.ArtifactRegistry/DeactivateTrigger"
	ArtifactRegistry_DeactivateAllTriggers_FullMethodName            = "/flyteidl.artifact.ArtifactRegistry/DeactivateAllTriggers"
	ArtifactRegistry_GetCard_FullMethodName                          = "/flyteidl.artifact.ArtifactRegistry/GetCard"
	ArtifactRegistry_AddTag_FullMethodName                           = "/flyteidl.artifact.ArtifactRegistry/AddTag"
	ArtifactRegistry_RegisterProducer_FullMethodName                 = "/flyteidl.artifact.ArtifactRegistry/RegisterProducer"
	ArtifactRegistry_RegisterConsumer_FullMethodName                 = "/flyteidl.artifact.ArtifactRegistry/RegisterConsumer"
	ArtifactRegistry_SetExecutionInputs_FullMethodName               = "/flyteidl.artifact.ArtifactRegistry/SetExecutionInputs"
	ArtifactRegistry_FindByWorkflowExec_FullMethodName               = "/flyteidl.artifact.ArtifactRegistry/FindByWorkflowExec"
	ArtifactRegistry_ListUsage_FullMethodName                        = "/flyteidl.artifact.ArtifactRegistry/ListUsage"
	ArtifactRegistry_GetTriggeringArtifacts_FullMethodName           = "/flyteidl.artifact.ArtifactRegistry/GetTriggeringArtifacts"
	ArtifactRegistry_GetTriggeredExecutionsByArtifact_FullMethodName = "/flyteidl.artifact.ArtifactRegistry/GetTriggeredExecutionsByArtifact"
)

// ArtifactRegistryClient is the client API for ArtifactRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactRegistryClient interface {
	CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error)
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
	SearchArtifacts(ctx context.Context, in *SearchArtifactsRequest, opts ...grpc.CallOption) (*SearchArtifactsResponse, error)
	CreateTrigger(ctx context.Context, in *CreateTriggerRequest, opts ...grpc.CallOption) (*CreateTriggerResponse, error)
	ActivateTrigger(ctx context.Context, in *ActivateTriggerRequest, opts ...grpc.CallOption) (*ActivateTriggerResponse, error)
	DeactivateTrigger(ctx context.Context, in *DeactivateTriggerRequest, opts ...grpc.CallOption) (*DeactivateTriggerResponse, error)
	DeactivateAllTriggers(ctx context.Context, in *DeactivateAllTriggersRequest, opts ...grpc.CallOption) (*DeactivateAllTriggersResponse, error)
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error)
	AddTag(ctx context.Context, in *AddTagRequest, opts ...grpc.CallOption) (*AddTagResponse, error)
	RegisterProducer(ctx context.Context, in *RegisterProducerRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterConsumer(ctx context.Context, in *RegisterConsumerRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SetExecutionInputs(ctx context.Context, in *ExecutionInputsRequest, opts ...grpc.CallOption) (*ExecutionInputsResponse, error)
	FindByWorkflowExec(ctx context.Context, in *FindByWorkflowExecRequest, opts ...grpc.CallOption) (*SearchArtifactsResponse, error)
	ListUsage(ctx context.Context, in *ListUsageRequest, opts ...grpc.CallOption) (*ListUsageResponse, error)
	GetTriggeringArtifacts(ctx context.Context, in *GetTriggeringArtifactsRequest, opts ...grpc.CallOption) (*GetTriggeringArtifactsResponse, error)
	GetTriggeredExecutionsByArtifact(ctx context.Context, in *GetTriggeredExecutionsByArtifactRequest, opts ...grpc.CallOption) (*GetTriggeredExecutionsByArtifactResponse, error)
}

type artifactRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactRegistryClient(cc grpc.ClientConnInterface) ArtifactRegistryClient {
	return &artifactRegistryClient{cc}
}

func (c *artifactRegistryClient) CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error) {
	out := new(CreateArtifactResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_CreateArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_GetArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) SearchArtifacts(ctx context.Context, in *SearchArtifactsRequest, opts ...grpc.CallOption) (*SearchArtifactsResponse, error) {
	out := new(SearchArtifactsResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_SearchArtifacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) CreateTrigger(ctx context.Context, in *CreateTriggerRequest, opts ...grpc.CallOption) (*CreateTriggerResponse, error) {
	out := new(CreateTriggerResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_CreateTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ActivateTrigger(ctx context.Context, in *ActivateTriggerRequest, opts ...grpc.CallOption) (*ActivateTriggerResponse, error) {
	out := new(ActivateTriggerResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_ActivateTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeactivateTrigger(ctx context.Context, in *DeactivateTriggerRequest, opts ...grpc.CallOption) (*DeactivateTriggerResponse, error) {
	out := new(DeactivateTriggerResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_DeactivateTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeactivateAllTriggers(ctx context.Context, in *DeactivateAllTriggersRequest, opts ...grpc.CallOption) (*DeactivateAllTriggersResponse, error) {
	out := new(DeactivateAllTriggersResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_DeactivateAllTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error) {
	out := new(GetCardResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_GetCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) AddTag(ctx context.Context, in *AddTagRequest, opts ...grpc.CallOption) (*AddTagResponse, error) {
	out := new(AddTagResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_AddTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) RegisterProducer(ctx context.Context, in *RegisterProducerRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_RegisterProducer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) RegisterConsumer(ctx context.Context, in *RegisterConsumerRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_RegisterConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) SetExecutionInputs(ctx context.Context, in *ExecutionInputsRequest, opts ...grpc.CallOption) (*ExecutionInputsResponse, error) {
	out := new(ExecutionInputsResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_SetExecutionInputs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) FindByWorkflowExec(ctx context.Context, in *FindByWorkflowExecRequest, opts ...grpc.CallOption) (*SearchArtifactsResponse, error) {
	out := new(SearchArtifactsResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_FindByWorkflowExec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListUsage(ctx context.Context, in *ListUsageRequest, opts ...grpc.CallOption) (*ListUsageResponse, error) {
	out := new(ListUsageResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_ListUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetTriggeringArtifacts(ctx context.Context, in *GetTriggeringArtifactsRequest, opts ...grpc.CallOption) (*GetTriggeringArtifactsResponse, error) {
	out := new(GetTriggeringArtifactsResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_GetTriggeringArtifacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetTriggeredExecutionsByArtifact(ctx context.Context, in *GetTriggeredExecutionsByArtifactRequest, opts ...grpc.CallOption) (*GetTriggeredExecutionsByArtifactResponse, error) {
	out := new(GetTriggeredExecutionsByArtifactResponse)
	err := c.cc.Invoke(ctx, ArtifactRegistry_GetTriggeredExecutionsByArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactRegistryServer is the server API for ArtifactRegistry service.
// All implementations should embed UnimplementedArtifactRegistryServer
// for forward compatibility
type ArtifactRegistryServer interface {
	CreateArtifact(context.Context, *CreateArtifactRequest) (*CreateArtifactResponse, error)
	GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
	SearchArtifacts(context.Context, *SearchArtifactsRequest) (*SearchArtifactsResponse, error)
	CreateTrigger(context.Context, *CreateTriggerRequest) (*CreateTriggerResponse, error)
	ActivateTrigger(context.Context, *ActivateTriggerRequest) (*ActivateTriggerResponse, error)
	DeactivateTrigger(context.Context, *DeactivateTriggerRequest) (*DeactivateTriggerResponse, error)
	DeactivateAllTriggers(context.Context, *DeactivateAllTriggersRequest) (*DeactivateAllTriggersResponse, error)
	GetCard(context.Context, *GetCardRequest) (*GetCardResponse, error)
	AddTag(context.Context, *AddTagRequest) (*AddTagResponse, error)
	RegisterProducer(context.Context, *RegisterProducerRequest) (*RegisterResponse, error)
	RegisterConsumer(context.Context, *RegisterConsumerRequest) (*RegisterResponse, error)
	SetExecutionInputs(context.Context, *ExecutionInputsRequest) (*ExecutionInputsResponse, error)
	FindByWorkflowExec(context.Context, *FindByWorkflowExecRequest) (*SearchArtifactsResponse, error)
	ListUsage(context.Context, *ListUsageRequest) (*ListUsageResponse, error)
	GetTriggeringArtifacts(context.Context, *GetTriggeringArtifactsRequest) (*GetTriggeringArtifactsResponse, error)
	GetTriggeredExecutionsByArtifact(context.Context, *GetTriggeredExecutionsByArtifactRequest) (*GetTriggeredExecutionsByArtifactResponse, error)
}

// UnimplementedArtifactRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedArtifactRegistryServer struct {
}

func (UnimplementedArtifactRegistryServer) CreateArtifact(context.Context, *CreateArtifactRequest) (*CreateArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifact not implemented")
}
func (UnimplementedArtifactRegistryServer) GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedArtifactRegistryServer) SearchArtifacts(context.Context, *SearchArtifactsRequest) (*SearchArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArtifacts not implemented")
}
func (UnimplementedArtifactRegistryServer) CreateTrigger(context.Context, *CreateTriggerRequest) (*CreateTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrigger not implemented")
}
func (UnimplementedArtifactRegistryServer) ActivateTrigger(context.Context, *ActivateTriggerRequest) (*ActivateTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateTrigger not implemented")
}
func (UnimplementedArtifactRegistryServer) DeactivateTrigger(context.Context, *DeactivateTriggerRequest) (*DeactivateTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateTrigger not implemented")
}
func (UnimplementedArtifactRegistryServer) DeactivateAllTriggers(context.Context, *DeactivateAllTriggersRequest) (*DeactivateAllTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAllTriggers not implemented")
}
func (UnimplementedArtifactRegistryServer) GetCard(context.Context, *GetCardRequest) (*GetCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedArtifactRegistryServer) AddTag(context.Context, *AddTagRequest) (*AddTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedArtifactRegistryServer) RegisterProducer(context.Context, *RegisterProducerRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProducer not implemented")
}
func (UnimplementedArtifactRegistryServer) RegisterConsumer(context.Context, *RegisterConsumerRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConsumer not implemented")
}
func (UnimplementedArtifactRegistryServer) SetExecutionInputs(context.Context, *ExecutionInputsRequest) (*ExecutionInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecutionInputs not implemented")
}
func (UnimplementedArtifactRegistryServer) FindByWorkflowExec(context.Context, *FindByWorkflowExecRequest) (*SearchArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByWorkflowExec not implemented")
}
func (UnimplementedArtifactRegistryServer) ListUsage(context.Context, *ListUsageRequest) (*ListUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsage not implemented")
}
func (UnimplementedArtifactRegistryServer) GetTriggeringArtifacts(context.Context, *GetTriggeringArtifactsRequest) (*GetTriggeringArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggeringArtifacts not implemented")
}
func (UnimplementedArtifactRegistryServer) GetTriggeredExecutionsByArtifact(context.Context, *GetTriggeredExecutionsByArtifactRequest) (*GetTriggeredExecutionsByArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggeredExecutionsByArtifact not implemented")
}

// UnsafeArtifactRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactRegistryServer will
// result in compilation errors.
type UnsafeArtifactRegistryServer interface {
	mustEmbedUnimplementedArtifactRegistryServer()
}

func RegisterArtifactRegistryServer(s grpc.ServiceRegistrar, srv ArtifactRegistryServer) {
	s.RegisterService(&ArtifactRegistry_ServiceDesc, srv)
}

func _ArtifactRegistry_CreateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).CreateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_CreateArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).CreateArtifact(ctx, req.(*CreateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_GetArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_SearchArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).SearchArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_SearchArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).SearchArtifacts(ctx, req.(*SearchArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_CreateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).CreateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_CreateTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).CreateTrigger(ctx, req.(*CreateTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ActivateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ActivateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_ActivateTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ActivateTrigger(ctx, req.(*ActivateTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeactivateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeactivateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_DeactivateTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeactivateTrigger(ctx, req.(*DeactivateTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeactivateAllTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAllTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeactivateAllTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_DeactivateAllTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeactivateAllTriggers(ctx, req.(*DeactivateAllTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_AddTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).AddTag(ctx, req.(*AddTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_RegisterProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).RegisterProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_RegisterProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).RegisterProducer(ctx, req.(*RegisterProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_RegisterConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).RegisterConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_RegisterConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).RegisterConsumer(ctx, req.(*RegisterConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_SetExecutionInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).SetExecutionInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_SetExecutionInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).SetExecutionInputs(ctx, req.(*ExecutionInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_FindByWorkflowExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByWorkflowExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).FindByWorkflowExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_FindByWorkflowExec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).FindByWorkflowExec(ctx, req.(*FindByWorkflowExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_ListUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListUsage(ctx, req.(*ListUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetTriggeringArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggeringArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetTriggeringArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_GetTriggeringArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetTriggeringArtifacts(ctx, req.(*GetTriggeringArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetTriggeredExecutionsByArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggeredExecutionsByArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetTriggeredExecutionsByArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactRegistry_GetTriggeredExecutionsByArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetTriggeredExecutionsByArtifact(ctx, req.(*GetTriggeredExecutionsByArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactRegistry_ServiceDesc is the grpc.ServiceDesc for ArtifactRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.artifact.ArtifactRegistry",
	HandlerType: (*ArtifactRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtifact",
			Handler:    _ArtifactRegistry_CreateArtifact_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _ArtifactRegistry_GetArtifact_Handler,
		},
		{
			MethodName: "SearchArtifacts",
			Handler:    _ArtifactRegistry_SearchArtifacts_Handler,
		},
		{
			MethodName: "CreateTrigger",
			Handler:    _ArtifactRegistry_CreateTrigger_Handler,
		},
		{
			MethodName: "ActivateTrigger",
			Handler:    _ArtifactRegistry_ActivateTrigger_Handler,
		},
		{
			MethodName: "DeactivateTrigger",
			Handler:    _ArtifactRegistry_DeactivateTrigger_Handler,
		},
		{
			MethodName: "DeactivateAllTriggers",
			Handler:    _ArtifactRegistry_DeactivateAllTriggers_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _ArtifactRegistry_GetCard_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _ArtifactRegistry_AddTag_Handler,
		},
		{
			MethodName: "RegisterProducer",
			Handler:    _ArtifactRegistry_RegisterProducer_Handler,
		},
		{
			MethodName: "RegisterConsumer",
			Handler:    _ArtifactRegistry_RegisterConsumer_Handler,
		},
		{
			MethodName: "SetExecutionInputs",
			Handler:    _ArtifactRegistry_SetExecutionInputs_Handler,
		},
		{
			MethodName: "FindByWorkflowExec",
			Handler:    _ArtifactRegistry_FindByWorkflowExec_Handler,
		},
		{
			MethodName: "ListUsage",
			Handler:    _ArtifactRegistry_ListUsage_Handler,
		},
		{
			MethodName: "GetTriggeringArtifacts",
			Handler:    _ArtifactRegistry_GetTriggeringArtifacts_Handler,
		},
		{
			MethodName: "GetTriggeredExecutionsByArtifact",
			Handler:    _ArtifactRegistry_GetTriggeredExecutionsByArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/artifacts/artifacts.proto",
}
