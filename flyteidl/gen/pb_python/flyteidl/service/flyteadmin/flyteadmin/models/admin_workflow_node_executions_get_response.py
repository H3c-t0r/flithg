# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_compiled_workflow_closure import CoreCompiledWorkflowClosure  # noqa: F401,E501
from flyteadmin.models.flyteidladmin_node_execution import FlyteidladminNodeExecution  # noqa: F401,E501


class AdminWorkflowNodeExecutionsGetResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'closure': 'CoreCompiledWorkflowClosure',
        'node_executions': 'list[FlyteidladminNodeExecution]'
    }

    attribute_map = {
        'closure': 'closure',
        'node_executions': 'node_executions'
    }

    def __init__(self, closure=None, node_executions=None):  # noqa: E501
        """AdminWorkflowNodeExecutionsGetResponse - a model defined in Swagger"""  # noqa: E501

        self._closure = None
        self._node_executions = None
        self.discriminator = None

        if closure is not None:
            self.closure = closure
        if node_executions is not None:
            self.node_executions = node_executions

    @property
    def closure(self):
        """Gets the closure of this AdminWorkflowNodeExecutionsGetResponse.  # noqa: E501


        :return: The closure of this AdminWorkflowNodeExecutionsGetResponse.  # noqa: E501
        :rtype: CoreCompiledWorkflowClosure
        """
        return self._closure

    @closure.setter
    def closure(self, closure):
        """Sets the closure of this AdminWorkflowNodeExecutionsGetResponse.


        :param closure: The closure of this AdminWorkflowNodeExecutionsGetResponse.  # noqa: E501
        :type: CoreCompiledWorkflowClosure
        """

        self._closure = closure

    @property
    def node_executions(self):
        """Gets the node_executions of this AdminWorkflowNodeExecutionsGetResponse.  # noqa: E501


        :return: The node_executions of this AdminWorkflowNodeExecutionsGetResponse.  # noqa: E501
        :rtype: list[FlyteidladminNodeExecution]
        """
        return self._node_executions

    @node_executions.setter
    def node_executions(self, node_executions):
        """Sets the node_executions of this AdminWorkflowNodeExecutionsGetResponse.


        :param node_executions: The node_executions of this AdminWorkflowNodeExecutionsGetResponse.  # noqa: E501
        :type: list[FlyteidladminNodeExecution]
        """

        self._node_executions = node_executions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminWorkflowNodeExecutionsGetResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminWorkflowNodeExecutionsGetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
