// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/artifact/artifacts.proto

#include "flyteidl/artifact/artifacts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateArtifactRequest_PartitionsEntry_DoNotUse_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SearchOptions_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ParameterMap_flyteidl_2fcore_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VariableMap_flyteidl_2fcore_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<10> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftypes_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace flyteidl {
namespace artifact {
class ArtifactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Artifact> _instance;
} _Artifact_default_instance_;
class CreateArtifactRequest_PartitionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateArtifactRequest_PartitionsEntry_DoNotUse> _instance;
} _CreateArtifactRequest_PartitionsEntry_DoNotUse_default_instance_;
class CreateArtifactRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateArtifactRequest> _instance;
} _CreateArtifactRequest_default_instance_;
class ArtifactSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactSource> _instance;
} _ArtifactSource_default_instance_;
class ArtifactSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactSpec> _instance;
} _ArtifactSpec_default_instance_;
class CreateArtifactResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateArtifactResponse> _instance;
} _CreateArtifactResponse_default_instance_;
class GetArtifactRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetArtifactRequest> _instance;
} _GetArtifactRequest_default_instance_;
class GetArtifactResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetArtifactResponse> _instance;
} _GetArtifactResponse_default_instance_;
class SearchOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchOptions> _instance;
} _SearchOptions_default_instance_;
class SearchArtifactsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchArtifactsRequest> _instance;
} _SearchArtifactsRequest_default_instance_;
class SearchArtifactsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchArtifactsResponse> _instance;
} _SearchArtifactsResponse_default_instance_;
class FindByWorkflowExecRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FindByWorkflowExecRequest> _instance;
} _FindByWorkflowExecRequest_default_instance_;
class AddTagRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTagRequest> _instance;
} _AddTagRequest_default_instance_;
class AddTagResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTagResponse> _instance;
} _AddTagResponse_default_instance_;
class CreateTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateTriggerRequest> _instance;
} _CreateTriggerRequest_default_instance_;
class CreateTriggerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateTriggerResponse> _instance;
} _CreateTriggerResponse_default_instance_;
class DeleteTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTriggerRequest> _instance;
} _DeleteTriggerRequest_default_instance_;
class DeleteTriggerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTriggerResponse> _instance;
} _DeleteTriggerResponse_default_instance_;
class ArtifactProducerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactProducer> _instance;
} _ArtifactProducer_default_instance_;
class RegisterProducerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterProducerRequest> _instance;
} _RegisterProducerRequest_default_instance_;
class ArtifactConsumerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactConsumer> _instance;
} _ArtifactConsumer_default_instance_;
class RegisterConsumerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterConsumerRequest> _instance;
} _RegisterConsumerRequest_default_instance_;
class RegisterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterResponse> _instance;
} _RegisterResponse_default_instance_;
class ExecutionInputsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionInputsRequest> _instance;
} _ExecutionInputsRequest_default_instance_;
class ExecutionInputsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionInputsResponse> _instance;
} _ExecutionInputsResponse_default_instance_;
}  // namespace artifact
}  // namespace flyteidl
static void InitDefaultsArtifact_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_Artifact_default_instance_;
    new (ptr) ::flyteidl::artifact::Artifact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::Artifact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsArtifact_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base,
      &scc_info_ArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsCreateArtifactRequest_PartitionsEntry_DoNotUse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateArtifactRequest_PartitionsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse();
  }
  ::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateArtifactRequest_PartitionsEntry_DoNotUse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateArtifactRequest_PartitionsEntry_DoNotUse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsCreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateArtifactRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateArtifactRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateArtifactRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base,
      &scc_info_CreateArtifactRequest_PartitionsEntry_DoNotUse_flyteidl_2fartifact_2fartifacts_2eproto.base,
      &scc_info_ArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ArtifactSource_default_instance_;
    new (ptr) ::flyteidl::artifact::ArtifactSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ArtifactSource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ArtifactSpec_default_instance_;
    new (ptr) ::flyteidl::artifact::ArtifactSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ArtifactSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsCreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateArtifactResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateArtifactResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateArtifactResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsGetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_GetArtifactRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::GetArtifactRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::GetArtifactRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsGetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_GetArtifactResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::GetArtifactResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::GetArtifactResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsSearchOptions_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_SearchOptions_default_instance_;
    new (ptr) ::flyteidl::artifact::SearchOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::SearchOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SearchOptions_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSearchOptions_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsSearchArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_SearchArtifactsRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::SearchArtifactsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::SearchArtifactsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SearchArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSearchArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_SearchOptions_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsSearchArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_SearchArtifactsResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::SearchArtifactsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::SearchArtifactsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SearchArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSearchArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsFindByWorkflowExecRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_FindByWorkflowExecRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::FindByWorkflowExecRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::FindByWorkflowExecRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FindByWorkflowExecRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFindByWorkflowExecRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsAddTagRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_AddTagRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::AddTagRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::AddTagRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddTagRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddTagRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsAddTagResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_AddTagResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::AddTagResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::AddTagResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddTagResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddTagResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsCreateTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateTriggerRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base,}};

static void InitDefaultsCreateTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateTriggerResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateTriggerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateTriggerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsDeleteTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_DeleteTriggerRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::DeleteTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::DeleteTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeleteTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeleteTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsDeleteTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_DeleteTriggerResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::DeleteTriggerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::DeleteTriggerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ArtifactProducer_default_instance_;
    new (ptr) ::flyteidl::artifact::ArtifactProducer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ArtifactProducer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_VariableMap_flyteidl_2fcore_2finterface_2eproto.base,}};

static void InitDefaultsRegisterProducerRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_RegisterProducerRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::RegisterProducerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::RegisterProducerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterProducerRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterProducerRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ArtifactConsumer_default_instance_;
    new (ptr) ::flyteidl::artifact::ArtifactConsumer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ArtifactConsumer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ParameterMap_flyteidl_2fcore_2finterface_2eproto.base,}};

static void InitDefaultsRegisterConsumerRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_RegisterConsumerRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::RegisterConsumerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::RegisterConsumerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterConsumerRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterConsumerRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsRegisterResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_RegisterResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::RegisterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::RegisterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsExecutionInputsRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ExecutionInputsRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::ExecutionInputsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ExecutionInputsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ExecutionInputsRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExecutionInputsRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsExecutionInputsResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ExecutionInputsResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::ExecutionInputsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ExecutionInputsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionInputsResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecutionInputsResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

void InitDefaults_flyteidl_2fartifact_2fartifacts_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateArtifactRequest_PartitionsEntry_DoNotUse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchOptions_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SearchArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FindByWorkflowExecRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTagRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTagResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterProducerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterConsumerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionInputsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionInputsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fartifact_2fartifacts_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fartifact_2fartifacts_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fartifact_2fartifacts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, tags_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, source_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, artifact_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, partitions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, tag_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSource, workflow_execution_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSource, node_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSource, task_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSource, retry_attempt_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSource, principal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, short_description_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, user_metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, metadata_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactRequest, query_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactRequest, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchOptions, strict_partitions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchOptions, latest_by_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, artifact_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, partitions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, principal_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, options_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsResponse, artifacts_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::SearchArtifactsResponse, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::FindByWorkflowExecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::FindByWorkflowExecRequest, exec_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::FindByWorkflowExecRequest, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagRequest, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagRequest, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagRequest, overwrite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateTriggerRequest, trigger_launch_plan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateTriggerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::DeleteTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::DeleteTriggerRequest, trigger_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::DeleteTriggerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactProducer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactProducer, entity_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactProducer, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RegisterProducerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RegisterProducerRequest, producers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactConsumer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactConsumer, entity_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactConsumer, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RegisterConsumerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RegisterConsumerRequest, consumers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ExecutionInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ExecutionInputsRequest, execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ExecutionInputsRequest, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ExecutionInputsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::artifact::Artifact)},
  { 9, 16, sizeof(::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse)},
  { 18, -1, sizeof(::flyteidl::artifact::CreateArtifactRequest)},
  { 29, -1, sizeof(::flyteidl::artifact::ArtifactSource)},
  { 39, -1, sizeof(::flyteidl::artifact::ArtifactSpec)},
  { 49, -1, sizeof(::flyteidl::artifact::CreateArtifactResponse)},
  { 55, -1, sizeof(::flyteidl::artifact::GetArtifactRequest)},
  { 62, -1, sizeof(::flyteidl::artifact::GetArtifactResponse)},
  { 68, -1, sizeof(::flyteidl::artifact::SearchOptions)},
  { 75, -1, sizeof(::flyteidl::artifact::SearchArtifactsRequest)},
  { 87, -1, sizeof(::flyteidl::artifact::SearchArtifactsResponse)},
  { 94, -1, sizeof(::flyteidl::artifact::FindByWorkflowExecRequest)},
  { 101, -1, sizeof(::flyteidl::artifact::AddTagRequest)},
  { 109, -1, sizeof(::flyteidl::artifact::AddTagResponse)},
  { 114, -1, sizeof(::flyteidl::artifact::CreateTriggerRequest)},
  { 120, -1, sizeof(::flyteidl::artifact::CreateTriggerResponse)},
  { 125, -1, sizeof(::flyteidl::artifact::DeleteTriggerRequest)},
  { 131, -1, sizeof(::flyteidl::artifact::DeleteTriggerResponse)},
  { 136, -1, sizeof(::flyteidl::artifact::ArtifactProducer)},
  { 143, -1, sizeof(::flyteidl::artifact::RegisterProducerRequest)},
  { 149, -1, sizeof(::flyteidl::artifact::ArtifactConsumer)},
  { 156, -1, sizeof(::flyteidl::artifact::RegisterConsumerRequest)},
  { 162, -1, sizeof(::flyteidl::artifact::RegisterResponse)},
  { 167, -1, sizeof(::flyteidl::artifact::ExecutionInputsRequest)},
  { 174, -1, sizeof(::flyteidl::artifact::ExecutionInputsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_Artifact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateArtifactRequest_PartitionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateArtifactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ArtifactSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ArtifactSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateArtifactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_GetArtifactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_GetArtifactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_SearchOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_SearchArtifactsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_SearchArtifactsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_FindByWorkflowExecRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_AddTagRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_AddTagResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateTriggerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_DeleteTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_DeleteTriggerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ArtifactProducer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_RegisterProducerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ArtifactConsumer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_RegisterConsumerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_RegisterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ExecutionInputsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ExecutionInputsResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto = {
  {}, AddDescriptors_flyteidl_2fartifact_2fartifacts_2eproto, "flyteidl/artifact/artifacts.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fartifact_2fartifacts_2eproto::offsets,
  file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto, 25, file_level_enum_descriptors_flyteidl_2fartifact_2fartifacts_2eproto, file_level_service_descriptors_flyteidl_2fartifact_2fartifacts_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fartifact_2fartifacts_2eproto[] =
  "\n!flyteidl/artifact/artifacts.proto\022\021fly"
  "teidl.artifact\032\031google/protobuf/any.prot"
  "o\032\034google/api/annotations.proto\032 flyteid"
  "l/admin/launch_plan.proto\032\034flyteidl/core"
  "/literals.proto\032\031flyteidl/core/types.pro"
  "to\032\036flyteidl/core/identifier.proto\032\037flyt"
  "eidl/core/artifact_id.proto\032\035flyteidl/co"
  "re/interface.proto\032 flyteidl/event/cloud"
  "events.proto\"\252\001\n\010Artifact\022.\n\013artifact_id"
  "\030\001 \001(\0132\031.flyteidl.core.ArtifactID\022-\n\004spe"
  "c\030\002 \001(\0132\037.flyteidl.artifact.ArtifactSpec"
  "\022\014\n\004tags\030\003 \003(\t\0221\n\006source\030\004 \001(\0132!.flyteid"
  "l.artifact.ArtifactSource\"\312\002\n\025CreateArti"
  "factRequest\0220\n\014artifact_key\030\001 \001(\0132\032.flyt"
  "eidl.core.ArtifactKey\022\017\n\007version\030\003 \001(\t\022-"
  "\n\004spec\030\002 \001(\0132\037.flyteidl.artifact.Artifac"
  "tSpec\022L\n\npartitions\030\004 \003(\01328.flyteidl.art"
  "ifact.CreateArtifactRequest.PartitionsEn"
  "try\022\013\n\003tag\030\005 \001(\t\0221\n\006source\030\006 \001(\0132!.flyte"
  "idl.artifact.ArtifactSource\0321\n\017Partition"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\277"
  "\001\n\016ArtifactSource\022F\n\022workflow_execution\030"
  "\001 \001(\0132*.flyteidl.core.WorkflowExecutionI"
  "dentifier\022\017\n\007node_id\030\002 \001(\t\022*\n\007task_id\030\003 "
  "\001(\0132\031.flyteidl.core.Identifier\022\025\n\rretry_"
  "attempt\030\004 \001(\r\022\021\n\tprincipal\030\005 \001(\t\"\276\001\n\014Art"
  "ifactSpec\022%\n\005value\030\001 \001(\0132\026.flyteidl.core"
  ".Literal\022(\n\004type\030\002 \001(\0132\032.flyteidl.core.L"
  "iteralType\022\031\n\021short_description\030\003 \001(\t\022+\n"
  "\ruser_metadata\030\004 \001(\0132\024.google.protobuf.A"
  "ny\022\025\n\rmetadata_type\030\005 \001(\t\"G\n\026CreateArtif"
  "actResponse\022-\n\010artifact\030\001 \001(\0132\033.flyteidl"
  ".artifact.Artifact\"R\n\022GetArtifactRequest"
  "\022+\n\005query\030\001 \001(\0132\034.flyteidl.core.Artifact"
  "Query\022\017\n\007details\030\002 \001(\010\"D\n\023GetArtifactRes"
  "ponse\022-\n\010artifact\030\001 \001(\0132\033.flyteidl.artif"
  "act.Artifact\"A\n\rSearchOptions\022\031\n\021strict_"
  "partitions\030\001 \001(\010\022\025\n\rlatest_by_key\030\002 \001(\010\""
  "\356\001\n\026SearchArtifactsRequest\0220\n\014artifact_k"
  "ey\030\001 \001(\0132\032.flyteidl.core.ArtifactKey\022-\n\n"
  "partitions\030\002 \001(\0132\031.flyteidl.core.Partiti"
  "ons\022\021\n\tprincipal\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\022"
  "1\n\007options\030\005 \001(\0132 .flyteidl.artifact.Sea"
  "rchOptions\022\r\n\005token\030\006 \001(\t\022\r\n\005limit\030\007 \001(\005"
  "\"X\n\027SearchArtifactsResponse\022.\n\tartifacts"
  "\030\001 \003(\0132\033.flyteidl.artifact.Artifact\022\r\n\005t"
  "oken\030\002 \001(\t\"\311\001\n\031FindByWorkflowExecRequest"
  "\022;\n\007exec_id\030\001 \001(\0132*.flyteidl.core.Workfl"
  "owExecutionIdentifier\022I\n\tdirection\030\002 \001(\016"
  "26.flyteidl.artifact.FindByWorkflowExecR"
  "equest.Direction\"$\n\tDirection\022\n\n\006INPUTS\020"
  "\000\022\013\n\007OUTPUTS\020\001\"a\n\rAddTagRequest\022.\n\013artif"
  "act_id\030\001 \001(\0132\031.flyteidl.core.ArtifactID\022"
  "\r\n\005value\030\002 \001(\t\022\021\n\toverwrite\030\003 \001(\010\"\020\n\016Add"
  "TagResponse\"O\n\024CreateTriggerRequest\0227\n\023t"
  "rigger_launch_plan\030\001 \001(\0132\032.flyteidl.admi"
  "n.LaunchPlan\"\027\n\025CreateTriggerResponse\"E\n"
  "\024DeleteTriggerRequest\022-\n\ntrigger_id\030\001 \001("
  "\0132\031.flyteidl.core.Identifier\"\027\n\025DeleteTr"
  "iggerResponse\"m\n\020ArtifactProducer\022,\n\tent"
  "ity_id\030\001 \001(\0132\031.flyteidl.core.Identifier\022"
  "+\n\007outputs\030\002 \001(\0132\032.flyteidl.core.Variabl"
  "eMap\"Q\n\027RegisterProducerRequest\0226\n\tprodu"
  "cers\030\001 \003(\0132#.flyteidl.artifact.ArtifactP"
  "roducer\"m\n\020ArtifactConsumer\022,\n\tentity_id"
  "\030\001 \001(\0132\031.flyteidl.core.Identifier\022+\n\006inp"
  "uts\030\002 \001(\0132\033.flyteidl.core.ParameterMap\"Q"
  "\n\027RegisterConsumerRequest\0226\n\tconsumers\030\001"
  " \003(\0132#.flyteidl.artifact.ArtifactConsume"
  "r\"\022\n\020RegisterResponse\"\205\001\n\026ExecutionInput"
  "sRequest\022@\n\014execution_id\030\001 \001(\0132*.flyteid"
  "l.core.WorkflowExecutionIdentifier\022)\n\006in"
  "puts\030\002 \003(\0132\031.flyteidl.core.ArtifactID\"\031\n"
  "\027ExecutionInputsResponse2\327\016\n\020ArtifactReg"
  "istry\022g\n\016CreateArtifact\022(.flyteidl.artif"
  "act.CreateArtifactRequest\032).flyteidl.art"
  "ifact.CreateArtifactResponse\"\000\022\205\005\n\013GetAr"
  "tifact\022%.flyteidl.artifact.GetArtifactRe"
  "quest\032&.flyteidl.artifact.GetArtifactRes"
  "ponse\"\246\004\202\323\344\223\002\237\004\022 /artifacts/api/v1/data/"
  "artifactsZ\270\001\022\265\001/artifacts/api/v1/data/ar"
  "tifact/id/{query.artifact_id.artifact_ke"
  "y.project}/{query.artifact_id.artifact_k"
  "ey.domain}/{query.artifact_id.artifact_k"
  "ey.name}/{query.artifact_id.version}Z\234\001\022"
  "\231\001/artifacts/api/v1/data/artifact/id/{qu"
  "ery.artifact_id.artifact_key.project}/{q"
  "uery.artifact_id.artifact_key.domain}/{q"
  "uery.artifact_id.artifact_key.name}Z\240\001\022\235"
  "\001/artifacts/api/v1/data/artifact/tag/{qu"
  "ery.artifact_tag.artifact_key.project}/{"
  "query.artifact_tag.artifact_key.domain}/"
  "{query.artifact_tag.artifact_key.name}\022\240"
  "\002\n\017SearchArtifacts\022).flyteidl.artifact.S"
  "earchArtifactsRequest\032*.flyteidl.artifac"
  "t.SearchArtifactsResponse\"\265\001\202\323\344\223\002\256\001\022_/ar"
  "tifacts/api/v1/data/query/s/{artifact_ke"
  "y.project}/{artifact_key.domain}/{artifa"
  "ct_key.name}ZK\022I/artifacts/api/v1/data/q"
  "uery/{artifact_key.project}/{artifact_ke"
  "y.domain}\022d\n\rCreateTrigger\022\'.flyteidl.ar"
  "tifact.CreateTriggerRequest\032(.flyteidl.a"
  "rtifact.CreateTriggerResponse\"\000\022d\n\rDelet"
  "eTrigger\022\'.flyteidl.artifact.DeleteTrigg"
  "erRequest\032(.flyteidl.artifact.DeleteTrig"
  "gerResponse\"\000\022O\n\006AddTag\022 .flyteidl.artif"
  "act.AddTagRequest\032!.flyteidl.artifact.Ad"
  "dTagResponse\"\000\022e\n\020RegisterProducer\022*.fly"
  "teidl.artifact.RegisterProducerRequest\032#"
  ".flyteidl.artifact.RegisterResponse\"\000\022e\n"
  "\020RegisterConsumer\022*.flyteidl.artifact.Re"
  "gisterConsumerRequest\032#.flyteidl.artifac"
  "t.RegisterResponse\"\000\022m\n\022SetExecutionInpu"
  "ts\022).flyteidl.artifact.ExecutionInputsRe"
  "quest\032*.flyteidl.artifact.ExecutionInput"
  "sResponse\"\000\022\324\001\n\022FindByWorkflowExec\022,.fly"
  "teidl.artifact.FindByWorkflowExecRequest"
  "\032*.flyteidl.artifact.SearchArtifactsResp"
  "onse\"d\202\323\344\223\002^\022\\/artifacts/api/v1/data/que"
  "ry/e/{exec_id.project}/{exec_id.domain}/"
  "{exec_id.name}/{direction}B@Z>github.com"
  "/flyteorg/flyte/flyteidl/gen/pb-go/flyte"
  "idl/artifactb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fartifact_2fartifacts_2eproto = {
  false, InitDefaults_flyteidl_2fartifact_2fartifacts_2eproto, 
  descriptor_table_protodef_flyteidl_2fartifact_2fartifacts_2eproto,
  "flyteidl/artifact/artifacts.proto", &assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto, 4900,
};

void AddDescriptors_flyteidl_2fartifact_2fartifacts_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[9] =
  {
    ::AddDescriptors_google_2fprotobuf_2fany_2eproto,
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2ftypes_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fartifact_5fid_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2finterface_2eproto,
    ::AddDescriptors_flyteidl_2fevent_2fcloudevents_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fartifact_2fartifacts_2eproto, deps, 9);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fartifact_2fartifacts_2eproto = []() { AddDescriptors_flyteidl_2fartifact_2fartifacts_2eproto(); return true; }();
namespace flyteidl {
namespace artifact {
const ::google::protobuf::EnumDescriptor* FindByWorkflowExecRequest_Direction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return file_level_enum_descriptors_flyteidl_2fartifact_2fartifacts_2eproto[0];
}
bool FindByWorkflowExecRequest_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FindByWorkflowExecRequest_Direction FindByWorkflowExecRequest::INPUTS;
const FindByWorkflowExecRequest_Direction FindByWorkflowExecRequest::OUTPUTS;
const FindByWorkflowExecRequest_Direction FindByWorkflowExecRequest::Direction_MIN;
const FindByWorkflowExecRequest_Direction FindByWorkflowExecRequest::Direction_MAX;
const int FindByWorkflowExecRequest::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Artifact::InitAsDefaultInstance() {
  ::flyteidl::artifact::_Artifact_default_instance_._instance.get_mutable()->artifact_id_ = const_cast< ::flyteidl::core::ArtifactID*>(
      ::flyteidl::core::ArtifactID::internal_default_instance());
  ::flyteidl::artifact::_Artifact_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::artifact::ArtifactSpec*>(
      ::flyteidl::artifact::ArtifactSpec::internal_default_instance());
  ::flyteidl::artifact::_Artifact_default_instance_._instance.get_mutable()->source_ = const_cast< ::flyteidl::artifact::ArtifactSource*>(
      ::flyteidl::artifact::ArtifactSource::internal_default_instance());
}
class Artifact::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactID& artifact_id(const Artifact* msg);
  static const ::flyteidl::artifact::ArtifactSpec& spec(const Artifact* msg);
  static const ::flyteidl::artifact::ArtifactSource& source(const Artifact* msg);
};

const ::flyteidl::core::ArtifactID&
Artifact::HasBitSetters::artifact_id(const Artifact* msg) {
  return *msg->artifact_id_;
}
const ::flyteidl::artifact::ArtifactSpec&
Artifact::HasBitSetters::spec(const Artifact* msg) {
  return *msg->spec_;
}
const ::flyteidl::artifact::ArtifactSource&
Artifact::HasBitSetters::source(const Artifact* msg) {
  return *msg->source_;
}
void Artifact::clear_artifact_id() {
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Artifact::kArtifactIdFieldNumber;
const int Artifact::kSpecFieldNumber;
const int Artifact::kTagsFieldNumber;
const int Artifact::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Artifact::Artifact()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.Artifact)
}
Artifact::Artifact(const Artifact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_id()) {
    artifact_id_ = new ::flyteidl::core::ArtifactID(*from.artifact_id_);
  } else {
    artifact_id_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::artifact::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from.has_source()) {
    source_ = new ::flyteidl::artifact::ArtifactSource(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.Artifact)
}

void Artifact::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&artifact_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&artifact_id_)) + sizeof(source_));
}

Artifact::~Artifact() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.Artifact)
  SharedDtor();
}

void Artifact::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_id_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete source_;
}

void Artifact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Artifact& Artifact::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void Artifact::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Artifact::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Artifact*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.artifact.ArtifactSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::ArtifactSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string tags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.artifact.Artifact.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .flyteidl.artifact.ArtifactSource source = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::ArtifactSource::_InternalParse;
        object = msg->mutable_source();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Artifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.Artifact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.ArtifactSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.Artifact.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.ArtifactSource source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.Artifact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.Artifact)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Artifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_id(this), output);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Artifact.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // .flyteidl.artifact.ArtifactSource source = 4;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.Artifact)
}

::google::protobuf::uint8* Artifact::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_id(this), target);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Artifact.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // .flyteidl.artifact.ArtifactSource source = 4;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.Artifact)
  return target;
}

size_t Artifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.Artifact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_id_);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .flyteidl.artifact.ArtifactSource source = 4;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Artifact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  const Artifact* source =
      ::google::protobuf::DynamicCastToGenerated<Artifact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.Artifact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.Artifact)
    MergeFrom(*source);
  }
}

void Artifact::MergeFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_artifact_id()) {
    mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::artifact::ArtifactSpec::MergeFrom(from.spec());
  }
  if (from.has_source()) {
    mutable_source()->::flyteidl::artifact::ArtifactSource::MergeFrom(from.source());
  }
}

void Artifact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Artifact::CopyFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Artifact::IsInitialized() const {
  return true;
}

void Artifact::Swap(Artifact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Artifact::InternalSwap(Artifact* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  swap(artifact_id_, other->artifact_id_);
  swap(spec_, other->spec_);
  swap(source_, other->source_);
}

::google::protobuf::Metadata Artifact::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

CreateArtifactRequest_PartitionsEntry_DoNotUse::CreateArtifactRequest_PartitionsEntry_DoNotUse() {}
CreateArtifactRequest_PartitionsEntry_DoNotUse::CreateArtifactRequest_PartitionsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CreateArtifactRequest_PartitionsEntry_DoNotUse::MergeFrom(const CreateArtifactRequest_PartitionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CreateArtifactRequest_PartitionsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[1];
}
void CreateArtifactRequest_PartitionsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateArtifactRequest_PartitionsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CreateArtifactRequest_PartitionsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void CreateArtifactRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_CreateArtifactRequest_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::artifact::_CreateArtifactRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::artifact::ArtifactSpec*>(
      ::flyteidl::artifact::ArtifactSpec::internal_default_instance());
  ::flyteidl::artifact::_CreateArtifactRequest_default_instance_._instance.get_mutable()->source_ = const_cast< ::flyteidl::artifact::ArtifactSource*>(
      ::flyteidl::artifact::ArtifactSource::internal_default_instance());
}
class CreateArtifactRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const CreateArtifactRequest* msg);
  static const ::flyteidl::artifact::ArtifactSpec& spec(const CreateArtifactRequest* msg);
  static const ::flyteidl::artifact::ArtifactSource& source(const CreateArtifactRequest* msg);
};

const ::flyteidl::core::ArtifactKey&
CreateArtifactRequest::HasBitSetters::artifact_key(const CreateArtifactRequest* msg) {
  return *msg->artifact_key_;
}
const ::flyteidl::artifact::ArtifactSpec&
CreateArtifactRequest::HasBitSetters::spec(const CreateArtifactRequest* msg) {
  return *msg->spec_;
}
const ::flyteidl::artifact::ArtifactSource&
CreateArtifactRequest::HasBitSetters::source(const CreateArtifactRequest* msg) {
  return *msg->source_;
}
void CreateArtifactRequest::clear_artifact_key() {
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateArtifactRequest::kArtifactKeyFieldNumber;
const int CreateArtifactRequest::kVersionFieldNumber;
const int CreateArtifactRequest::kSpecFieldNumber;
const int CreateArtifactRequest::kPartitionsFieldNumber;
const int CreateArtifactRequest::kTagFieldNumber;
const int CreateArtifactRequest::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateArtifactRequest::CreateArtifactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateArtifactRequest)
}
CreateArtifactRequest::CreateArtifactRequest(const CreateArtifactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partitions_.MergeFrom(from.partitions_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::artifact::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from.has_source()) {
    source_ = new ::flyteidl::artifact::ArtifactSource(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateArtifactRequest)
}

void CreateArtifactRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&artifact_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&artifact_key_)) + sizeof(source_));
}

CreateArtifactRequest::~CreateArtifactRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateArtifactRequest)
  SharedDtor();
}

void CreateArtifactRequest::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete artifact_key_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete source_;
}

void CreateArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateArtifactRequest& CreateArtifactRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateArtifactRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateArtifactRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.artifact.ArtifactSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::ArtifactSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.CreateArtifactRequest.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> partitions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->partitions_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // string tag = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.CreateArtifactRequest.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.artifact.ArtifactSource source = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::ArtifactSource::_InternalParse;
        object = msg->mutable_source();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateArtifactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateArtifactRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.ArtifactSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.CreateArtifactRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> partitions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          CreateArtifactRequest_PartitionsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CreateArtifactRequest_PartitionsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&partitions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.CreateArtifactRequest.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.ArtifactSource source = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateArtifactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateArtifactRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateArtifactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.CreateArtifactRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // map<string, string> partitions = 4;
  if (!this->partitions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->partitions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->partitions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->partitions().begin();
          it != this->partitions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateArtifactRequest_PartitionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(partitions_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateArtifactRequest_PartitionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->partitions().begin();
          it != this->partitions().end(); ++it) {
        entry.reset(partitions_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.CreateArtifactRequest.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tag(), output);
  }

  // .flyteidl.artifact.ArtifactSource source = 6;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateArtifactRequest)
}

::google::protobuf::uint8* CreateArtifactRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.CreateArtifactRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // map<string, string> partitions = 4;
  if (!this->partitions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.artifact.CreateArtifactRequest.PartitionsEntry.value");
      }
    };

    if (false &&
        this->partitions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->partitions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->partitions().begin();
          it != this->partitions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateArtifactRequest_PartitionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(partitions_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateArtifactRequest_PartitionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->partitions().begin();
          it != this->partitions().end(); ++it) {
        entry.reset(partitions_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.CreateArtifactRequest.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tag(), target);
  }

  // .flyteidl.artifact.ArtifactSource source = 6;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateArtifactRequest)
  return target;
}

size_t CreateArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateArtifactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> partitions = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->partitions_size());
  {
    ::std::unique_ptr<CreateArtifactRequest_PartitionsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->partitions().begin();
        it != this->partitions().end(); ++it) {
      entry.reset(partitions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .flyteidl.artifact.ArtifactSource source = 6;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateArtifactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateArtifactRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateArtifactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateArtifactRequest)
    MergeFrom(*source);
  }
}

void CreateArtifactRequest::MergeFrom(const CreateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::artifact::ArtifactSpec::MergeFrom(from.spec());
  }
  if (from.has_source()) {
    mutable_source()->::flyteidl::artifact::ArtifactSource::MergeFrom(from.source());
  }
}

void CreateArtifactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateArtifactRequest::CopyFrom(const CreateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateArtifactRequest::IsInitialized() const {
  return true;
}

void CreateArtifactRequest::Swap(CreateArtifactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateArtifactRequest::InternalSwap(CreateArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partitions_.Swap(&other->partitions_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(artifact_key_, other->artifact_key_);
  swap(spec_, other->spec_);
  swap(source_, other->source_);
}

::google::protobuf::Metadata CreateArtifactRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactSource::InitAsDefaultInstance() {
  ::flyteidl::artifact::_ArtifactSource_default_instance_._instance.get_mutable()->workflow_execution_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::flyteidl::artifact::_ArtifactSource_default_instance_._instance.get_mutable()->task_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class ArtifactSource::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& workflow_execution(const ArtifactSource* msg);
  static const ::flyteidl::core::Identifier& task_id(const ArtifactSource* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ArtifactSource::HasBitSetters::workflow_execution(const ArtifactSource* msg) {
  return *msg->workflow_execution_;
}
const ::flyteidl::core::Identifier&
ArtifactSource::HasBitSetters::task_id(const ArtifactSource* msg) {
  return *msg->task_id_;
}
void ArtifactSource::clear_workflow_execution() {
  if (GetArenaNoVirtual() == nullptr && workflow_execution_ != nullptr) {
    delete workflow_execution_;
  }
  workflow_execution_ = nullptr;
}
void ArtifactSource::clear_task_id() {
  if (GetArenaNoVirtual() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactSource::kWorkflowExecutionFieldNumber;
const int ArtifactSource::kNodeIdFieldNumber;
const int ArtifactSource::kTaskIdFieldNumber;
const int ArtifactSource::kRetryAttemptFieldNumber;
const int ArtifactSource::kPrincipalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactSource::ArtifactSource()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ArtifactSource)
}
ArtifactSource::ArtifactSource(const ArtifactSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.principal().size() > 0) {
    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.has_workflow_execution()) {
    workflow_execution_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.workflow_execution_);
  } else {
    workflow_execution_ = nullptr;
  }
  if (from.has_task_id()) {
    task_id_ = new ::flyteidl::core::Identifier(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  retry_attempt_ = from.retry_attempt_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ArtifactSource)
}

void ArtifactSource::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto.base);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&workflow_execution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_attempt_) -
      reinterpret_cast<char*>(&workflow_execution_)) + sizeof(retry_attempt_));
}

ArtifactSource::~ArtifactSource() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ArtifactSource)
  SharedDtor();
}

void ArtifactSource::SharedDtor() {
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  principal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workflow_execution_;
  if (this != internal_default_instance()) delete task_id_;
}

void ArtifactSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactSource& ArtifactSource::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactSource_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ArtifactSource::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ArtifactSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && workflow_execution_ != nullptr) {
    delete workflow_execution_;
  }
  workflow_execution_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  retry_attempt_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactSource::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactSource*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_workflow_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ArtifactSource.node_id");
        object = msg->mutable_node_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Identifier task_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_task_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 retry_attempt = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_retry_attempt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string principal = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ArtifactSource.principal");
        object = msg->mutable_principal();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ArtifactSource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ArtifactSource.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Identifier task_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 retry_attempt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string principal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->principal().data(), static_cast<int>(this->principal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ArtifactSource.principal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ArtifactSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ArtifactSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ArtifactSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution = 1;
  if (this->has_workflow_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::workflow_execution(this), output);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSource.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_id(), output);
  }

  // .flyteidl.core.Identifier task_id = 3;
  if (this->has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::task_id(this), output);
  }

  // uint32 retry_attempt = 4;
  if (this->retry_attempt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retry_attempt(), output);
  }

  // string principal = 5;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSource.principal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->principal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ArtifactSource)
}

::google::protobuf::uint8* ArtifactSource::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ArtifactSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution = 1;
  if (this->has_workflow_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::workflow_execution(this), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSource.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_id(), target);
  }

  // .flyteidl.core.Identifier task_id = 3;
  if (this->has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::task_id(this), target);
  }

  // uint32 retry_attempt = 4;
  if (this->retry_attempt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retry_attempt(), target);
  }

  // string principal = 5;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSource.principal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->principal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ArtifactSource)
  return target;
}

size_t ArtifactSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ArtifactSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string principal = 5;
  if (this->principal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->principal());
  }

  // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution = 1;
  if (this->has_workflow_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workflow_execution_);
  }

  // .flyteidl.core.Identifier task_id = 3;
  if (this->has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // uint32 retry_attempt = 4;
  if (this->retry_attempt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retry_attempt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ArtifactSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactSource* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ArtifactSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ArtifactSource)
    MergeFrom(*source);
  }
}

void ArtifactSource::MergeFrom(const ArtifactSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ArtifactSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.principal().size() > 0) {

    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.has_workflow_execution()) {
    mutable_workflow_execution()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.workflow_execution());
  }
  if (from.has_task_id()) {
    mutable_task_id()->::flyteidl::core::Identifier::MergeFrom(from.task_id());
  }
  if (from.retry_attempt() != 0) {
    set_retry_attempt(from.retry_attempt());
  }
}

void ArtifactSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ArtifactSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactSource::CopyFrom(const ArtifactSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ArtifactSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactSource::IsInitialized() const {
  return true;
}

void ArtifactSource::Swap(ArtifactSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactSource::InternalSwap(ArtifactSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  principal_.Swap(&other->principal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(workflow_execution_, other->workflow_execution_);
  swap(task_id_, other->task_id_);
  swap(retry_attempt_, other->retry_attempt_);
}

::google::protobuf::Metadata ArtifactSource::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactSpec::InitAsDefaultInstance() {
  ::flyteidl::artifact::_ArtifactSpec_default_instance_._instance.get_mutable()->value_ = const_cast< ::flyteidl::core::Literal*>(
      ::flyteidl::core::Literal::internal_default_instance());
  ::flyteidl::artifact::_ArtifactSpec_default_instance_._instance.get_mutable()->type_ = const_cast< ::flyteidl::core::LiteralType*>(
      ::flyteidl::core::LiteralType::internal_default_instance());
  ::flyteidl::artifact::_ArtifactSpec_default_instance_._instance.get_mutable()->user_metadata_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class ArtifactSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::Literal& value(const ArtifactSpec* msg);
  static const ::flyteidl::core::LiteralType& type(const ArtifactSpec* msg);
  static const ::google::protobuf::Any& user_metadata(const ArtifactSpec* msg);
};

const ::flyteidl::core::Literal&
ArtifactSpec::HasBitSetters::value(const ArtifactSpec* msg) {
  return *msg->value_;
}
const ::flyteidl::core::LiteralType&
ArtifactSpec::HasBitSetters::type(const ArtifactSpec* msg) {
  return *msg->type_;
}
const ::google::protobuf::Any&
ArtifactSpec::HasBitSetters::user_metadata(const ArtifactSpec* msg) {
  return *msg->user_metadata_;
}
void ArtifactSpec::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
void ArtifactSpec::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
void ArtifactSpec::clear_user_metadata() {
  if (GetArenaNoVirtual() == nullptr && user_metadata_ != nullptr) {
    delete user_metadata_;
  }
  user_metadata_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactSpec::kValueFieldNumber;
const int ArtifactSpec::kTypeFieldNumber;
const int ArtifactSpec::kShortDescriptionFieldNumber;
const int ArtifactSpec::kUserMetadataFieldNumber;
const int ArtifactSpec::kMetadataTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactSpec::ArtifactSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ArtifactSpec)
}
ArtifactSpec::ArtifactSpec(const ArtifactSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.short_description().size() > 0) {
    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  metadata_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata_type().size() > 0) {
    metadata_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_type_);
  }
  if (from.has_value()) {
    value_ = new ::flyteidl::core::Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from.has_type()) {
    type_ = new ::flyteidl::core::LiteralType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from.has_user_metadata()) {
    user_metadata_ = new ::google::protobuf::Any(*from.user_metadata_);
  } else {
    user_metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ArtifactSpec)
}

void ArtifactSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_metadata_) -
      reinterpret_cast<char*>(&value_)) + sizeof(user_metadata_));
}

ArtifactSpec::~ArtifactSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ArtifactSpec)
  SharedDtor();
}

void ArtifactSpec::SharedDtor() {
  short_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete user_metadata_;
}

void ArtifactSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactSpec& ArtifactSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ArtifactSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ArtifactSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_metadata_ != nullptr) {
    delete user_metadata_;
  }
  user_metadata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Literal value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Literal::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralType::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string short_description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ArtifactSpec.short_description");
        object = msg->mutable_short_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any user_metadata = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_user_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string metadata_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ArtifactSpec.metadata_type");
        object = msg->mutable_metadata_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ArtifactSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Literal value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string short_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_description().data(), static_cast<int>(this->short_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ArtifactSpec.short_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any user_metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata_type().data(), static_cast<int>(this->metadata_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ArtifactSpec.metadata_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ArtifactSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ArtifactSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ArtifactSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Literal value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::value(this), output);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::type(this), output);
  }

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->short_description(), output);
  }

  // .google.protobuf.Any user_metadata = 4;
  if (this->has_user_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::user_metadata(this), output);
  }

  // string metadata_type = 5;
  if (this->metadata_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_type().data(), static_cast<int>(this->metadata_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.metadata_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->metadata_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ArtifactSpec)
}

::google::protobuf::uint8* ArtifactSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ArtifactSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Literal value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::value(this), target);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::type(this), target);
  }

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->short_description(), target);
  }

  // .google.protobuf.Any user_metadata = 4;
  if (this->has_user_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::user_metadata(this), target);
  }

  // string metadata_type = 5;
  if (this->metadata_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_type().data(), static_cast<int>(this->metadata_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.metadata_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->metadata_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ArtifactSpec)
  return target;
}

size_t ArtifactSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ArtifactSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_description());
  }

  // string metadata_type = 5;
  if (this->metadata_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata_type());
  }

  // .flyteidl.core.Literal value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .google.protobuf.Any user_metadata = 4;
  if (this->has_user_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactSpec* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ArtifactSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ArtifactSpec)
    MergeFrom(*source);
  }
}

void ArtifactSpec::MergeFrom(const ArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.short_description().size() > 0) {

    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  if (from.metadata_type().size() > 0) {

    metadata_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_type_);
  }
  if (from.has_value()) {
    mutable_value()->::flyteidl::core::Literal::MergeFrom(from.value());
  }
  if (from.has_type()) {
    mutable_type()->::flyteidl::core::LiteralType::MergeFrom(from.type());
  }
  if (from.has_user_metadata()) {
    mutable_user_metadata()->::google::protobuf::Any::MergeFrom(from.user_metadata());
  }
}

void ArtifactSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactSpec::CopyFrom(const ArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactSpec::IsInitialized() const {
  return true;
}

void ArtifactSpec::Swap(ArtifactSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactSpec::InternalSwap(ArtifactSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  short_description_.Swap(&other->short_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_type_.Swap(&other->metadata_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(user_metadata_, other->user_metadata_);
}

::google::protobuf::Metadata ArtifactSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateArtifactResponse::InitAsDefaultInstance() {
  ::flyteidl::artifact::_CreateArtifactResponse_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::flyteidl::artifact::Artifact*>(
      ::flyteidl::artifact::Artifact::internal_default_instance());
}
class CreateArtifactResponse::HasBitSetters {
 public:
  static const ::flyteidl::artifact::Artifact& artifact(const CreateArtifactResponse* msg);
};

const ::flyteidl::artifact::Artifact&
CreateArtifactResponse::HasBitSetters::artifact(const CreateArtifactResponse* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateArtifactResponse::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateArtifactResponse::CreateArtifactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateArtifactResponse)
}
CreateArtifactResponse::CreateArtifactResponse(const CreateArtifactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::flyteidl::artifact::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateArtifactResponse)
}

void CreateArtifactResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  artifact_ = nullptr;
}

CreateArtifactResponse::~CreateArtifactResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateArtifactResponse)
  SharedDtor();
}

void CreateArtifactResponse::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void CreateArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateArtifactResponse& CreateArtifactResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateArtifactResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateArtifactResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateArtifactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateArtifactResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateArtifactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateArtifactResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateArtifactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateArtifactResponse)
}

::google::protobuf::uint8* CreateArtifactResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateArtifactResponse)
  return target;
}

size_t CreateArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateArtifactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateArtifactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateArtifactResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateArtifactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateArtifactResponse)
    MergeFrom(*source);
  }
}

void CreateArtifactResponse::MergeFrom(const CreateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::flyteidl::artifact::Artifact::MergeFrom(from.artifact());
  }
}

void CreateArtifactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateArtifactResponse::CopyFrom(const CreateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateArtifactResponse::IsInitialized() const {
  return true;
}

void CreateArtifactResponse::Swap(CreateArtifactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateArtifactResponse::InternalSwap(CreateArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata CreateArtifactResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetArtifactRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_GetArtifactRequest_default_instance_._instance.get_mutable()->query_ = const_cast< ::flyteidl::core::ArtifactQuery*>(
      ::flyteidl::core::ArtifactQuery::internal_default_instance());
}
class GetArtifactRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactQuery& query(const GetArtifactRequest* msg);
};

const ::flyteidl::core::ArtifactQuery&
GetArtifactRequest::HasBitSetters::query(const GetArtifactRequest* msg) {
  return *msg->query_;
}
void GetArtifactRequest::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetArtifactRequest::kQueryFieldNumber;
const int GetArtifactRequest::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetArtifactRequest::GetArtifactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.GetArtifactRequest)
}
GetArtifactRequest::GetArtifactRequest(const GetArtifactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query()) {
    query_ = new ::flyteidl::core::ArtifactQuery(*from.query_);
  } else {
    query_ = nullptr;
  }
  details_ = from.details_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.GetArtifactRequest)
}

void GetArtifactRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&details_) -
      reinterpret_cast<char*>(&query_)) + sizeof(details_));
}

GetArtifactRequest::~GetArtifactRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.GetArtifactRequest)
  SharedDtor();
}

void GetArtifactRequest::SharedDtor() {
  if (this != internal_default_instance()) delete query_;
}

void GetArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetArtifactRequest& GetArtifactRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void GetArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  details_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetArtifactRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetArtifactRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactQuery query = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactQuery::_InternalParse;
        object = msg->mutable_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool details = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_details(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetArtifactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.GetArtifactRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactQuery query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &details_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.GetArtifactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.GetArtifactRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetArtifactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactQuery query = 1;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::query(this), output);
  }

  // bool details = 2;
  if (this->details() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.GetArtifactRequest)
}

::google::protobuf::uint8* GetArtifactRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactQuery query = 1;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::query(this), target);
  }

  // bool details = 2;
  if (this->details() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.GetArtifactRequest)
  return target;
}

size_t GetArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.GetArtifactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactQuery query = 1;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // bool details = 2;
  if (this->details() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetArtifactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.GetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetArtifactRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.GetArtifactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.GetArtifactRequest)
    MergeFrom(*source);
  }
}

void GetArtifactRequest::MergeFrom(const GetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.GetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_query()) {
    mutable_query()->::flyteidl::core::ArtifactQuery::MergeFrom(from.query());
  }
  if (from.details() != 0) {
    set_details(from.details());
  }
}

void GetArtifactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.GetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArtifactRequest::CopyFrom(const GetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.GetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArtifactRequest::IsInitialized() const {
  return true;
}

void GetArtifactRequest::Swap(GetArtifactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetArtifactRequest::InternalSwap(GetArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
  swap(details_, other->details_);
}

::google::protobuf::Metadata GetArtifactRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetArtifactResponse::InitAsDefaultInstance() {
  ::flyteidl::artifact::_GetArtifactResponse_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::flyteidl::artifact::Artifact*>(
      ::flyteidl::artifact::Artifact::internal_default_instance());
}
class GetArtifactResponse::HasBitSetters {
 public:
  static const ::flyteidl::artifact::Artifact& artifact(const GetArtifactResponse* msg);
};

const ::flyteidl::artifact::Artifact&
GetArtifactResponse::HasBitSetters::artifact(const GetArtifactResponse* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetArtifactResponse::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetArtifactResponse::GetArtifactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.GetArtifactResponse)
}
GetArtifactResponse::GetArtifactResponse(const GetArtifactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::flyteidl::artifact::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.GetArtifactResponse)
}

void GetArtifactResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  artifact_ = nullptr;
}

GetArtifactResponse::~GetArtifactResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.GetArtifactResponse)
  SharedDtor();
}

void GetArtifactResponse::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void GetArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetArtifactResponse& GetArtifactResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void GetArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetArtifactResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetArtifactResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetArtifactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.GetArtifactResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.GetArtifactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.GetArtifactResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetArtifactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.GetArtifactResponse)
}

::google::protobuf::uint8* GetArtifactResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.GetArtifactResponse)
  return target;
}

size_t GetArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.GetArtifactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetArtifactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.GetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetArtifactResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.GetArtifactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.GetArtifactResponse)
    MergeFrom(*source);
  }
}

void GetArtifactResponse::MergeFrom(const GetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.GetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::flyteidl::artifact::Artifact::MergeFrom(from.artifact());
  }
}

void GetArtifactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.GetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArtifactResponse::CopyFrom(const GetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.GetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArtifactResponse::IsInitialized() const {
  return true;
}

void GetArtifactResponse::Swap(GetArtifactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetArtifactResponse::InternalSwap(GetArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata GetArtifactResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchOptions::InitAsDefaultInstance() {
}
class SearchOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchOptions::kStrictPartitionsFieldNumber;
const int SearchOptions::kLatestByKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchOptions::SearchOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.SearchOptions)
}
SearchOptions::SearchOptions(const SearchOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&strict_partitions_, &from.strict_partitions_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_by_key_) -
    reinterpret_cast<char*>(&strict_partitions_)) + sizeof(latest_by_key_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.SearchOptions)
}

void SearchOptions::SharedCtor() {
  ::memset(&strict_partitions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_by_key_) -
      reinterpret_cast<char*>(&strict_partitions_)) + sizeof(latest_by_key_));
}

SearchOptions::~SearchOptions() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.SearchOptions)
  SharedDtor();
}

void SearchOptions::SharedDtor() {
}

void SearchOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchOptions& SearchOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchOptions_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void SearchOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.SearchOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&strict_partitions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_by_key_) -
      reinterpret_cast<char*>(&strict_partitions_)) + sizeof(latest_by_key_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool strict_partitions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_strict_partitions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool latest_by_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_latest_by_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.SearchOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool strict_partitions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strict_partitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool latest_by_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &latest_by_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.SearchOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.SearchOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.SearchOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool strict_partitions = 1;
  if (this->strict_partitions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->strict_partitions(), output);
  }

  // bool latest_by_key = 2;
  if (this->latest_by_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->latest_by_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.SearchOptions)
}

::google::protobuf::uint8* SearchOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.SearchOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool strict_partitions = 1;
  if (this->strict_partitions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->strict_partitions(), target);
  }

  // bool latest_by_key = 2;
  if (this->latest_by_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->latest_by_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.SearchOptions)
  return target;
}

size_t SearchOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.SearchOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool strict_partitions = 1;
  if (this->strict_partitions() != 0) {
    total_size += 1 + 1;
  }

  // bool latest_by_key = 2;
  if (this->latest_by_key() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.SearchOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchOptions* source =
      ::google::protobuf::DynamicCastToGenerated<SearchOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.SearchOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.SearchOptions)
    MergeFrom(*source);
  }
}

void SearchOptions::MergeFrom(const SearchOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.SearchOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strict_partitions() != 0) {
    set_strict_partitions(from.strict_partitions());
  }
  if (from.latest_by_key() != 0) {
    set_latest_by_key(from.latest_by_key());
  }
}

void SearchOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.SearchOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchOptions::CopyFrom(const SearchOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.SearchOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchOptions::IsInitialized() const {
  return true;
}

void SearchOptions::Swap(SearchOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchOptions::InternalSwap(SearchOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(strict_partitions_, other->strict_partitions_);
  swap(latest_by_key_, other->latest_by_key_);
}

::google::protobuf::Metadata SearchOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchArtifactsRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_SearchArtifactsRequest_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::artifact::_SearchArtifactsRequest_default_instance_._instance.get_mutable()->partitions_ = const_cast< ::flyteidl::core::Partitions*>(
      ::flyteidl::core::Partitions::internal_default_instance());
  ::flyteidl::artifact::_SearchArtifactsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::flyteidl::artifact::SearchOptions*>(
      ::flyteidl::artifact::SearchOptions::internal_default_instance());
}
class SearchArtifactsRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const SearchArtifactsRequest* msg);
  static const ::flyteidl::core::Partitions& partitions(const SearchArtifactsRequest* msg);
  static const ::flyteidl::artifact::SearchOptions& options(const SearchArtifactsRequest* msg);
};

const ::flyteidl::core::ArtifactKey&
SearchArtifactsRequest::HasBitSetters::artifact_key(const SearchArtifactsRequest* msg) {
  return *msg->artifact_key_;
}
const ::flyteidl::core::Partitions&
SearchArtifactsRequest::HasBitSetters::partitions(const SearchArtifactsRequest* msg) {
  return *msg->partitions_;
}
const ::flyteidl::artifact::SearchOptions&
SearchArtifactsRequest::HasBitSetters::options(const SearchArtifactsRequest* msg) {
  return *msg->options_;
}
void SearchArtifactsRequest::clear_artifact_key() {
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
}
void SearchArtifactsRequest::clear_partitions() {
  if (GetArenaNoVirtual() == nullptr && partitions_ != nullptr) {
    delete partitions_;
  }
  partitions_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchArtifactsRequest::kArtifactKeyFieldNumber;
const int SearchArtifactsRequest::kPartitionsFieldNumber;
const int SearchArtifactsRequest::kPrincipalFieldNumber;
const int SearchArtifactsRequest::kVersionFieldNumber;
const int SearchArtifactsRequest::kOptionsFieldNumber;
const int SearchArtifactsRequest::kTokenFieldNumber;
const int SearchArtifactsRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchArtifactsRequest::SearchArtifactsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.SearchArtifactsRequest)
}
SearchArtifactsRequest::SearchArtifactsRequest(const SearchArtifactsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.principal().size() > 0) {
    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  if (from.has_partitions()) {
    partitions_ = new ::flyteidl::core::Partitions(*from.partitions_);
  } else {
    partitions_ = nullptr;
  }
  if (from.has_options()) {
    options_ = new ::flyteidl::artifact::SearchOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.SearchArtifactsRequest)
}

void SearchArtifactsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SearchArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&artifact_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&artifact_key_)) + sizeof(limit_));
}

SearchArtifactsRequest::~SearchArtifactsRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.SearchArtifactsRequest)
  SharedDtor();
}

void SearchArtifactsRequest::SharedDtor() {
  principal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete artifact_key_;
  if (this != internal_default_instance()) delete partitions_;
  if (this != internal_default_instance()) delete options_;
}

void SearchArtifactsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchArtifactsRequest& SearchArtifactsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void SearchArtifactsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.SearchArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && partitions_ != nullptr) {
    delete partitions_;
  }
  partitions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchArtifactsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchArtifactsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Partitions partitions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Partitions::_InternalParse;
        object = msg->mutable_partitions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string principal = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.SearchArtifactsRequest.principal");
        object = msg->mutable_principal();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.SearchArtifactsRequest.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.artifact.SearchOptions options = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::SearchOptions::_InternalParse;
        object = msg->mutable_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string token = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.SearchArtifactsRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchArtifactsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.SearchArtifactsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Partitions partitions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partitions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string principal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->principal().data(), static_cast<int>(this->principal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.SearchArtifactsRequest.principal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.SearchArtifactsRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.SearchOptions options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.SearchArtifactsRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.SearchArtifactsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.SearchArtifactsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchArtifactsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.SearchArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // .flyteidl.core.Partitions partitions = 2;
  if (this->has_partitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::partitions(this), output);
  }

  // string principal = 3;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsRequest.principal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->principal(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // .flyteidl.artifact.SearchOptions options = 5;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::options(this), output);
  }

  // string token = 6;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->token(), output);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.SearchArtifactsRequest)
}

::google::protobuf::uint8* SearchArtifactsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.SearchArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // .flyteidl.core.Partitions partitions = 2;
  if (this->has_partitions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::partitions(this), target);
  }

  // string principal = 3;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsRequest.principal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->principal(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // .flyteidl.artifact.SearchOptions options = 5;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::options(this), target);
  }

  // string token = 6;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.SearchArtifactsRequest)
  return target;
}

size_t SearchArtifactsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.SearchArtifactsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string principal = 3;
  if (this->principal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->principal());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string token = 6;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  // .flyteidl.core.Partitions partitions = 2;
  if (this->has_partitions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *partitions_);
  }

  // .flyteidl.artifact.SearchOptions options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchArtifactsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.SearchArtifactsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchArtifactsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SearchArtifactsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.SearchArtifactsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.SearchArtifactsRequest)
    MergeFrom(*source);
  }
}

void SearchArtifactsRequest::MergeFrom(const SearchArtifactsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.SearchArtifactsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.principal().size() > 0) {

    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
  if (from.has_partitions()) {
    mutable_partitions()->::flyteidl::core::Partitions::MergeFrom(from.partitions());
  }
  if (from.has_options()) {
    mutable_options()->::flyteidl::artifact::SearchOptions::MergeFrom(from.options());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void SearchArtifactsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.SearchArtifactsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchArtifactsRequest::CopyFrom(const SearchArtifactsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.SearchArtifactsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchArtifactsRequest::IsInitialized() const {
  return true;
}

void SearchArtifactsRequest::Swap(SearchArtifactsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchArtifactsRequest::InternalSwap(SearchArtifactsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  principal_.Swap(&other->principal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(artifact_key_, other->artifact_key_);
  swap(partitions_, other->partitions_);
  swap(options_, other->options_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata SearchArtifactsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SearchArtifactsResponse::InitAsDefaultInstance() {
}
class SearchArtifactsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchArtifactsResponse::kArtifactsFieldNumber;
const int SearchArtifactsResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchArtifactsResponse::SearchArtifactsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.SearchArtifactsResponse)
}
SearchArtifactsResponse::SearchArtifactsResponse(const SearchArtifactsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      artifacts_(from.artifacts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.SearchArtifactsResponse)
}

void SearchArtifactsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SearchArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SearchArtifactsResponse::~SearchArtifactsResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.SearchArtifactsResponse)
  SharedDtor();
}

void SearchArtifactsResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchArtifactsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchArtifactsResponse& SearchArtifactsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SearchArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void SearchArtifactsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.SearchArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifacts_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchArtifactsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SearchArtifactsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.artifact.Artifact artifacts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::artifact::Artifact::_InternalParse;
          object = msg->add_artifacts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.SearchArtifactsResponse.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchArtifactsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.SearchArtifactsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.artifact.Artifact artifacts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_artifacts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.SearchArtifactsResponse.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.SearchArtifactsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.SearchArtifactsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchArtifactsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.SearchArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Artifact artifacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifacts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->artifacts(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsResponse.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.SearchArtifactsResponse)
}

::google::protobuf::uint8* SearchArtifactsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.SearchArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Artifact artifacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifacts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->artifacts(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.SearchArtifactsResponse.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.SearchArtifactsResponse)
  return target;
}

size_t SearchArtifactsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.SearchArtifactsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Artifact artifacts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->artifacts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->artifacts(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchArtifactsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.SearchArtifactsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchArtifactsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SearchArtifactsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.SearchArtifactsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.SearchArtifactsResponse)
    MergeFrom(*source);
  }
}

void SearchArtifactsResponse::MergeFrom(const SearchArtifactsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.SearchArtifactsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifacts_.MergeFrom(from.artifacts_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void SearchArtifactsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.SearchArtifactsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchArtifactsResponse::CopyFrom(const SearchArtifactsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.SearchArtifactsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchArtifactsResponse::IsInitialized() const {
  return true;
}

void SearchArtifactsResponse::Swap(SearchArtifactsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchArtifactsResponse::InternalSwap(SearchArtifactsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&artifacts_)->InternalSwap(CastToBase(&other->artifacts_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SearchArtifactsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FindByWorkflowExecRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_FindByWorkflowExecRequest_default_instance_._instance.get_mutable()->exec_id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class FindByWorkflowExecRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& exec_id(const FindByWorkflowExecRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
FindByWorkflowExecRequest::HasBitSetters::exec_id(const FindByWorkflowExecRequest* msg) {
  return *msg->exec_id_;
}
void FindByWorkflowExecRequest::clear_exec_id() {
  if (GetArenaNoVirtual() == nullptr && exec_id_ != nullptr) {
    delete exec_id_;
  }
  exec_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindByWorkflowExecRequest::kExecIdFieldNumber;
const int FindByWorkflowExecRequest::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindByWorkflowExecRequest::FindByWorkflowExecRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.FindByWorkflowExecRequest)
}
FindByWorkflowExecRequest::FindByWorkflowExecRequest(const FindByWorkflowExecRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exec_id()) {
    exec_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.exec_id_);
  } else {
    exec_id_ = nullptr;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.FindByWorkflowExecRequest)
}

void FindByWorkflowExecRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FindByWorkflowExecRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&exec_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&exec_id_)) + sizeof(direction_));
}

FindByWorkflowExecRequest::~FindByWorkflowExecRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.FindByWorkflowExecRequest)
  SharedDtor();
}

void FindByWorkflowExecRequest::SharedDtor() {
  if (this != internal_default_instance()) delete exec_id_;
}

void FindByWorkflowExecRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindByWorkflowExecRequest& FindByWorkflowExecRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FindByWorkflowExecRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void FindByWorkflowExecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.FindByWorkflowExecRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && exec_id_ != nullptr) {
    delete exec_id_;
  }
  exec_id_ = nullptr;
  direction_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FindByWorkflowExecRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FindByWorkflowExecRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier exec_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_exec_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.artifact.FindByWorkflowExecRequest.Direction direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::flyteidl::artifact::FindByWorkflowExecRequest_Direction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FindByWorkflowExecRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.FindByWorkflowExecRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier exec_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exec_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.FindByWorkflowExecRequest.Direction direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::flyteidl::artifact::FindByWorkflowExecRequest_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.FindByWorkflowExecRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.FindByWorkflowExecRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FindByWorkflowExecRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.FindByWorkflowExecRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier exec_id = 1;
  if (this->has_exec_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exec_id(this), output);
  }

  // .flyteidl.artifact.FindByWorkflowExecRequest.Direction direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.FindByWorkflowExecRequest)
}

::google::protobuf::uint8* FindByWorkflowExecRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.FindByWorkflowExecRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier exec_id = 1;
  if (this->has_exec_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exec_id(this), target);
  }

  // .flyteidl.artifact.FindByWorkflowExecRequest.Direction direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.FindByWorkflowExecRequest)
  return target;
}

size_t FindByWorkflowExecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.FindByWorkflowExecRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier exec_id = 1;
  if (this->has_exec_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exec_id_);
  }

  // .flyteidl.artifact.FindByWorkflowExecRequest.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindByWorkflowExecRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.FindByWorkflowExecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindByWorkflowExecRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FindByWorkflowExecRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.FindByWorkflowExecRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.FindByWorkflowExecRequest)
    MergeFrom(*source);
  }
}

void FindByWorkflowExecRequest::MergeFrom(const FindByWorkflowExecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.FindByWorkflowExecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exec_id()) {
    mutable_exec_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.exec_id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void FindByWorkflowExecRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.FindByWorkflowExecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindByWorkflowExecRequest::CopyFrom(const FindByWorkflowExecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.FindByWorkflowExecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindByWorkflowExecRequest::IsInitialized() const {
  return true;
}

void FindByWorkflowExecRequest::Swap(FindByWorkflowExecRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindByWorkflowExecRequest::InternalSwap(FindByWorkflowExecRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exec_id_, other->exec_id_);
  swap(direction_, other->direction_);
}

::google::protobuf::Metadata FindByWorkflowExecRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddTagRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_AddTagRequest_default_instance_._instance.get_mutable()->artifact_id_ = const_cast< ::flyteidl::core::ArtifactID*>(
      ::flyteidl::core::ArtifactID::internal_default_instance());
}
class AddTagRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactID& artifact_id(const AddTagRequest* msg);
};

const ::flyteidl::core::ArtifactID&
AddTagRequest::HasBitSetters::artifact_id(const AddTagRequest* msg) {
  return *msg->artifact_id_;
}
void AddTagRequest::clear_artifact_id() {
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTagRequest::kArtifactIdFieldNumber;
const int AddTagRequest::kValueFieldNumber;
const int AddTagRequest::kOverwriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTagRequest::AddTagRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.AddTagRequest)
}
AddTagRequest::AddTagRequest(const AddTagRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_artifact_id()) {
    artifact_id_ = new ::flyteidl::core::ArtifactID(*from.artifact_id_);
  } else {
    artifact_id_ = nullptr;
  }
  overwrite_ = from.overwrite_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.AddTagRequest)
}

void AddTagRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AddTagRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&artifact_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_) -
      reinterpret_cast<char*>(&artifact_id_)) + sizeof(overwrite_));
}

AddTagRequest::~AddTagRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.AddTagRequest)
  SharedDtor();
}

void AddTagRequest::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete artifact_id_;
}

void AddTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTagRequest& AddTagRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddTagRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void AddTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.AddTagRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
  overwrite_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddTagRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddTagRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.AddTagRequest.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool overwrite = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_overwrite(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddTagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.AddTagRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.AddTagRequest.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.AddTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.AddTagRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddTagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.AddTagRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_id(this), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.AddTagRequest.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // bool overwrite = 3;
  if (this->overwrite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->overwrite(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.AddTagRequest)
}

::google::protobuf::uint8* AddTagRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.AddTagRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_id(this), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.AddTagRequest.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // bool overwrite = 3;
  if (this->overwrite() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->overwrite(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.AddTagRequest)
  return target;
}

size_t AddTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.AddTagRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_id_);
  }

  // bool overwrite = 3;
  if (this->overwrite() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTagRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.AddTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTagRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AddTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.AddTagRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.AddTagRequest)
    MergeFrom(*source);
  }
}

void AddTagRequest::MergeFrom(const AddTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.AddTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_artifact_id()) {
    mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
  }
  if (from.overwrite() != 0) {
    set_overwrite(from.overwrite());
  }
}

void AddTagRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.AddTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTagRequest::CopyFrom(const AddTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.AddTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagRequest::IsInitialized() const {
  return true;
}

void AddTagRequest::Swap(AddTagRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTagRequest::InternalSwap(AddTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(artifact_id_, other->artifact_id_);
  swap(overwrite_, other->overwrite_);
}

::google::protobuf::Metadata AddTagRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddTagResponse::InitAsDefaultInstance() {
}
class AddTagResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTagResponse::AddTagResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.AddTagResponse)
}
AddTagResponse::AddTagResponse(const AddTagResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.AddTagResponse)
}

void AddTagResponse::SharedCtor() {
}

AddTagResponse::~AddTagResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.AddTagResponse)
  SharedDtor();
}

void AddTagResponse::SharedDtor() {
}

void AddTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTagResponse& AddTagResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddTagResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void AddTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.AddTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddTagResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddTagResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.AddTagResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.AddTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.AddTagResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.AddTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.AddTagResponse)
}

::google::protobuf::uint8* AddTagResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.AddTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.AddTagResponse)
  return target;
}

size_t AddTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.AddTagResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTagResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.AddTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTagResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AddTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.AddTagResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.AddTagResponse)
    MergeFrom(*source);
  }
}

void AddTagResponse::MergeFrom(const AddTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.AddTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddTagResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.AddTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTagResponse::CopyFrom(const AddTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.AddTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagResponse::IsInitialized() const {
  return true;
}

void AddTagResponse::Swap(AddTagResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTagResponse::InternalSwap(AddTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTagResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateTriggerRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_CreateTriggerRequest_default_instance_._instance.get_mutable()->trigger_launch_plan_ = const_cast< ::flyteidl::admin::LaunchPlan*>(
      ::flyteidl::admin::LaunchPlan::internal_default_instance());
}
class CreateTriggerRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::LaunchPlan& trigger_launch_plan(const CreateTriggerRequest* msg);
};

const ::flyteidl::admin::LaunchPlan&
CreateTriggerRequest::HasBitSetters::trigger_launch_plan(const CreateTriggerRequest* msg) {
  return *msg->trigger_launch_plan_;
}
void CreateTriggerRequest::clear_trigger_launch_plan() {
  if (GetArenaNoVirtual() == nullptr && trigger_launch_plan_ != nullptr) {
    delete trigger_launch_plan_;
  }
  trigger_launch_plan_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTriggerRequest::kTriggerLaunchPlanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTriggerRequest::CreateTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateTriggerRequest)
}
CreateTriggerRequest::CreateTriggerRequest(const CreateTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trigger_launch_plan()) {
    trigger_launch_plan_ = new ::flyteidl::admin::LaunchPlan(*from.trigger_launch_plan_);
  } else {
    trigger_launch_plan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateTriggerRequest)
}

void CreateTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  trigger_launch_plan_ = nullptr;
}

CreateTriggerRequest::~CreateTriggerRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateTriggerRequest)
  SharedDtor();
}

void CreateTriggerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete trigger_launch_plan_;
}

void CreateTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTriggerRequest& CreateTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trigger_launch_plan_ != nullptr) {
    delete trigger_launch_plan_;
  }
  trigger_launch_plan_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.LaunchPlan trigger_launch_plan = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchPlan::_InternalParse;
        object = msg->mutable_trigger_launch_plan();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.LaunchPlan trigger_launch_plan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger_launch_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LaunchPlan trigger_launch_plan = 1;
  if (this->has_trigger_launch_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::trigger_launch_plan(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateTriggerRequest)
}

::google::protobuf::uint8* CreateTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LaunchPlan trigger_launch_plan = 1;
  if (this->has_trigger_launch_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::trigger_launch_plan(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateTriggerRequest)
  return target;
}

size_t CreateTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.LaunchPlan trigger_launch_plan = 1;
  if (this->has_trigger_launch_plan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trigger_launch_plan_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateTriggerRequest)
    MergeFrom(*source);
  }
}

void CreateTriggerRequest::MergeFrom(const CreateTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger_launch_plan()) {
    mutable_trigger_launch_plan()->::flyteidl::admin::LaunchPlan::MergeFrom(from.trigger_launch_plan());
  }
}

void CreateTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTriggerRequest::CopyFrom(const CreateTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTriggerRequest::IsInitialized() const {
  return true;
}

void CreateTriggerRequest::Swap(CreateTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTriggerRequest::InternalSwap(CreateTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trigger_launch_plan_, other->trigger_launch_plan_);
}

::google::protobuf::Metadata CreateTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateTriggerResponse::InitAsDefaultInstance() {
}
class CreateTriggerResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTriggerResponse::CreateTriggerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateTriggerResponse)
}
CreateTriggerResponse::CreateTriggerResponse(const CreateTriggerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateTriggerResponse)
}

void CreateTriggerResponse::SharedCtor() {
}

CreateTriggerResponse::~CreateTriggerResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateTriggerResponse)
  SharedDtor();
}

void CreateTriggerResponse::SharedDtor() {
}

void CreateTriggerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTriggerResponse& CreateTriggerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateTriggerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateTriggerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateTriggerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateTriggerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateTriggerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateTriggerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateTriggerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateTriggerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateTriggerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateTriggerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateTriggerResponse)
}

::google::protobuf::uint8* CreateTriggerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateTriggerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateTriggerResponse)
  return target;
}

size_t CreateTriggerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateTriggerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTriggerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateTriggerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTriggerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateTriggerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateTriggerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateTriggerResponse)
    MergeFrom(*source);
  }
}

void CreateTriggerResponse::MergeFrom(const CreateTriggerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateTriggerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateTriggerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateTriggerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTriggerResponse::CopyFrom(const CreateTriggerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateTriggerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTriggerResponse::IsInitialized() const {
  return true;
}

void CreateTriggerResponse::Swap(CreateTriggerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTriggerResponse::InternalSwap(CreateTriggerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateTriggerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteTriggerRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_DeleteTriggerRequest_default_instance_._instance.get_mutable()->trigger_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class DeleteTriggerRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& trigger_id(const DeleteTriggerRequest* msg);
};

const ::flyteidl::core::Identifier&
DeleteTriggerRequest::HasBitSetters::trigger_id(const DeleteTriggerRequest* msg) {
  return *msg->trigger_id_;
}
void DeleteTriggerRequest::clear_trigger_id() {
  if (GetArenaNoVirtual() == nullptr && trigger_id_ != nullptr) {
    delete trigger_id_;
  }
  trigger_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTriggerRequest::kTriggerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTriggerRequest::DeleteTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.DeleteTriggerRequest)
}
DeleteTriggerRequest::DeleteTriggerRequest(const DeleteTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trigger_id()) {
    trigger_id_ = new ::flyteidl::core::Identifier(*from.trigger_id_);
  } else {
    trigger_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.DeleteTriggerRequest)
}

void DeleteTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  trigger_id_ = nullptr;
}

DeleteTriggerRequest::~DeleteTriggerRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.DeleteTriggerRequest)
  SharedDtor();
}

void DeleteTriggerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete trigger_id_;
}

void DeleteTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTriggerRequest& DeleteTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteTriggerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void DeleteTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.DeleteTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trigger_id_ != nullptr) {
    delete trigger_id_;
  }
  trigger_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier trigger_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_trigger_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.DeleteTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier trigger_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.DeleteTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.DeleteTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.DeleteTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier trigger_id = 1;
  if (this->has_trigger_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::trigger_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.DeleteTriggerRequest)
}

::google::protobuf::uint8* DeleteTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.DeleteTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier trigger_id = 1;
  if (this->has_trigger_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::trigger_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.DeleteTriggerRequest)
  return target;
}

size_t DeleteTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.DeleteTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier trigger_id = 1;
  if (this->has_trigger_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trigger_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.DeleteTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.DeleteTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.DeleteTriggerRequest)
    MergeFrom(*source);
  }
}

void DeleteTriggerRequest::MergeFrom(const DeleteTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.DeleteTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger_id()) {
    mutable_trigger_id()->::flyteidl::core::Identifier::MergeFrom(from.trigger_id());
  }
}

void DeleteTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.DeleteTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTriggerRequest::CopyFrom(const DeleteTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.DeleteTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTriggerRequest::IsInitialized() const {
  return true;
}

void DeleteTriggerRequest::Swap(DeleteTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTriggerRequest::InternalSwap(DeleteTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trigger_id_, other->trigger_id_);
}

::google::protobuf::Metadata DeleteTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteTriggerResponse::InitAsDefaultInstance() {
}
class DeleteTriggerResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTriggerResponse::DeleteTriggerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.DeleteTriggerResponse)
}
DeleteTriggerResponse::DeleteTriggerResponse(const DeleteTriggerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.DeleteTriggerResponse)
}

void DeleteTriggerResponse::SharedCtor() {
}

DeleteTriggerResponse::~DeleteTriggerResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.DeleteTriggerResponse)
  SharedDtor();
}

void DeleteTriggerResponse::SharedDtor() {
}

void DeleteTriggerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTriggerResponse& DeleteTriggerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteTriggerResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void DeleteTriggerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.DeleteTriggerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteTriggerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteTriggerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteTriggerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.DeleteTriggerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.DeleteTriggerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.DeleteTriggerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteTriggerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.DeleteTriggerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.DeleteTriggerResponse)
}

::google::protobuf::uint8* DeleteTriggerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.DeleteTriggerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.DeleteTriggerResponse)
  return target;
}

size_t DeleteTriggerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.DeleteTriggerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTriggerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.DeleteTriggerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTriggerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteTriggerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.DeleteTriggerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.DeleteTriggerResponse)
    MergeFrom(*source);
  }
}

void DeleteTriggerResponse::MergeFrom(const DeleteTriggerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.DeleteTriggerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteTriggerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.DeleteTriggerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTriggerResponse::CopyFrom(const DeleteTriggerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.DeleteTriggerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTriggerResponse::IsInitialized() const {
  return true;
}

void DeleteTriggerResponse::Swap(DeleteTriggerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTriggerResponse::InternalSwap(DeleteTriggerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteTriggerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactProducer::InitAsDefaultInstance() {
  ::flyteidl::artifact::_ArtifactProducer_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::artifact::_ArtifactProducer_default_instance_._instance.get_mutable()->outputs_ = const_cast< ::flyteidl::core::VariableMap*>(
      ::flyteidl::core::VariableMap::internal_default_instance());
}
class ArtifactProducer::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& entity_id(const ArtifactProducer* msg);
  static const ::flyteidl::core::VariableMap& outputs(const ArtifactProducer* msg);
};

const ::flyteidl::core::Identifier&
ArtifactProducer::HasBitSetters::entity_id(const ArtifactProducer* msg) {
  return *msg->entity_id_;
}
const ::flyteidl::core::VariableMap&
ArtifactProducer::HasBitSetters::outputs(const ArtifactProducer* msg) {
  return *msg->outputs_;
}
void ArtifactProducer::clear_entity_id() {
  if (GetArenaNoVirtual() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
void ArtifactProducer::clear_outputs() {
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactProducer::kEntityIdFieldNumber;
const int ArtifactProducer::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactProducer::ArtifactProducer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ArtifactProducer)
}
ArtifactProducer::ArtifactProducer(const ArtifactProducer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity_id()) {
    entity_id_ = new ::flyteidl::core::Identifier(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from.has_outputs()) {
    outputs_ = new ::flyteidl::core::VariableMap(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ArtifactProducer)
}

void ArtifactProducer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outputs_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(outputs_));
}

ArtifactProducer::~ArtifactProducer() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ArtifactProducer)
  SharedDtor();
}

void ArtifactProducer::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete outputs_;
}

void ArtifactProducer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactProducer& ArtifactProducer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactProducer_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ArtifactProducer::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ArtifactProducer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactProducer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactProducer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier entity_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_entity_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.VariableMap outputs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::VariableMap::_InternalParse;
        object = msg->mutable_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactProducer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ArtifactProducer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.VariableMap outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ArtifactProducer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ArtifactProducer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactProducer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ArtifactProducer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier entity_id = 1;
  if (this->has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::entity_id(this), output);
  }

  // .flyteidl.core.VariableMap outputs = 2;
  if (this->has_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::outputs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ArtifactProducer)
}

::google::protobuf::uint8* ArtifactProducer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ArtifactProducer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier entity_id = 1;
  if (this->has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::entity_id(this), target);
  }

  // .flyteidl.core.VariableMap outputs = 2;
  if (this->has_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::outputs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ArtifactProducer)
  return target;
}

size_t ArtifactProducer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ArtifactProducer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier entity_id = 1;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // .flyteidl.core.VariableMap outputs = 2;
  if (this->has_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outputs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactProducer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ArtifactProducer)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactProducer* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactProducer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ArtifactProducer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ArtifactProducer)
    MergeFrom(*source);
  }
}

void ArtifactProducer::MergeFrom(const ArtifactProducer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ArtifactProducer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_id()) {
    mutable_entity_id()->::flyteidl::core::Identifier::MergeFrom(from.entity_id());
  }
  if (from.has_outputs()) {
    mutable_outputs()->::flyteidl::core::VariableMap::MergeFrom(from.outputs());
  }
}

void ArtifactProducer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ArtifactProducer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactProducer::CopyFrom(const ArtifactProducer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ArtifactProducer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactProducer::IsInitialized() const {
  return true;
}

void ArtifactProducer::Swap(ArtifactProducer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactProducer::InternalSwap(ArtifactProducer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entity_id_, other->entity_id_);
  swap(outputs_, other->outputs_);
}

::google::protobuf::Metadata ArtifactProducer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterProducerRequest::InitAsDefaultInstance() {
}
class RegisterProducerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterProducerRequest::kProducersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterProducerRequest::RegisterProducerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.RegisterProducerRequest)
}
RegisterProducerRequest::RegisterProducerRequest(const RegisterProducerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      producers_(from.producers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.RegisterProducerRequest)
}

void RegisterProducerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegisterProducerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
}

RegisterProducerRequest::~RegisterProducerRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.RegisterProducerRequest)
  SharedDtor();
}

void RegisterProducerRequest::SharedDtor() {
}

void RegisterProducerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterProducerRequest& RegisterProducerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterProducerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void RegisterProducerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.RegisterProducerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterProducerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterProducerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.artifact.ArtifactProducer producers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::artifact::ArtifactProducer::_InternalParse;
          object = msg->add_producers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterProducerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.RegisterProducerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.artifact.ArtifactProducer producers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_producers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.RegisterProducerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.RegisterProducerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterProducerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.RegisterProducerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.ArtifactProducer producers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->producers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->producers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.RegisterProducerRequest)
}

::google::protobuf::uint8* RegisterProducerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.RegisterProducerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.ArtifactProducer producers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->producers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->producers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.RegisterProducerRequest)
  return target;
}

size_t RegisterProducerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.RegisterProducerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.ArtifactProducer producers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->producers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->producers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterProducerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.RegisterProducerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterProducerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterProducerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.RegisterProducerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.RegisterProducerRequest)
    MergeFrom(*source);
  }
}

void RegisterProducerRequest::MergeFrom(const RegisterProducerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.RegisterProducerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  producers_.MergeFrom(from.producers_);
}

void RegisterProducerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.RegisterProducerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterProducerRequest::CopyFrom(const RegisterProducerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.RegisterProducerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterProducerRequest::IsInitialized() const {
  return true;
}

void RegisterProducerRequest::Swap(RegisterProducerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterProducerRequest::InternalSwap(RegisterProducerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&producers_)->InternalSwap(CastToBase(&other->producers_));
}

::google::protobuf::Metadata RegisterProducerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactConsumer::InitAsDefaultInstance() {
  ::flyteidl::artifact::_ArtifactConsumer_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::artifact::_ArtifactConsumer_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::flyteidl::core::ParameterMap*>(
      ::flyteidl::core::ParameterMap::internal_default_instance());
}
class ArtifactConsumer::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& entity_id(const ArtifactConsumer* msg);
  static const ::flyteidl::core::ParameterMap& inputs(const ArtifactConsumer* msg);
};

const ::flyteidl::core::Identifier&
ArtifactConsumer::HasBitSetters::entity_id(const ArtifactConsumer* msg) {
  return *msg->entity_id_;
}
const ::flyteidl::core::ParameterMap&
ArtifactConsumer::HasBitSetters::inputs(const ArtifactConsumer* msg) {
  return *msg->inputs_;
}
void ArtifactConsumer::clear_entity_id() {
  if (GetArenaNoVirtual() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
void ArtifactConsumer::clear_inputs() {
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactConsumer::kEntityIdFieldNumber;
const int ArtifactConsumer::kInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactConsumer::ArtifactConsumer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ArtifactConsumer)
}
ArtifactConsumer::ArtifactConsumer(const ArtifactConsumer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity_id()) {
    entity_id_ = new ::flyteidl::core::Identifier(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from.has_inputs()) {
    inputs_ = new ::flyteidl::core::ParameterMap(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ArtifactConsumer)
}

void ArtifactConsumer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inputs_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(inputs_));
}

ArtifactConsumer::~ArtifactConsumer() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ArtifactConsumer)
  SharedDtor();
}

void ArtifactConsumer::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete inputs_;
}

void ArtifactConsumer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactConsumer& ArtifactConsumer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactConsumer_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ArtifactConsumer::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ArtifactConsumer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactConsumer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactConsumer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier entity_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_entity_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ParameterMap inputs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ParameterMap::_InternalParse;
        object = msg->mutable_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactConsumer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ArtifactConsumer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ParameterMap inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ArtifactConsumer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ArtifactConsumer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactConsumer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ArtifactConsumer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier entity_id = 1;
  if (this->has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::entity_id(this), output);
  }

  // .flyteidl.core.ParameterMap inputs = 2;
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inputs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ArtifactConsumer)
}

::google::protobuf::uint8* ArtifactConsumer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ArtifactConsumer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier entity_id = 1;
  if (this->has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::entity_id(this), target);
  }

  // .flyteidl.core.ParameterMap inputs = 2;
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inputs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ArtifactConsumer)
  return target;
}

size_t ArtifactConsumer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ArtifactConsumer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier entity_id = 1;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // .flyteidl.core.ParameterMap inputs = 2;
  if (this->has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inputs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactConsumer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ArtifactConsumer)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactConsumer* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactConsumer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ArtifactConsumer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ArtifactConsumer)
    MergeFrom(*source);
  }
}

void ArtifactConsumer::MergeFrom(const ArtifactConsumer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ArtifactConsumer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_id()) {
    mutable_entity_id()->::flyteidl::core::Identifier::MergeFrom(from.entity_id());
  }
  if (from.has_inputs()) {
    mutable_inputs()->::flyteidl::core::ParameterMap::MergeFrom(from.inputs());
  }
}

void ArtifactConsumer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ArtifactConsumer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactConsumer::CopyFrom(const ArtifactConsumer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ArtifactConsumer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactConsumer::IsInitialized() const {
  return true;
}

void ArtifactConsumer::Swap(ArtifactConsumer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactConsumer::InternalSwap(ArtifactConsumer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entity_id_, other->entity_id_);
  swap(inputs_, other->inputs_);
}

::google::protobuf::Metadata ArtifactConsumer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterConsumerRequest::InitAsDefaultInstance() {
}
class RegisterConsumerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterConsumerRequest::kConsumersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterConsumerRequest::RegisterConsumerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.RegisterConsumerRequest)
}
RegisterConsumerRequest::RegisterConsumerRequest(const RegisterConsumerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      consumers_(from.consumers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.RegisterConsumerRequest)
}

void RegisterConsumerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegisterConsumerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
}

RegisterConsumerRequest::~RegisterConsumerRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.RegisterConsumerRequest)
  SharedDtor();
}

void RegisterConsumerRequest::SharedDtor() {
}

void RegisterConsumerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterConsumerRequest& RegisterConsumerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterConsumerRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void RegisterConsumerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.RegisterConsumerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterConsumerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterConsumerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.artifact.ArtifactConsumer consumers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::artifact::ArtifactConsumer::_InternalParse;
          object = msg->add_consumers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterConsumerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.RegisterConsumerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.artifact.ArtifactConsumer consumers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_consumers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.RegisterConsumerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.RegisterConsumerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterConsumerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.RegisterConsumerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.ArtifactConsumer consumers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->consumers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.RegisterConsumerRequest)
}

::google::protobuf::uint8* RegisterConsumerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.RegisterConsumerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.ArtifactConsumer consumers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->consumers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.RegisterConsumerRequest)
  return target;
}

size_t RegisterConsumerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.RegisterConsumerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.ArtifactConsumer consumers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->consumers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->consumers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterConsumerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.RegisterConsumerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterConsumerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterConsumerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.RegisterConsumerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.RegisterConsumerRequest)
    MergeFrom(*source);
  }
}

void RegisterConsumerRequest::MergeFrom(const RegisterConsumerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.RegisterConsumerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consumers_.MergeFrom(from.consumers_);
}

void RegisterConsumerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.RegisterConsumerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterConsumerRequest::CopyFrom(const RegisterConsumerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.RegisterConsumerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterConsumerRequest::IsInitialized() const {
  return true;
}

void RegisterConsumerRequest::Swap(RegisterConsumerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterConsumerRequest::InternalSwap(RegisterConsumerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&consumers_)->InternalSwap(CastToBase(&other->consumers_));
}

::google::protobuf::Metadata RegisterConsumerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterResponse::InitAsDefaultInstance() {
}
class RegisterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
}

void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterResponse& RegisterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.RegisterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.RegisterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.RegisterResponse)
}

::google::protobuf::uint8* RegisterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.RegisterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionInputsRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_ExecutionInputsRequest_default_instance_._instance.get_mutable()->execution_id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class ExecutionInputsRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id(const ExecutionInputsRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionInputsRequest::HasBitSetters::execution_id(const ExecutionInputsRequest* msg) {
  return *msg->execution_id_;
}
void ExecutionInputsRequest::clear_execution_id() {
  if (GetArenaNoVirtual() == nullptr && execution_id_ != nullptr) {
    delete execution_id_;
  }
  execution_id_ = nullptr;
}
void ExecutionInputsRequest::clear_inputs() {
  inputs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionInputsRequest::kExecutionIdFieldNumber;
const int ExecutionInputsRequest::kInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionInputsRequest::ExecutionInputsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ExecutionInputsRequest)
}
ExecutionInputsRequest::ExecutionInputsRequest(const ExecutionInputsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_execution_id()) {
    execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ExecutionInputsRequest)
}

void ExecutionInputsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionInputsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  execution_id_ = nullptr;
}

ExecutionInputsRequest::~ExecutionInputsRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ExecutionInputsRequest)
  SharedDtor();
}

void ExecutionInputsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete execution_id_;
}

void ExecutionInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionInputsRequest& ExecutionInputsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionInputsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ExecutionInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ExecutionInputsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && execution_id_ != nullptr) {
    delete execution_id_;
  }
  execution_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionInputsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionInputsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.ArtifactID inputs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
          object = msg->add_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionInputsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ExecutionInputsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.ArtifactID inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ExecutionInputsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ExecutionInputsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionInputsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ExecutionInputsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::execution_id(this), output);
  }

  // repeated .flyteidl.core.ArtifactID inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->inputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ExecutionInputsRequest)
}

::google::protobuf::uint8* ExecutionInputsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ExecutionInputsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::execution_id(this), target);
  }

  // repeated .flyteidl.core.ArtifactID inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->inputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ExecutionInputsRequest)
  return target;
}

size_t ExecutionInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ExecutionInputsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.ArtifactID inputs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *execution_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionInputsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ExecutionInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionInputsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ExecutionInputsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ExecutionInputsRequest)
    MergeFrom(*source);
  }
}

void ExecutionInputsRequest::MergeFrom(const ExecutionInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ExecutionInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_execution_id()) {
    mutable_execution_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.execution_id());
  }
}

void ExecutionInputsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ExecutionInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionInputsRequest::CopyFrom(const ExecutionInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ExecutionInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionInputsRequest::IsInitialized() const {
  return true;
}

void ExecutionInputsRequest::Swap(ExecutionInputsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionInputsRequest::InternalSwap(ExecutionInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  swap(execution_id_, other->execution_id_);
}

::google::protobuf::Metadata ExecutionInputsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionInputsResponse::InitAsDefaultInstance() {
}
class ExecutionInputsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionInputsResponse::ExecutionInputsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ExecutionInputsResponse)
}
ExecutionInputsResponse::ExecutionInputsResponse(const ExecutionInputsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ExecutionInputsResponse)
}

void ExecutionInputsResponse::SharedCtor() {
}

ExecutionInputsResponse::~ExecutionInputsResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ExecutionInputsResponse)
  SharedDtor();
}

void ExecutionInputsResponse::SharedDtor() {
}

void ExecutionInputsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionInputsResponse& ExecutionInputsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionInputsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ExecutionInputsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ExecutionInputsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionInputsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionInputsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionInputsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ExecutionInputsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ExecutionInputsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ExecutionInputsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionInputsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ExecutionInputsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ExecutionInputsResponse)
}

::google::protobuf::uint8* ExecutionInputsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ExecutionInputsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ExecutionInputsResponse)
  return target;
}

size_t ExecutionInputsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ExecutionInputsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionInputsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ExecutionInputsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionInputsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionInputsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ExecutionInputsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ExecutionInputsResponse)
    MergeFrom(*source);
  }
}

void ExecutionInputsResponse::MergeFrom(const ExecutionInputsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ExecutionInputsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExecutionInputsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ExecutionInputsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionInputsResponse::CopyFrom(const ExecutionInputsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ExecutionInputsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionInputsResponse::IsInitialized() const {
  return true;
}

void ExecutionInputsResponse::Swap(ExecutionInputsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionInputsResponse::InternalSwap(ExecutionInputsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecutionInputsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace artifact
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::Artifact* Arena::CreateMaybeMessage< ::flyteidl::artifact::Artifact >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::Artifact >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateArtifactRequest_PartitionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateArtifactRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateArtifactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ArtifactSource* Arena::CreateMaybeMessage< ::flyteidl::artifact::ArtifactSource >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ArtifactSource >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ArtifactSpec* Arena::CreateMaybeMessage< ::flyteidl::artifact::ArtifactSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ArtifactSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateArtifactResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateArtifactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::GetArtifactRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::GetArtifactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::GetArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::GetArtifactResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::GetArtifactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::GetArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::SearchOptions* Arena::CreateMaybeMessage< ::flyteidl::artifact::SearchOptions >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::SearchOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::SearchArtifactsRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::SearchArtifactsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::SearchArtifactsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::SearchArtifactsResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::SearchArtifactsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::SearchArtifactsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::FindByWorkflowExecRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::FindByWorkflowExecRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::FindByWorkflowExecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::AddTagRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::AddTagRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::AddTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::AddTagResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::AddTagResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::AddTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateTriggerRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateTriggerResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateTriggerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateTriggerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::DeleteTriggerRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::DeleteTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::DeleteTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::DeleteTriggerResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::DeleteTriggerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::DeleteTriggerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ArtifactProducer* Arena::CreateMaybeMessage< ::flyteidl::artifact::ArtifactProducer >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ArtifactProducer >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::RegisterProducerRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::RegisterProducerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::RegisterProducerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ArtifactConsumer* Arena::CreateMaybeMessage< ::flyteidl::artifact::ArtifactConsumer >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ArtifactConsumer >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::RegisterConsumerRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::RegisterConsumerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::RegisterConsumerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::RegisterResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::RegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ExecutionInputsRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::ExecutionInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ExecutionInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ExecutionInputsResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::ExecutionInputsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ExecutionInputsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
