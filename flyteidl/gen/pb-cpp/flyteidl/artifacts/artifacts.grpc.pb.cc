// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/artifacts/artifacts.proto

#include "flyteidl/artifacts/artifacts.pb.h"
#include "flyteidl/artifacts/artifacts.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flyteidl {
namespace artifact {

static const char* ArtifactRegistry_method_names[] = {
  "/flyteidl.artifact.ArtifactRegistry/CreateArtifact",
  "/flyteidl.artifact.ArtifactRegistry/GetArtifact",
  "/flyteidl.artifact.ArtifactRegistry/SearchArtifacts",
  "/flyteidl.artifact.ArtifactRegistry/CreateTrigger",
  "/flyteidl.artifact.ArtifactRegistry/DeactivateTrigger",
  "/flyteidl.artifact.ArtifactRegistry/DeactivateAllTriggers",
  "/flyteidl.artifact.ArtifactRegistry/AddTag",
  "/flyteidl.artifact.ArtifactRegistry/RegisterProducer",
  "/flyteidl.artifact.ArtifactRegistry/RegisterConsumer",
  "/flyteidl.artifact.ArtifactRegistry/SetExecutionInputs",
  "/flyteidl.artifact.ArtifactRegistry/FindByWorkflowExec",
  "/flyteidl.artifact.ArtifactRegistry/ListUsage",
};

std::unique_ptr< ArtifactRegistry::Stub> ArtifactRegistry::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ArtifactRegistry::Stub> stub(new ArtifactRegistry::Stub(channel));
  return stub;
}

ArtifactRegistry::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateArtifact_(ArtifactRegistry_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifact_(ArtifactRegistry_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchArtifacts_(ArtifactRegistry_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTrigger_(ArtifactRegistry_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeactivateTrigger_(ArtifactRegistry_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeactivateAllTriggers_(ArtifactRegistry_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTag_(ArtifactRegistry_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterProducer_(ArtifactRegistry_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterConsumer_(ArtifactRegistry_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetExecutionInputs_(ArtifactRegistry_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindByWorkflowExec_(ArtifactRegistry_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUsage_(ArtifactRegistry_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ArtifactRegistry::Stub::CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::flyteidl::artifact::CreateArtifactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateArtifact_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateArtifact_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::CreateArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateArtifactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateArtifact_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateArtifact_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::CreateArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateArtifact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>* ArtifactRegistry::Stub::AsyncCreateArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::CreateArtifactResponse>::Create(channel_.get(), cq, rpcmethod_CreateArtifact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>* ArtifactRegistry::Stub::PrepareAsyncCreateArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::CreateArtifactResponse>::Create(channel_.get(), cq, rpcmethod_CreateArtifact_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::flyteidl::artifact::GetArtifactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetArtifact_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetArtifact_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::GetArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::GetArtifactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetArtifact_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetArtifact_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::GetArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::GetArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetArtifact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>* ArtifactRegistry::Stub::AsyncGetArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::GetArtifactResponse>::Create(channel_.get(), cq, rpcmethod_GetArtifact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>* ArtifactRegistry::Stub::PrepareAsyncGetArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::GetArtifactResponse>::Create(channel_.get(), cq, rpcmethod_GetArtifact_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::SearchArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::SearchArtifactsRequest& request, ::flyteidl::artifact::SearchArtifactsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchArtifacts_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::SearchArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::SearchArtifactsRequest* request, ::flyteidl::artifact::SearchArtifactsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchArtifacts_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::SearchArtifacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::SearchArtifactsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchArtifacts_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::SearchArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::SearchArtifactsRequest* request, ::flyteidl::artifact::SearchArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchArtifacts_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::SearchArtifacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::SearchArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchArtifacts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::SearchArtifactsResponse>* ArtifactRegistry::Stub::AsyncSearchArtifactsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::SearchArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::SearchArtifactsResponse>::Create(channel_.get(), cq, rpcmethod_SearchArtifacts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::SearchArtifactsResponse>* ArtifactRegistry::Stub::PrepareAsyncSearchArtifactsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::SearchArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::SearchArtifactsResponse>::Create(channel_.get(), cq, rpcmethod_SearchArtifacts_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::CreateTrigger(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateTriggerRequest& request, ::flyteidl::artifact::CreateTriggerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTrigger_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::CreateTrigger(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateTriggerRequest* request, ::flyteidl::artifact::CreateTriggerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTrigger_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::CreateTrigger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateTriggerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTrigger_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::CreateTrigger(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateTriggerRequest* request, ::flyteidl::artifact::CreateTriggerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTrigger_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::CreateTrigger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateTriggerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateTriggerResponse>* ArtifactRegistry::Stub::AsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::CreateTriggerResponse>::Create(channel_.get(), cq, rpcmethod_CreateTrigger_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateTriggerResponse>* ArtifactRegistry::Stub::PrepareAsyncCreateTriggerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::CreateTriggerResponse>::Create(channel_.get(), cq, rpcmethod_CreateTrigger_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::DeactivateTrigger(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateTriggerRequest& request, ::flyteidl::artifact::DeactivateTriggerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeactivateTrigger_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::DeactivateTrigger(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateTriggerRequest* request, ::flyteidl::artifact::DeactivateTriggerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeactivateTrigger_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::DeactivateTrigger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::DeactivateTriggerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeactivateTrigger_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::DeactivateTrigger(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateTriggerRequest* request, ::flyteidl::artifact::DeactivateTriggerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeactivateTrigger_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::DeactivateTrigger(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::DeactivateTriggerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeactivateTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::DeactivateTriggerResponse>* ArtifactRegistry::Stub::AsyncDeactivateTriggerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::DeactivateTriggerResponse>::Create(channel_.get(), cq, rpcmethod_DeactivateTrigger_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::DeactivateTriggerResponse>* ArtifactRegistry::Stub::PrepareAsyncDeactivateTriggerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::DeactivateTriggerResponse>::Create(channel_.get(), cq, rpcmethod_DeactivateTrigger_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::DeactivateAllTriggers(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateAllTriggersRequest& request, ::flyteidl::artifact::DeactivateAllTriggersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeactivateAllTriggers_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::DeactivateAllTriggers(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateAllTriggersRequest* request, ::flyteidl::artifact::DeactivateAllTriggersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeactivateAllTriggers_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::DeactivateAllTriggers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::DeactivateAllTriggersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeactivateAllTriggers_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::DeactivateAllTriggers(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateAllTriggersRequest* request, ::flyteidl::artifact::DeactivateAllTriggersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeactivateAllTriggers_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::DeactivateAllTriggers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::DeactivateAllTriggersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeactivateAllTriggers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::DeactivateAllTriggersResponse>* ArtifactRegistry::Stub::AsyncDeactivateAllTriggersRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateAllTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::DeactivateAllTriggersResponse>::Create(channel_.get(), cq, rpcmethod_DeactivateAllTriggers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::DeactivateAllTriggersResponse>* ArtifactRegistry::Stub::PrepareAsyncDeactivateAllTriggersRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::DeactivateAllTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::DeactivateAllTriggersResponse>::Create(channel_.get(), cq, rpcmethod_DeactivateAllTriggers_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::AddTag(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagRequest& request, ::flyteidl::artifact::AddTagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddTag_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::AddTag(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagRequest* request, ::flyteidl::artifact::AddTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTag_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::AddTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::AddTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTag_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::AddTag(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagRequest* request, ::flyteidl::artifact::AddTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTag_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::AddTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::AddTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagResponse>* ArtifactRegistry::Stub::AsyncAddTagRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::AddTagResponse>::Create(channel_.get(), cq, rpcmethod_AddTag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagResponse>* ArtifactRegistry::Stub::PrepareAsyncAddTagRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::AddTagResponse>::Create(channel_.get(), cq, rpcmethod_AddTag_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::RegisterProducer(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterProducerRequest& request, ::flyteidl::artifact::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterProducer_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::RegisterProducer(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterProducerRequest* request, ::flyteidl::artifact::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterProducer_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::RegisterProducer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterProducer_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::RegisterProducer(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterProducerRequest* request, ::flyteidl::artifact::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterProducer_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::RegisterProducer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterProducer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RegisterResponse>* ArtifactRegistry::Stub::AsyncRegisterProducerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterProducerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterProducer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RegisterResponse>* ArtifactRegistry::Stub::PrepareAsyncRegisterProducerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterProducerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterProducer_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::RegisterConsumer(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterConsumerRequest& request, ::flyteidl::artifact::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterConsumer_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::RegisterConsumer(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterConsumerRequest* request, ::flyteidl::artifact::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterConsumer_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::RegisterConsumer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterConsumer_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::RegisterConsumer(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterConsumerRequest* request, ::flyteidl::artifact::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterConsumer_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::RegisterConsumer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterConsumer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RegisterResponse>* ArtifactRegistry::Stub::AsyncRegisterConsumerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterConsumerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterConsumer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RegisterResponse>* ArtifactRegistry::Stub::PrepareAsyncRegisterConsumerRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RegisterConsumerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterConsumer_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::SetExecutionInputs(::grpc::ClientContext* context, const ::flyteidl::artifact::ExecutionInputsRequest& request, ::flyteidl::artifact::ExecutionInputsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetExecutionInputs_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::SetExecutionInputs(::grpc::ClientContext* context, const ::flyteidl::artifact::ExecutionInputsRequest* request, ::flyteidl::artifact::ExecutionInputsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetExecutionInputs_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::SetExecutionInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ExecutionInputsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetExecutionInputs_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::SetExecutionInputs(::grpc::ClientContext* context, const ::flyteidl::artifact::ExecutionInputsRequest* request, ::flyteidl::artifact::ExecutionInputsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetExecutionInputs_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::SetExecutionInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ExecutionInputsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetExecutionInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ExecutionInputsResponse>* ArtifactRegistry::Stub::AsyncSetExecutionInputsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ExecutionInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::ExecutionInputsResponse>::Create(channel_.get(), cq, rpcmethod_SetExecutionInputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ExecutionInputsResponse>* ArtifactRegistry::Stub::PrepareAsyncSetExecutionInputsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ExecutionInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::ExecutionInputsResponse>::Create(channel_.get(), cq, rpcmethod_SetExecutionInputs_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::FindByWorkflowExec(::grpc::ClientContext* context, const ::flyteidl::artifact::FindByWorkflowExecRequest& request, ::flyteidl::artifact::SearchArtifactsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FindByWorkflowExec_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::FindByWorkflowExec(::grpc::ClientContext* context, const ::flyteidl::artifact::FindByWorkflowExecRequest* request, ::flyteidl::artifact::SearchArtifactsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindByWorkflowExec_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::FindByWorkflowExec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::SearchArtifactsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindByWorkflowExec_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::FindByWorkflowExec(::grpc::ClientContext* context, const ::flyteidl::artifact::FindByWorkflowExecRequest* request, ::flyteidl::artifact::SearchArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FindByWorkflowExec_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::FindByWorkflowExec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::SearchArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FindByWorkflowExec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::SearchArtifactsResponse>* ArtifactRegistry::Stub::AsyncFindByWorkflowExecRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::FindByWorkflowExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::SearchArtifactsResponse>::Create(channel_.get(), cq, rpcmethod_FindByWorkflowExec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::SearchArtifactsResponse>* ArtifactRegistry::Stub::PrepareAsyncFindByWorkflowExecRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::FindByWorkflowExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::SearchArtifactsResponse>::Create(channel_.get(), cq, rpcmethod_FindByWorkflowExec_, context, request, false);
}

::grpc::Status ArtifactRegistry::Stub::ListUsage(::grpc::ClientContext* context, const ::flyteidl::artifact::ListUsageRequest& request, ::flyteidl::artifact::ListUsageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUsage_, context, request, response);
}

void ArtifactRegistry::Stub::experimental_async::ListUsage(::grpc::ClientContext* context, const ::flyteidl::artifact::ListUsageRequest* request, ::flyteidl::artifact::ListUsageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUsage_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::ListUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListUsageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUsage_, context, request, response, std::move(f));
}

void ArtifactRegistry::Stub::experimental_async::ListUsage(::grpc::ClientContext* context, const ::flyteidl::artifact::ListUsageRequest* request, ::flyteidl::artifact::ListUsageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUsage_, context, request, response, reactor);
}

void ArtifactRegistry::Stub::experimental_async::ListUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListUsageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUsage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListUsageResponse>* ArtifactRegistry::Stub::AsyncListUsageRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListUsageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::ListUsageResponse>::Create(channel_.get(), cq, rpcmethod_ListUsage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListUsageResponse>* ArtifactRegistry::Stub::PrepareAsyncListUsageRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListUsageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::artifact::ListUsageResponse>::Create(channel_.get(), cq, rpcmethod_ListUsage_, context, request, false);
}

ArtifactRegistry::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::CreateArtifactRequest, ::flyteidl::artifact::CreateArtifactResponse>(
          std::mem_fn(&ArtifactRegistry::Service::CreateArtifact), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::GetArtifactRequest, ::flyteidl::artifact::GetArtifactResponse>(
          std::mem_fn(&ArtifactRegistry::Service::GetArtifact), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::SearchArtifactsRequest, ::flyteidl::artifact::SearchArtifactsResponse>(
          std::mem_fn(&ArtifactRegistry::Service::SearchArtifacts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::CreateTriggerRequest, ::flyteidl::artifact::CreateTriggerResponse>(
          std::mem_fn(&ArtifactRegistry::Service::CreateTrigger), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::DeactivateTriggerRequest, ::flyteidl::artifact::DeactivateTriggerResponse>(
          std::mem_fn(&ArtifactRegistry::Service::DeactivateTrigger), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::DeactivateAllTriggersRequest, ::flyteidl::artifact::DeactivateAllTriggersResponse>(
          std::mem_fn(&ArtifactRegistry::Service::DeactivateAllTriggers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::AddTagRequest, ::flyteidl::artifact::AddTagResponse>(
          std::mem_fn(&ArtifactRegistry::Service::AddTag), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::RegisterProducerRequest, ::flyteidl::artifact::RegisterResponse>(
          std::mem_fn(&ArtifactRegistry::Service::RegisterProducer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::RegisterConsumerRequest, ::flyteidl::artifact::RegisterResponse>(
          std::mem_fn(&ArtifactRegistry::Service::RegisterConsumer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::ExecutionInputsRequest, ::flyteidl::artifact::ExecutionInputsResponse>(
          std::mem_fn(&ArtifactRegistry::Service::SetExecutionInputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::FindByWorkflowExecRequest, ::flyteidl::artifact::SearchArtifactsResponse>(
          std::mem_fn(&ArtifactRegistry::Service::FindByWorkflowExec), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArtifactRegistry_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArtifactRegistry::Service, ::flyteidl::artifact::ListUsageRequest, ::flyteidl::artifact::ListUsageResponse>(
          std::mem_fn(&ArtifactRegistry::Service::ListUsage), this)));
}

ArtifactRegistry::Service::~Service() {
}

::grpc::Status ArtifactRegistry::Service::CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::SearchArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::SearchArtifactsRequest* request, ::flyteidl::artifact::SearchArtifactsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::CreateTrigger(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateTriggerRequest* request, ::flyteidl::artifact::CreateTriggerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::DeactivateTrigger(::grpc::ServerContext* context, const ::flyteidl::artifact::DeactivateTriggerRequest* request, ::flyteidl::artifact::DeactivateTriggerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::DeactivateAllTriggers(::grpc::ServerContext* context, const ::flyteidl::artifact::DeactivateAllTriggersRequest* request, ::flyteidl::artifact::DeactivateAllTriggersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::AddTag(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagRequest* request, ::flyteidl::artifact::AddTagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::RegisterProducer(::grpc::ServerContext* context, const ::flyteidl::artifact::RegisterProducerRequest* request, ::flyteidl::artifact::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::RegisterConsumer(::grpc::ServerContext* context, const ::flyteidl::artifact::RegisterConsumerRequest* request, ::flyteidl::artifact::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::SetExecutionInputs(::grpc::ServerContext* context, const ::flyteidl::artifact::ExecutionInputsRequest* request, ::flyteidl::artifact::ExecutionInputsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::FindByWorkflowExec(::grpc::ServerContext* context, const ::flyteidl::artifact::FindByWorkflowExecRequest* request, ::flyteidl::artifact::SearchArtifactsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArtifactRegistry::Service::ListUsage(::grpc::ServerContext* context, const ::flyteidl::artifact::ListUsageRequest* request, ::flyteidl::artifact::ListUsageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flyteidl
}  // namespace artifact

