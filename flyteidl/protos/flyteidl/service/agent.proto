syntax = "proto3";
package flyteidl.service;

option go_package = "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service";

import "google/api/annotations.proto";
import "flyteidl/admin/agent.proto";
import "flyteidl/core/identifier.proto";
import "flyteidl/core/metrics.proto";
import "validate/validate.proto";

// AsyncAgentService defines an RPC Service that allows propeller to send the request to the agent server.
service AsyncAgentService {
  // Send a task create request to the agent server.
  rpc CreateTask (flyteidl.admin.CreateTaskRequest) returns (flyteidl.admin.CreateTaskResponse){};
  // Get job status.
  rpc GetTask (flyteidl.admin.GetTaskRequest) returns (flyteidl.admin.GetTaskResponse){};
  // Delete the task resource.
  rpc DeleteTask (flyteidl.admin.DeleteTaskRequest) returns (flyteidl.admin.DeleteTaskResponse){};
}

// AgentMetadataService defines an RPC service that is also served over HTTP via grpc-gateway.
// This service allows propeller or users to get the metadata of agents.
service AgentMetadataService {
  // Fetch a :ref:`ref_flyteidl.admin.Agent` definition.
  rpc GetAgent (flyteidl.admin.GetAgentRequest) returns (flyteidl.admin.GetAgentResponse){
    option (google.api.http) = {
      get: "/api/v1/agent/{name}" 
    };
  };

  // Fetch a list of :ref:`ref_flyteidl.admin.Agent` definitions.
  rpc ListAgents (flyteidl.admin.ListAgentsRequest) returns (flyteidl.admin.ListAgentsResponse){
    option (google.api.http) = {
      get: "/api/v1/agents"
    };
  };
}

message GetTaskExecutionMetricsRequest {
  // The task execution attempt to query
  core.TaskExecutionIdentifier id = 1 [(validate.rules).message.required = true];
  // The metrics to query. If empty, will return a default set of metrics
  repeated core.ExecutionMetric metrics = 2 [(validate.rules).repeated.unique = true];
  // Used for fetching sub task level metrics . eg in case of map task
  uint32 subtask_index = 3;
  // Retry attempt of the subtask.
  uint32 subtask_retry_attempt = 4;
}

message GetTaskExecutionMetricsResponse {
  // The execution metric results
  repeated core.ExecutionMetricResult results = 1;
}
