syntax = "proto3";

package flyteidl.event;

option go_package = "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/event";

import "flyteidl/event/event.proto";
import "flyteidl/core/literals.proto";
import "flyteidl/core/interface.proto";
import "flyteidl/core/artifact_id.proto";
import "flyteidl/core/identifier.proto";
import "google/protobuf/timestamp.proto";

// This is the cloud event parallel to the raw WorkflowExecutionEvent message. It's filled in with additional
// information that downstream consumers may find useful.
message CloudEventWorkflowExecution {
  event.WorkflowExecutionEvent raw_event = 1;

  core.LiteralMap output_data = 2;

  core.TypedInterface output_interface = 3;

  core.LiteralMap input_data = 4;

  // The following are ExecutionMetadata fields
  // We can't have the ExecutionMetadata object directly because of import cycle
  repeated core.ArtifactID artifact_ids = 5;
  core.WorkflowExecutionIdentifier reference_execution = 6;

  // The ID of the LP that generated the execution that generated the Artifact.
  // Here for provenance information.
  // Launch plan IDs are easier to get than workflow IDs so we'll use these for now.
  core.Identifier launch_plan_id = 7;
}

message CloudEventNodeExecution {
  event.NodeExecutionEvent raw_event = 1;

  // The relevant task execution if applicable
  core.TaskExecutionIdentifier task_exec_id = 2;

  // Hydrated output
  core.LiteralMap output_data = 3;

  // The typed interface for the task that produced the event.
  core.TypedInterface output_interface = 4;

  core.LiteralMap input_data = 5;

  // The following are ExecutionMetadata fields
  // We can't have the ExecutionMetadata object directly because of import cycle
  repeated core.ArtifactID artifact_ids = 6;

  // The ID of the LP that generated the execution that generated the Artifact.
  // Here for provenance information.
  // Launch plan IDs are easier to get than workflow IDs so we'll use these for now.
  core.Identifier launch_plan_id = 7;
}

message CloudEventTaskExecution {
  event.TaskExecutionEvent raw_event = 1;
}

// This event is to be sent by Admin after it creates an execution.
message CloudEventExecutionStart {
  // The execution created.
  core.WorkflowExecutionIdentifier execution_id = 1;
  // The launch plan used.
  core.Identifier launch_plan_id = 2;

  core.Identifier workflow_id = 3;

  // Artifact IDs found
  repeated core.ArtifactID artifact_ids = 4;

  // Artifact keys found.
  repeated string artifact_keys = 5;
}
