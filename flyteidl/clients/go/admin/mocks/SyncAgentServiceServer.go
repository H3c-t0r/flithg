// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// SyncAgentServiceServer is an autogenerated mock type for the SyncAgentServiceServer type
type SyncAgentServiceServer struct {
	mock.Mock
}

type SyncAgentServiceServer_DoTask struct {
	*mock.Call
}

func (_m SyncAgentServiceServer_DoTask) Return(_a0 *admin.DoTaskResponse, _a1 error) *SyncAgentServiceServer_DoTask {
	return &SyncAgentServiceServer_DoTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SyncAgentServiceServer) OnDoTask(_a0 context.Context, _a1 *admin.DoTaskRequest) *SyncAgentServiceServer_DoTask {
	c_call := _m.On("DoTask", _a0, _a1)
	return &SyncAgentServiceServer_DoTask{Call: c_call}
}

func (_m *SyncAgentServiceServer) OnDoTaskMatch(matchers ...interface{}) *SyncAgentServiceServer_DoTask {
	c_call := _m.On("DoTask", matchers...)
	return &SyncAgentServiceServer_DoTask{Call: c_call}
}

// DoTask provides a mock function with given fields: _a0, _a1
func (_m *SyncAgentServiceServer) DoTask(_a0 context.Context, _a1 *admin.DoTaskRequest) (*admin.DoTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *admin.DoTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DoTaskRequest) *admin.DoTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DoTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.DoTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
