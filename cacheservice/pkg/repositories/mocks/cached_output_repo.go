// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/cacheservice/pkg/repositories/models"
)

// CachedOutputRepo is an autogenerated mock type for the CachedOutputRepo type
type CachedOutputRepo struct {
	mock.Mock
}

type CachedOutputRepo_Delete struct {
	*mock.Call
}

func (_m CachedOutputRepo_Delete) Return(_a0 error) *CachedOutputRepo_Delete {
	return &CachedOutputRepo_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *CachedOutputRepo) OnDelete(ctx context.Context, key string) *CachedOutputRepo_Delete {
	c_call := _m.On("Delete", ctx, key)
	return &CachedOutputRepo_Delete{Call: c_call}
}

func (_m *CachedOutputRepo) OnDeleteMatch(matchers ...interface{}) *CachedOutputRepo_Delete {
	c_call := _m.On("Delete", matchers...)
	return &CachedOutputRepo_Delete{Call: c_call}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *CachedOutputRepo) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type CachedOutputRepo_Get struct {
	*mock.Call
}

func (_m CachedOutputRepo_Get) Return(_a0 *models.CachedOutput, _a1 error) *CachedOutputRepo_Get {
	return &CachedOutputRepo_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CachedOutputRepo) OnGet(ctx context.Context, key string) *CachedOutputRepo_Get {
	c_call := _m.On("Get", ctx, key)
	return &CachedOutputRepo_Get{Call: c_call}
}

func (_m *CachedOutputRepo) OnGetMatch(matchers ...interface{}) *CachedOutputRepo_Get {
	c_call := _m.On("Get", matchers...)
	return &CachedOutputRepo_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, key
func (_m *CachedOutputRepo) Get(ctx context.Context, key string) (*models.CachedOutput, error) {
	ret := _m.Called(ctx, key)

	var r0 *models.CachedOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.CachedOutput); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CachedOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CachedOutputRepo_Put struct {
	*mock.Call
}

func (_m CachedOutputRepo_Put) Return(_a0 error) *CachedOutputRepo_Put {
	return &CachedOutputRepo_Put{Call: _m.Call.Return(_a0)}
}

func (_m *CachedOutputRepo) OnPut(ctx context.Context, key string, cachedOutput *models.CachedOutput) *CachedOutputRepo_Put {
	c_call := _m.On("Put", ctx, key, cachedOutput)
	return &CachedOutputRepo_Put{Call: c_call}
}

func (_m *CachedOutputRepo) OnPutMatch(matchers ...interface{}) *CachedOutputRepo_Put {
	c_call := _m.On("Put", matchers...)
	return &CachedOutputRepo_Put{Call: c_call}
}

// Put provides a mock function with given fields: ctx, key, cachedOutput
func (_m *CachedOutputRepo) Put(ctx context.Context, key string, cachedOutput *models.CachedOutput) error {
	ret := _m.Called(ctx, key, cachedOutput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.CachedOutput) error); ok {
		r0 = rf(ctx, key, cachedOutput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
