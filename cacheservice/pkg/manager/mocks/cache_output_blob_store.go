// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"
)

// CacheOutputBlobStore is an autogenerated mock type for the CacheOutputBlobStore type
type CacheOutputBlobStore struct {
	mock.Mock
}

type CacheOutputBlobStore_Create struct {
	*mock.Call
}

func (_m CacheOutputBlobStore_Create) Return(_a0 string, _a1 error) *CacheOutputBlobStore_Create {
	return &CacheOutputBlobStore_Create{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheOutputBlobStore) OnCreate(ctx context.Context, key string, output *core.LiteralMap) *CacheOutputBlobStore_Create {
	c_call := _m.On("Create", ctx, key, output)
	return &CacheOutputBlobStore_Create{Call: c_call}
}

func (_m *CacheOutputBlobStore) OnCreateMatch(matchers ...interface{}) *CacheOutputBlobStore_Create {
	c_call := _m.On("Create", matchers...)
	return &CacheOutputBlobStore_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, key, output
func (_m *CacheOutputBlobStore) Create(ctx context.Context, key string, output *core.LiteralMap) (string, error) {
	ret := _m.Called(ctx, key, output)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, *core.LiteralMap) string); ok {
		r0 = rf(ctx, key, output)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *core.LiteralMap) error); ok {
		r1 = rf(ctx, key, output)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CacheOutputBlobStore_Delete struct {
	*mock.Call
}

func (_m CacheOutputBlobStore_Delete) Return(_a0 error) *CacheOutputBlobStore_Delete {
	return &CacheOutputBlobStore_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *CacheOutputBlobStore) OnDelete(ctx context.Context, uri string) *CacheOutputBlobStore_Delete {
	c_call := _m.On("Delete", ctx, uri)
	return &CacheOutputBlobStore_Delete{Call: c_call}
}

func (_m *CacheOutputBlobStore) OnDeleteMatch(matchers ...interface{}) *CacheOutputBlobStore_Delete {
	c_call := _m.On("Delete", matchers...)
	return &CacheOutputBlobStore_Delete{Call: c_call}
}

// Delete provides a mock function with given fields: ctx, uri
func (_m *CacheOutputBlobStore) Delete(ctx context.Context, uri string) error {
	ret := _m.Called(ctx, uri)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uri)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
