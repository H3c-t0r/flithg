// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/cacheservice/repositories/models"

	time "time"
)

// ReservationDataStoreClient is an autogenerated mock type for the ReservationDataStoreClient type
type ReservationDataStoreClient struct {
	mock.Mock
}

type ReservationDataStoreClient_Create struct {
	*mock.Call
}

func (_m ReservationDataStoreClient_Create) Return(_a0 error) *ReservationDataStoreClient_Create {
	return &ReservationDataStoreClient_Create{Call: _m.Call.Return(_a0)}
}

func (_m *ReservationDataStoreClient) OnCreate(ctx context.Context, reservation *models.Reservation) *ReservationDataStoreClient_Create {
	c_call := _m.On("Create", ctx, reservation)
	return &ReservationDataStoreClient_Create{Call: c_call}
}

func (_m *ReservationDataStoreClient) OnCreateMatch(matchers ...interface{}) *ReservationDataStoreClient_Create {
	c_call := _m.On("Create", matchers...)
	return &ReservationDataStoreClient_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, reservation
func (_m *ReservationDataStoreClient) Create(ctx context.Context, reservation *models.Reservation) error {
	ret := _m.Called(ctx, reservation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reservation) error); ok {
		r0 = rf(ctx, reservation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ReservationDataStoreClient_Delete struct {
	*mock.Call
}

func (_m ReservationDataStoreClient_Delete) Return(_a0 error) *ReservationDataStoreClient_Delete {
	return &ReservationDataStoreClient_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *ReservationDataStoreClient) OnDelete(ctx context.Context, key string, ownerID string) *ReservationDataStoreClient_Delete {
	c_call := _m.On("Delete", ctx, key, ownerID)
	return &ReservationDataStoreClient_Delete{Call: c_call}
}

func (_m *ReservationDataStoreClient) OnDeleteMatch(matchers ...interface{}) *ReservationDataStoreClient_Delete {
	c_call := _m.On("Delete", matchers...)
	return &ReservationDataStoreClient_Delete{Call: c_call}
}

// Delete provides a mock function with given fields: ctx, key, ownerID
func (_m *ReservationDataStoreClient) Delete(ctx context.Context, key string, ownerID string) error {
	ret := _m.Called(ctx, key, ownerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, ownerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ReservationDataStoreClient_Get struct {
	*mock.Call
}

func (_m ReservationDataStoreClient_Get) Return(_a0 *models.Reservation, _a1 error) *ReservationDataStoreClient_Get {
	return &ReservationDataStoreClient_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ReservationDataStoreClient) OnGet(ctx context.Context, key string) *ReservationDataStoreClient_Get {
	c_call := _m.On("Get", ctx, key)
	return &ReservationDataStoreClient_Get{Call: c_call}
}

func (_m *ReservationDataStoreClient) OnGetMatch(matchers ...interface{}) *ReservationDataStoreClient_Get {
	c_call := _m.On("Get", matchers...)
	return &ReservationDataStoreClient_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, key
func (_m *ReservationDataStoreClient) Get(ctx context.Context, key string) (*models.Reservation, error) {
	ret := _m.Called(ctx, key)

	var r0 *models.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Reservation); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ReservationDataStoreClient_Update struct {
	*mock.Call
}

func (_m ReservationDataStoreClient_Update) Return(_a0 error) *ReservationDataStoreClient_Update {
	return &ReservationDataStoreClient_Update{Call: _m.Call.Return(_a0)}
}

func (_m *ReservationDataStoreClient) OnUpdate(ctx context.Context, reservation *models.Reservation, now time.Time) *ReservationDataStoreClient_Update {
	c_call := _m.On("Update", ctx, reservation, now)
	return &ReservationDataStoreClient_Update{Call: c_call}
}

func (_m *ReservationDataStoreClient) OnUpdateMatch(matchers ...interface{}) *ReservationDataStoreClient_Update {
	c_call := _m.On("Update", matchers...)
	return &ReservationDataStoreClient_Update{Call: c_call}
}

// Update provides a mock function with given fields: ctx, reservation, now
func (_m *ReservationDataStoreClient) Update(ctx context.Context, reservation *models.Reservation, now time.Time) error {
	ret := _m.Called(ctx, reservation, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reservation, time.Time) error); ok {
		r0 = rf(ctx, reservation, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
