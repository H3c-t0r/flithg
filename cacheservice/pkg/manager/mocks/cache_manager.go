// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cacheservice "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/cacheservice"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CacheManager is an autogenerated mock type for the CacheManager type
type CacheManager struct {
	mock.Mock
}

type CacheManager_Delete struct {
	*mock.Call
}

func (_m CacheManager_Delete) Return(_a0 *cacheservice.DeleteCacheResponse, _a1 error) *CacheManager_Delete {
	return &CacheManager_Delete{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheManager) OnDelete(ctx context.Context, request *cacheservice.DeleteCacheRequest) *CacheManager_Delete {
	c_call := _m.On("Delete", ctx, request)
	return &CacheManager_Delete{Call: c_call}
}

func (_m *CacheManager) OnDeleteMatch(matchers ...interface{}) *CacheManager_Delete {
	c_call := _m.On("Delete", matchers...)
	return &CacheManager_Delete{Call: c_call}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *CacheManager) Delete(ctx context.Context, request *cacheservice.DeleteCacheRequest) (*cacheservice.DeleteCacheResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *cacheservice.DeleteCacheResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.DeleteCacheRequest) *cacheservice.DeleteCacheResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.DeleteCacheResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.DeleteCacheRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CacheManager_Get struct {
	*mock.Call
}

func (_m CacheManager_Get) Return(_a0 *cacheservice.GetCacheResponse, _a1 error) *CacheManager_Get {
	return &CacheManager_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheManager) OnGet(ctx context.Context, request *cacheservice.GetCacheRequest) *CacheManager_Get {
	c_call := _m.On("Get", ctx, request)
	return &CacheManager_Get{Call: c_call}
}

func (_m *CacheManager) OnGetMatch(matchers ...interface{}) *CacheManager_Get {
	c_call := _m.On("Get", matchers...)
	return &CacheManager_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, request
func (_m *CacheManager) Get(ctx context.Context, request *cacheservice.GetCacheRequest) (*cacheservice.GetCacheResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *cacheservice.GetCacheResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.GetCacheRequest) *cacheservice.GetCacheResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.GetCacheResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.GetCacheRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CacheManager_GetOrExtendReservation struct {
	*mock.Call
}

func (_m CacheManager_GetOrExtendReservation) Return(_a0 *cacheservice.GetOrExtendReservationResponse, _a1 error) *CacheManager_GetOrExtendReservation {
	return &CacheManager_GetOrExtendReservation{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheManager) OnGetOrExtendReservation(ctx context.Context, request *cacheservice.GetOrExtendReservationRequest, now time.Time) *CacheManager_GetOrExtendReservation {
	c_call := _m.On("GetOrExtendReservation", ctx, request, now)
	return &CacheManager_GetOrExtendReservation{Call: c_call}
}

func (_m *CacheManager) OnGetOrExtendReservationMatch(matchers ...interface{}) *CacheManager_GetOrExtendReservation {
	c_call := _m.On("GetOrExtendReservation", matchers...)
	return &CacheManager_GetOrExtendReservation{Call: c_call}
}

// GetOrExtendReservation provides a mock function with given fields: ctx, request, now
func (_m *CacheManager) GetOrExtendReservation(ctx context.Context, request *cacheservice.GetOrExtendReservationRequest, now time.Time) (*cacheservice.GetOrExtendReservationResponse, error) {
	ret := _m.Called(ctx, request, now)

	var r0 *cacheservice.GetOrExtendReservationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.GetOrExtendReservationRequest, time.Time) *cacheservice.GetOrExtendReservationResponse); ok {
		r0 = rf(ctx, request, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.GetOrExtendReservationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.GetOrExtendReservationRequest, time.Time) error); ok {
		r1 = rf(ctx, request, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CacheManager_Put struct {
	*mock.Call
}

func (_m CacheManager_Put) Return(_a0 *cacheservice.PutCacheResponse, _a1 error) *CacheManager_Put {
	return &CacheManager_Put{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheManager) OnPut(ctx context.Context, request *cacheservice.PutCacheRequest) *CacheManager_Put {
	c_call := _m.On("Put", ctx, request)
	return &CacheManager_Put{Call: c_call}
}

func (_m *CacheManager) OnPutMatch(matchers ...interface{}) *CacheManager_Put {
	c_call := _m.On("Put", matchers...)
	return &CacheManager_Put{Call: c_call}
}

// Put provides a mock function with given fields: ctx, request
func (_m *CacheManager) Put(ctx context.Context, request *cacheservice.PutCacheRequest) (*cacheservice.PutCacheResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *cacheservice.PutCacheResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.PutCacheRequest) *cacheservice.PutCacheResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.PutCacheResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.PutCacheRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CacheManager_ReleaseReservation struct {
	*mock.Call
}

func (_m CacheManager_ReleaseReservation) Return(_a0 *cacheservice.ReleaseReservationResponse, _a1 error) *CacheManager_ReleaseReservation {
	return &CacheManager_ReleaseReservation{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheManager) OnReleaseReservation(ctx context.Context, request *cacheservice.ReleaseReservationRequest) *CacheManager_ReleaseReservation {
	c_call := _m.On("ReleaseReservation", ctx, request)
	return &CacheManager_ReleaseReservation{Call: c_call}
}

func (_m *CacheManager) OnReleaseReservationMatch(matchers ...interface{}) *CacheManager_ReleaseReservation {
	c_call := _m.On("ReleaseReservation", matchers...)
	return &CacheManager_ReleaseReservation{Call: c_call}
}

// ReleaseReservation provides a mock function with given fields: ctx, request
func (_m *CacheManager) ReleaseReservation(ctx context.Context, request *cacheservice.ReleaseReservationRequest) (*cacheservice.ReleaseReservationResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *cacheservice.ReleaseReservationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.ReleaseReservationRequest) *cacheservice.ReleaseReservationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.ReleaseReservationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.ReleaseReservationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
