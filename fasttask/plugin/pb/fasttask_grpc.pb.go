// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fasttask.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FastTask_Heartbeat_FullMethodName = "/fasttask.FastTask/Heartbeat"
)

// FastTaskClient is the client API for FastTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FastTaskClient interface {
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (FastTask_HeartbeatClient, error)
}

type fastTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewFastTaskClient(cc grpc.ClientConnInterface) FastTaskClient {
	return &fastTaskClient{cc}
}

func (c *fastTaskClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (FastTask_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &FastTask_ServiceDesc.Streams[0], FastTask_Heartbeat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fastTaskHeartbeatClient{stream}
	return x, nil
}

type FastTask_HeartbeatClient interface {
	Send(*HeartbeatRequest) error
	Recv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type fastTaskHeartbeatClient struct {
	grpc.ClientStream
}

func (x *fastTaskHeartbeatClient) Send(m *HeartbeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fastTaskHeartbeatClient) Recv() (*HeartbeatResponse, error) {
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FastTaskServer is the server API for FastTask service.
// All implementations must embed UnimplementedFastTaskServer
// for forward compatibility
type FastTaskServer interface {
	Heartbeat(FastTask_HeartbeatServer) error
	mustEmbedUnimplementedFastTaskServer()
}

// UnimplementedFastTaskServer must be embedded to have forward compatible implementations.
type UnimplementedFastTaskServer struct {
}

func (UnimplementedFastTaskServer) Heartbeat(FastTask_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFastTaskServer) mustEmbedUnimplementedFastTaskServer() {}

// UnsafeFastTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FastTaskServer will
// result in compilation errors.
type UnsafeFastTaskServer interface {
	mustEmbedUnimplementedFastTaskServer()
}

func RegisterFastTaskServer(s grpc.ServiceRegistrar, srv FastTaskServer) {
	s.RegisterService(&FastTask_ServiceDesc, srv)
}

func _FastTask_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FastTaskServer).Heartbeat(&fastTaskHeartbeatServer{stream})
}

type FastTask_HeartbeatServer interface {
	Send(*HeartbeatResponse) error
	Recv() (*HeartbeatRequest, error)
	grpc.ServerStream
}

type fastTaskHeartbeatServer struct {
	grpc.ServerStream
}

func (x *fastTaskHeartbeatServer) Send(m *HeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fastTaskHeartbeatServer) Recv() (*HeartbeatRequest, error) {
	m := new(HeartbeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FastTask_ServiceDesc is the grpc.ServiceDesc for FastTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FastTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fasttask.FastTask",
	HandlerType: (*FastTaskServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _FastTask_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fasttask.proto",
}
