apiVersion: v1
kind: Namespace
metadata:
  name: flyte
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
    - fly
    singular: flyteworkflow
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datacatalog
  namespace: flyte
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyteadmin
  namespace: flyte
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: flyte
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyteadmin
  namespace: flyte
rules:
- apiGroups:
  - ""
  - flyte.lyft.com
  - rbac.authorization.k8s.io
  resources:
  - configmaps
  - flyteworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flytepropeller
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: flyteadmin-binding
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyteadmin
subjects:
- kind: ServiceAccount
  name: flyteadmin
  namespace: flyte
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: flytepropeller
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: flyte
---
apiVersion: v1
data:
  aa_namespace.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
kind: ConfigMap
metadata:
  name: clusterresource-template-dgc9fcm2kh
  namespace: flyte
---
apiVersion: v1
data:
  datacatalog_config.yaml: |
    logger:
      show-source: true
      level: 5
    datacatalog:
      storage-prefix: metadata/datacatalog
      metrics-scope: "datacatalog"
      profiler-port: 10254
    application:
      grpcPort: 8089
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          # TODO: replace <project-id> with the GCP project ID
          project_id: <project-id>
          scopes: https://www.googleapis.com/auth/devstorage.read_write
      container: "flyte"
    database:
      port: 5432
      username: flyte
      host: cloudsqlproxy
      dbname: datacatalog
      options: "sslmode=disable"
      passwordPath: /etc/gcp/db_pwd.txt
kind: ConfigMap
metadata:
  name: datacatalog-config-9b44c6f976
  namespace: flyte
---
apiVersion: v1
data:
  flyteadmin_config.yaml: |
    logger:
      show-source: true
      level: 5
    server:
      httpPort: 8088
      grpcPort: 8089
      security:
        secure: false
        useAuth: false
        allowCors: true
        allowedOrigins:
        # TODO: use real origin
        - http://flyte.example.com
    flyteadmin:
      roleNameKey: "iam.amazonaws.com/role"
      profilerPort: 10254
      metricsScope: "flyte:"
      metadataStoragePrefix:
        - "metadata"
        - "admin"
      testing:
        host: http://flyteadmin
    database:
      port: 5432
      username: flyte
      host: cloudsqlproxy
      dbname: flyte
      options: "sslmode=disable"
      passwordPath: /etc/gcp/db_pwd.txt
    remoteData:
      scheme: "gcp"
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          # TODO: replace <project-id> with the GCP project ID
          project_id: <project-id>
          scopes: https://www.googleapis.com/auth/devstorage.read_write
      container: "flyte"
    task_resources:
      defaults:
        cpu: 1000m
        memory: 1000Mi
        storage: 5Mi
      limits:
        cpu: 2
        memory: 2G
        storage: 20Mi
    task_type_whitelist: {}
    domains:
      - id: development
        name: development
      - id: staging
        name: staging
      - id: production
        name: production
    cluster_resources:
      templatePath: "/etc/flyte/clusterresource/templates"
      refresh: 5m
kind: ConfigMap
metadata:
  name: flyte-admin-config-9k6mm9665h
  namespace: flyte
---
apiVersion: v1
data:
  ADMIN_API_URL: http://flyteadmin-internal-lb
  BASE_URL: /console
  CONFIG_DIR: /etc/flyte/config
kind: ConfigMap
metadata:
  name: flyte-console-config
  namespace: flyte
---
apiVersion: v1
data:
  config.yaml: |
    plugins:
      logs:
        # Log links can link to multiple options
        # #1 Kubernetes dashboard
        kubernetes-enabled: false
        # #2 GCP stackdriver
        stackdriver-enabled: true
        # TODO: replace <project-id> with the GCP project ID
        gcp-project: <project-id>
        stackdriver-logresourcename: k8s_container
      k8s:
        default-annotations:
          # Example annotation that will be applied to every k8s resource launched
          - flyte.lyft.net/deployment: gke
        # Example Environment variables that will be applied to every container executed on k8s
        default-env-vars:
          - FLYTE_CLOUD_PLATFORM: gcp
        co-pilot:
          name: "flyte-copilot-"
          image: "docker.io/lyft/flytecopilot:v0.3.35"
          start-timeout: "30s"
kind: ConfigMap
metadata:
  name: flyte-plugin-config-88gb5kg2gc
  namespace: flyte
---
apiVersion: v1
data:
  config.yaml: |
    propeller:
      metadata-prefix: metadata/propeller
      workers: 4
      max-workflow-retries: 30
      workflow-reeval-duration: 30s
      downstream-eval-duration: 30s
      limit-namespace: "all"
      prof-port: 10254
      metrics-prefix: flyte
      enable-admin-launcher: true
      leader-election:
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        enabled: true
        lease-duration: 15s
        renew-deadline: 10s
        retry-period: 2s
      queue:
        type: batch
        batching-interval: 2s
        batch-size: -1
        queue:
          type: bucket
          rate: 10
          capacity: 100
        sub-queue:
          type: bucket
          rate: 10
          capacity: 100
    logger:
      show-source: true
      level: 5
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          # TODO: replace <project-id> with the GCP project ID
          project_id: <project-id>
          scopes: https://www.googleapis.com/auth/devstorage.read_write
      container: "flyte"
    event:
      type: admin
      rate: 500
      capacity: 1000
    admin:
      endpoint: flyteadmin:81
      insecure: true
    catalog-cache:
      endpoint: datacatalog:89
      type: datacatalog
      insecure: true
    tasks:
      task-plugins:
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
kind: ConfigMap
metadata:
  name: flyte-propeller-config-hbtgkfm7gg
  namespace: flyte
---
apiVersion: v1
kind: Service
metadata:
  name: cloudsqlproxy
  namespace: flyte
spec:
  ports:
  - name: http
    port: 5432
    protocol: TCP
  selector:
    app: cloudsqlproxy
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    contour.heptio.com/upstream-protocol.h2c: grpc
  name: datacatalog
  namespace: flyte
spec:
  ports:
  - name: http
    port: 88
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 89
    protocol: TCP
    targetPort: 8089
  selector:
    app: datacatalog
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/load-balancer-type: Internal
  name: datacatalog-metrics
  namespace: flyte
spec:
  ports:
  - name: http-metrics
    port: 10254
    protocol: TCP
  selector:
    app: datacatalog
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/load-balancer-type: Internal
    contour.heptio.com/upstream-protocol.h2c: grpc
  name: flyteadmin
  namespace: flyte
spec:
  ports:
  - name: redoc
    port: 87
    protocol: TCP
    targetPort: 8087
  - name: http-metrics
    port: 10254
    protocol: TCP
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 81
    protocol: TCP
    targetPort: 8089
  selector:
    app: flyteadmin
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/load-balancer-type: Internal
  name: flyteconsole
  namespace: flyte
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: flyteconsole
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/load-balancer-type: Internal
  name: flytepropeller
  namespace: flyte
spec:
  ports:
  - name: http-metrics
    port: 10254
    protocol: TCP
  selector:
    app: flytepropeller
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cloudsqlproxy
  name: cloudsqlproxy
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudsqlproxy
  template:
    metadata:
      labels:
        app: cloudsqlproxy
    spec:
      containers:
      - command:
        - /cloud_sql_proxy
        - -instances=<project-id>:<region>:flyte=tcp:0.0.0.0:5432
        image: gcr.io/cloudsql-docker/gce-proxy:1.16
        imagePullPolicy: IfNotPresent
        name: cloudsql-proxy
        ports:
        - containerPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: datacatalog
  name: datacatalog
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datacatalog
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: datacatalog
        app.kubernetes.io/name: datacatalog
        app.kubernetes.io/version: 0.2.1
    spec:
      containers:
      - command:
        - datacatalog
        - --logtostderr
        - --config
        - /etc/datacatalog/config/datacatalog_config.yaml
        - serve
        image: docker.io/lyft/datacatalog:0.2.1
        imagePullPolicy: IfNotPresent
        name: datacatalog
        ports:
        - containerPort: 8088
        - containerPort: 8089
        resources:
          limits:
            cpu: "0.1"
            ephemeral-storage: 100Mi
            memory: 200Mi
        volumeMounts:
        - mountPath: /etc/gcp
          name: db-user-pass
        - mountPath: /etc/datacatalog/config
          name: config-volume
      initContainers:
      - command:
        - sh
        - -c
        - until pg_isready -h cloudsqlproxy -p 5432; do echo waiting for database;
          sleep 2; done;
        image: postgres:10.1
        imagePullPolicy: IfNotPresent
        name: check-db-ready
      - command:
        - datacatalog
        - --logtostderr
        - --config
        - /etc/datacatalog/config/datacatalog_config.yaml
        - migrate
        - run
        image: docker.io/lyft/datacatalog:0.2.1
        imagePullPolicy: IfNotPresent
        name: run-migrations
        volumeMounts:
        - mountPath: /etc/gcp
          name: db-user-pass
        - mountPath: /etc/datacatalog/config
          name: config-volume
      serviceAccountName: datacatalog
      volumes:
      - name: db-user-pass
        secret:
          secretName: db-user-pass
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: datacatalog-config-9b44c6f976
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyteadmin
  name: flyteadmin
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flyteadmin
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flyteadmin
        app.kubernetes.io/name: flyteadmin
        app.kubernetes.io/version: 0.3.0
    spec:
      containers:
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - serve
        image: docker.io/lyft/flyteadmin:v0.3.0
        imagePullPolicy: IfNotPresent
        name: flyteadmin
        ports:
        - containerPort: 8088
        - containerPort: 8089
        resources:
          limits:
            cpu: "1"
            ephemeral-storage: 100Mi
            memory: 200Mi
        volumeMounts:
        - mountPath: /etc/gcp
          name: db-user-pass
        - mountPath: /srv/flyte
          name: shared-data
        - mountPath: /etc/flyte/config
          name: config-volume
      - command:
        - sh
        - -c
        - ln -s /usr/share/nginx/html /usr/share/nginx/html/openapi && sh /usr/local/bin/docker-run.sh
        env:
        - name: PAGE_TITLE
          value: Flyte Admin OpenAPI
        - name: SPEC_URL
          value: /api/v1/openapi
        - name: PORT
          value: "8087"
        image: docker.io/redocly/redoc
        imagePullPolicy: IfNotPresent
        name: redoc
        ports:
        - containerPort: 8087
        resources:
          limits:
            cpu: "0.1"
            memory: 200Mi
      initContainers:
      - command:
        - sh
        - -c
        - until pg_isready -h cloudsqlproxy -p 5432; do echo waiting for database;
          sleep 2; done;
        image: postgres:10.1
        imagePullPolicy: IfNotPresent
        name: check-db-ready
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - migrate
        - run
        image: docker.io/lyft/flyteadmin:v0.3.0
        imagePullPolicy: IfNotPresent
        name: run-migrations
        volumeMounts:
        - mountPath: /etc/gcp
          name: db-user-pass
        - mountPath: /etc/flyte/config
          name: config-volume
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - migrate
        - seed-projects
        - flytesnacks
        - flytetester
        - flyteexamples
        image: docker.io/lyft/flyteadmin:v0.3.0
        imagePullPolicy: IfNotPresent
        name: seed-projects
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/gcp
          name: db-user-pass
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - clusterresource
        - sync
        image: docker.io/lyft/flyteadmin:v0.3.0
        imagePullPolicy: IfNotPresent
        name: sync-cluster-resources
        volumeMounts:
        - mountPath: /etc/flyte/clusterresource/templates
          name: resource-templates
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/gcp
          name: db-user-pass
      serviceAccountName: flyteadmin
      volumes:
      - name: db-user-pass
        secret:
          secretName: db-user-pass
      - configMap:
          name: clusterresource-template-dgc9fcm2kh
        name: resource-templates
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: flyte-admin-config-9k6mm9665h
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyteconsole
  name: flyteconsole
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flyteconsole
  template:
    metadata:
      labels:
        app: flyteconsole
        app.kubernetes.io/name: flyteconsole
        app.kubernetes.io/version: 0.9.0
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: flyte-console-config
        image: docker.io/lyft/flyteconsole:v0.9.0
        name: flyteconsole
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: "0.1"
            ephemeral-storage: 100Mi
            memory: 150Mi
        volumeMounts:
        - mountPath: /srv/flyte
          name: shared-data
      volumes:
      - emptyDir: {}
        name: shared-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flytepropeller
  name: flytepropeller
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: flytepropeller
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flytepropeller
        app.kubernetes.io/name: flytepropeller
        app.kubernetes.io/version: 0.3.2
    spec:
      containers:
      - args:
        - --config
        - /etc/flyte/config*/config.yaml
        command:
        - flytepropeller
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/lyft/flytepropeller:v0.3.2
        imagePullPolicy: IfNotPresent
        name: flytepropeller
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: "1"
            ephemeral-storage: 1000Mi
            memory: 1000Mi
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/flyte/config-plugin
          name: plugin-config-volume
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config-hbtgkfm7gg
        name: config-volume
      - configMap:
          name: flyte-plugin-config-88gb5kg2gc
        name: plugin-config-volume
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: syncresources
  namespace: flyte
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - flyteadmin
            - --logtostderr
            - --config
            - /etc/flyte/config/flyteadmin_config.yaml
            - clusterresource
            - sync
            image: docker.io/lyft/flyteadmin:v0.3.0
            imagePullPolicy: IfNotPresent
            name: sync-cluster-resources
            volumeMounts:
            - mountPath: /etc/flyte/clusterresource/templates
              name: resource-templates
            - mountPath: /etc/flyte/config
              name: config-volume
            - mountPath: /etc/gcp
              name: db-user-pass
          restartPolicy: OnFailure
          serviceAccountName: flyteadmin
          volumes:
          - configMap:
              name: clusterresource-template-dgc9fcm2kh
            name: resource-templates
          - configMap:
              name: flyte-admin-config-9k6mm9665h
            name: config-volume
          - name: db-user-pass
            secret:
              secretName: db-user-pass
  schedule: '*/1 * * * *'
