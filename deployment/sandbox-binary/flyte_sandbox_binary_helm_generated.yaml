---
# Source: flyte-binary/templates/namespace.yaml
kind: Namespace
apiVersion: v1
metadata:
  name: flyte
  labels: 
    helm.sh/chart: flyte-binary-0.1.0
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte-binary/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte
---
# Source: flyte-binary/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-backend-config
  labels: 
    helm.sh/chart: flyte-binary-0.1.0
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  flyte.yaml: | 
    propeller:
      rawoutput-prefix: "s3://my-s3-bucket/data/"
      create-flyteworkflow-crd: true
    webhook:
      certDir: /var/run/flyte/certs
      localCert: true
    tasks:
      task-plugins:
        enabled-plugins:
          - container
          - sidecar
          - K8S-ARRAY
        default-for-task-types:
          - container: container
          - container_array: K8S-ARRAY
    database:
      postgres:
        port: 5432
        username: postgres
        host: 127.0.0.1
        dbname: flyteadmin
        options: "sslmode=disable"
    storage:
      type: minio
      connection:
        region: my-region
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: "http://localhost:30002"
      cache:
        max_size_mbs: 10
        target_gc_percent: 100
      container: "my-s3-bucket"
    logger:
      show-source: true
      level: 1
    admin:
      endpoint: localhost:8089
      insecure: true
    plugins:
      # All k8s plugins default configuration
      k8s:
        inject-finalizer: true
        default-env-vars:
          - AWS_METADATA_SERVICE_TIMEOUT: 5
          - AWS_METADATA_SERVICE_NUM_ATTEMPTS: 20
          - FLYTE_AWS_ENDPOINT: "http://flyte-sandbox-minio.flyte:9000"
          - FLYTE_AWS_ACCESS_KEY_ID: minio
          - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage
      # Logging configuration
      # Escape Helm templating because admin will template these later
      logs:
        kubernetes-enabled: true
        kubernetes-template-uri:
            "http://localhost:30080/kubernetes-dashboard/#/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}"
      k8s-array:
        logs:
          config:
            kubernetes-enabled: true
            kubernetes-template-uri: 
                "http://localhost:30080/kubernetes-dashboard/#/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}"
    cluster_resources:
      refreshInterval: 5m
      templatePath: "/etc/flyte/cluster-resource-templates"
      # -- Starts the cluster resource manager in standalone mode with requisite auth credentials to call flyteadmin service endpoints
      standaloneDeployment: false
    catalog-cache:
      endpoint: localhost:8081
      insecure: true
      type: datacatalog
    namespace_mapping:
      template: "{{ project }}-{{ domain }}"
---
# Source: flyte-binary/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-resource-templates
  labels: 
    helm.sh/chart: flyte-binary-0.1.0
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  namespace.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
---
# Source: flyte-binary/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-role
rules:
- apiGroups:
      - ""
  resources:
      - namespaces
      - resourcequotas
      - secrets
  verbs:
      - create
      - get
      - list
      - patch
      - update
- apiGroups:
      - ""
  resources:
      - pods
  verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
- apiGroups:
      - ""
  resources:
      - events
  verbs:
      - create
      - delete
      - patch
      - update
- apiGroups:
      - flyte.lyft.com
  resources:
      - flyteworkflows
  verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - post
      - update
      - watch
- apiGroups:
      - apiextensions.k8s.io
  resources:
      - customresourcedefinitions
  verbs:
      - create
      - get
      - list
- apiGroups:
      - admissionregistration.k8s.io
  resources:
      - mutatingwebhookconfigurations
  verbs:
      - create
      - get
      - list
      - patch
      - update
---
# Source: flyte-binary/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-role
subjects:
  - kind: ServiceAccount
    name: flyte
    # Have to add a namespace explicitly here so that the generated manifest has it
    # since kubectl apply --namespace won't update it.
    namespace: flyte
---
# Source: flyte-binary/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte
spec:
  ports:
    - name: http
      port: 8088
    - name: grpc
      port: 8089
  selector:
    app: flyte
---
# Source: flyte-binary/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
spec:
  ports:
    - name: webhook
      port: 443
      targetPort: 9443
  selector:
    app: flyte
---
# Source: flyte-binary/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyte
  name: flytebinary
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: flyte
  template:
    metadata:
      labels:
        app: flyte
    spec:
      hostNetwork: true
      initContainers:
      - name: wait-for-db
        image: "postgres:15-alpine"
        imagePullPolicy: "IfNotPresent"
        command:
        - sh
        - -e
        - -c
        args:
        - |
          until pg_isready \
            -h 127.0.0.1 \
            -p 5432 \
            -U postgres
          do
            echo waiting for database
            sleep 0.1
          done
      containers:
      - name: flyte
        image: "ghcr.io/flyteorg/flyte-sandbox:flytebinary_1007"
        imagePullPolicy: "IfNotPresent"
        args:
        - start
        - --config
        - /etc/flyte/flyte.yaml
        resources:
          limits:
            cpu: 1
            memory: 1Gi
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8088
          name: http
        - containerPort: 8089
          name: grpc
        - containerPort: 9443
          name: webhook
        volumeMounts:
        - mountPath: /etc/flyte/cluster-resource-templates
          name: cluster-resource-templates
        - mountPath: /etc/flyte/flyte.yaml
          subPath: flyte.yaml
          name: config
        - mountPath: /var/run/flyte
          name: state
      serviceAccountName: flyte
      volumes:
      - name: cluster-resource-templates
        configMap:
          name: cluster-resource-templates
      - name: config
        configMap:
          name: flyte-backend-config
      - name: state
        emptyDir: {}
